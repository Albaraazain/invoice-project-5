{
    "sourceFile": "src/js/store/solarSizingState.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1731677180994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731677192557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,75 +44,42 @@\n   return state.error;\r\n }\r\n \r\n export async function fetchBillData(referenceNumber) {\r\n-  state.isLoading = true;\r\n-  state.error = null;\r\n-\r\n   try {\r\n-    // Simulate API call with a delay\r\n+    // Simulate API call\r\n     await new Promise((resolve) => setTimeout(resolve, 1000));\r\n \r\n-    // Generate mock data (similar to the Vue version)\r\n+    // Generate mock data with valid values\r\n     const unitsConsumed = Math.floor(Math.random() * 500) + 300;\r\n     const ratePerUnit = (Math.random() * 5 + 15).toFixed(2);\r\n     const amount = (unitsConsumed * ratePerUnit).toFixed(2);\r\n-    const taxRate = 10;\r\n-    const taxAmount = (amount * (taxRate / 100)).toFixed(2);\r\n-    const totalAmount = (parseFloat(amount) + parseFloat(taxAmount)).toFixed(2);\r\n \r\n-    // Solar system calculation (simplified)\r\n-    const systemSize = (unitsConsumed / 30 / 4).toFixed(2);\r\n-    const numberOfPanels = Math.ceil((systemSize * 1000) / 400);\r\n-    const estimatedDailyProduction = (systemSize * 4).toFixed(2);\r\n-    const estimatedMonthlyProduction = (estimatedDailyProduction * 30).toFixed(\r\n-      2\r\n-    );\r\n-    const estimatedAnnualProduction = (estimatedDailyProduction * 365).toFixed(\r\n-      2\r\n-    );\r\n-    const coveragePercentage = (\r\n-      (estimatedMonthlyProduction / unitsConsumed) *\r\n-      100\r\n-    ).toFixed(2);\r\n-\r\n-    state.billData = {\r\n+    const mockData = {\r\n       referenceNumber,\r\n-      customerName: \"John Doe\",\r\n-      address: \"123 Solar Street, Sunny City, Pakistan\",\r\n-      phoneNumber: \"+92 300 1234567\",\r\n-      issueDate: new Date().toLocaleDateString(),\r\n-      dueDate: new Date(\r\n-        Date.now() + 14 * 24 * 60 * 60 * 1000\r\n-      ).toLocaleDateString(),\r\n       unitsConsumed,\r\n-      ratePerUnit,\r\n-      amount,\r\n-      taxRate,\r\n-      taxAmount,\r\n-      totalAmount,\r\n-      averageMonthlyConsumption: unitsConsumed,\r\n-      backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n-      recommendedSystemSize: parseFloat(systemSize),\r\n-      numberOfPanels,\r\n-      panelWattage: 400,\r\n-      estimatedDailyProduction: parseFloat(estimatedDailyProduction),\r\n-      estimatedMonthlyProduction: parseFloat(estimatedMonthlyProduction),\r\n-      estimatedAnnualProduction: parseFloat(estimatedAnnualProduction),\r\n-      coveragePercentage: parseFloat(coveragePercentage),\r\n-      estimatedSystemCost: Math.round(systemSize * 100000),\r\n+      ratePerUnit: parseFloat(ratePerUnit),\r\n+      amount: parseFloat(amount),\r\n+      recommendedSystemSize: parseFloat((unitsConsumed / 30 / 4).toFixed(2)),\r\n+      estimatedDailyProduction: parseFloat((unitsConsumed / 30).toFixed(2)),\r\n+      estimatedMonthlyProduction: unitsConsumed,\r\n+      estimatedAnnualProduction: unitsConsumed * 12,\r\n+      estimatedSystemCost: Math.round((unitsConsumed / 30 / 4) * 100000),\r\n       estimatedAnnualSavings: Math.round(\r\n-        estimatedAnnualProduction * ratePerUnit\r\n+        unitsConsumed * 12 * parseFloat(ratePerUnit)\r\n       ),\r\n-      estimatedPaybackPeriod: (\r\n-        (systemSize * 100000) /\r\n-        (estimatedAnnualProduction * ratePerUnit)\r\n-      ).toFixed(1),\r\n+      estimatedPaybackPeriod: parseFloat(\r\n+        (\r\n+          ((unitsConsumed / 30 / 4) * 100000) /\r\n+          (unitsConsumed * 12 * parseFloat(ratePerUnit))\r\n+        ).toFixed(1)\r\n+      ),\r\n     };\r\n-    saveBillData(state.billData);\r\n-  } catch (err) {\r\n-    state.error = \"Failed to fetch bill data. Please try again.\";\r\n-    console.error(\"Error fetching bill data:\", err);\r\n-  } finally {\r\n-    state.isLoading = false;\r\n+\r\n+    console.log(\"Generated mock data:\", mockData); // Add this log\r\n+    saveBillData(mockData);\r\n+    return mockData;\r\n+  } catch (error) {\r\n+    console.error(\"Error in fetchBillData:\", error);\r\n+    throw error;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1731701314387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,16 @@\n   }\r\n   return null;\r\n }\r\n \r\n+export function setAnimationShown() {\r\n+  localStorage.setItem(\"billReviewAnimationShown\", \"true\");\r\n+}\r\n+\r\n+export function hasAnimationBeenShown() {\r\n+  return localStorage.getItem(\"billReviewAnimationShown\") === \"true\";\r\n+}\r\n+\r\n export function saveBillData(billData) {\r\n   console.log(\"Saving bill data:\", billData); // Add this log\r\n   try {\r\n     localStorage.setItem(\"billData\", JSON.stringify(billData));\r\n"
                }
            ],
            "date": 1731677180994,
            "name": "Commit-0",
            "content": "// js/store/solarSizingState.js\r\n\r\nlet state = {\r\n  billData: null,\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport function initializeSolarSizingState() {\r\n  const savedData = localStorage.getItem(\"billData\");\r\n  if (savedData) {\r\n    state.billData = JSON.parse(savedData);\r\n  }\r\n}\r\n\r\nexport function getBillData() {\r\n  const savedData = localStorage.getItem(\"billData\");\r\n  console.log(\"Retrieved saved data:\", savedData); // Add this log\r\n  if (savedData) {\r\n    try {\r\n      return JSON.parse(savedData);\r\n    } catch (error) {\r\n      console.error(\"Error parsing saved bill data:\", error);\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function saveBillData(billData) {\r\n  console.log(\"Saving bill data:\", billData); // Add this log\r\n  try {\r\n    localStorage.setItem(\"billData\", JSON.stringify(billData));\r\n  } catch (error) {\r\n    console.error(\"Error saving bill data:\", error);\r\n  }\r\n}\r\n\r\nexport function getIsLoading() {\r\n  return state.isLoading;\r\n}\r\n\r\nexport function getError() {\r\n  return state.error;\r\n}\r\n\r\nexport async function fetchBillData(referenceNumber) {\r\n  state.isLoading = true;\r\n  state.error = null;\r\n\r\n  try {\r\n    // Simulate API call with a delay\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    // Generate mock data (similar to the Vue version)\r\n    const unitsConsumed = Math.floor(Math.random() * 500) + 300;\r\n    const ratePerUnit = (Math.random() * 5 + 15).toFixed(2);\r\n    const amount = (unitsConsumed * ratePerUnit).toFixed(2);\r\n    const taxRate = 10;\r\n    const taxAmount = (amount * (taxRate / 100)).toFixed(2);\r\n    const totalAmount = (parseFloat(amount) + parseFloat(taxAmount)).toFixed(2);\r\n\r\n    // Solar system calculation (simplified)\r\n    const systemSize = (unitsConsumed / 30 / 4).toFixed(2);\r\n    const numberOfPanels = Math.ceil((systemSize * 1000) / 400);\r\n    const estimatedDailyProduction = (systemSize * 4).toFixed(2);\r\n    const estimatedMonthlyProduction = (estimatedDailyProduction * 30).toFixed(\r\n      2\r\n    );\r\n    const estimatedAnnualProduction = (estimatedDailyProduction * 365).toFixed(\r\n      2\r\n    );\r\n    const coveragePercentage = (\r\n      (estimatedMonthlyProduction / unitsConsumed) *\r\n      100\r\n    ).toFixed(2);\r\n\r\n    state.billData = {\r\n      referenceNumber,\r\n      customerName: \"John Doe\",\r\n      address: \"123 Solar Street, Sunny City, Pakistan\",\r\n      phoneNumber: \"+92 300 1234567\",\r\n      issueDate: new Date().toLocaleDateString(),\r\n      dueDate: new Date(\r\n        Date.now() + 14 * 24 * 60 * 60 * 1000\r\n      ).toLocaleDateString(),\r\n      unitsConsumed,\r\n      ratePerUnit,\r\n      amount,\r\n      taxRate,\r\n      taxAmount,\r\n      totalAmount,\r\n      averageMonthlyConsumption: unitsConsumed,\r\n      backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n      recommendedSystemSize: parseFloat(systemSize),\r\n      numberOfPanels,\r\n      panelWattage: 400,\r\n      estimatedDailyProduction: parseFloat(estimatedDailyProduction),\r\n      estimatedMonthlyProduction: parseFloat(estimatedMonthlyProduction),\r\n      estimatedAnnualProduction: parseFloat(estimatedAnnualProduction),\r\n      coveragePercentage: parseFloat(coveragePercentage),\r\n      estimatedSystemCost: Math.round(systemSize * 100000),\r\n      estimatedAnnualSavings: Math.round(\r\n        estimatedAnnualProduction * ratePerUnit\r\n      ),\r\n      estimatedPaybackPeriod: (\r\n        (systemSize * 100000) /\r\n        (estimatedAnnualProduction * ratePerUnit)\r\n      ).toFixed(1),\r\n    };\r\n    saveBillData(state.billData);\r\n  } catch (err) {\r\n    state.error = \"Failed to fetch bill data. Please try again.\";\r\n    console.error(\"Error fetching bill data:\", err);\r\n  } finally {\r\n    state.isLoading = false;\r\n  }\r\n}\r\n"
        }
    ]
}