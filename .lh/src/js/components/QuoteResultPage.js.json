{
    "sourceFile": "src/js/components/QuoteResultPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1731667075389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731673868440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,194 +4,175 @@\n import { CountUp } from \"countup.js\";\r\n import ProgressBar from \"progressbar.js\";\r\n \r\n export class QuoteResultPage {\r\n-    constructor() {\r\n-        try {\r\n-            this.billData = getBillData();\r\n-            this.error = getError();\r\n-        } catch (error) {\r\n-            console.error(\"Error in QuoteResultPage constructor:\", error);\r\n-            this.error = \"Failed to load bill data. Please try again.\";\r\n-        }\r\n-        this.charts = {};\r\n-        this.progressBars = {};\r\n-        this.countUps = {};\r\n+  constructor() {\r\n+    try {\r\n+      this.billData = getBillData();\r\n+      this.error = getError();\r\n+    } catch (error) {\r\n+      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n+      this.error = \"Failed to load bill data. Please try again.\";\r\n     }\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n \r\n-    render() {\r\n-        const app = document.getElementById(\"app\");\r\n-        app.innerHTML = `\r\n-            <div class=\"min-h-screen bg-slate-50 p-8\">\r\n-                <!-- Header -->\r\n-                <div class=\"max-w-7xl mx-auto mb-8\">\r\n-                    <h1 class=\"text-3xl font-bold text-gray-900\">Your Solar System Quote</h1>\r\n-                    <p class=\"text-gray-600 mt-2\">Based on your energy consumption analysis</p>\r\n-                </div>\r\n-\r\n-                <!-- Main Grid -->\r\n-                <div class=\"max-w-7xl mx-auto grid grid-cols-12 gap-6\">\r\n-                    <!-- System Size Card - Span 4 columns -->\r\n-                    <div class=\"col-span-4 bg-white rounded-2xl p-6 shadow-sm\">\r\n-                        <div class=\"flex items-start justify-between\">\r\n+  render() {\r\n+    const app = document.getElementById(\"app\");\r\n+    app.innerHTML = `\r\n+            <div class=\"min-h-screen bg-gray-50\">\r\n+                <!-- Header Section -->\r\n+                <header class=\"bg-white shadow-sm\">\r\n+                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n+                        <div class=\"flex items-center justify-between\">\r\n                             <div>\r\n-                                <p class=\"text-gray-600 text-sm\">Recommended System Size</p>\r\n-                                <h2 class=\"text-4xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"system-size-value\">0</span>\r\n-                                    <span class=\"text-xl font-normal text-gray-500\">kW</span>\r\n-                                </h2>\r\n+                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n                             </div>\r\n-                            <div class=\"bg-blue-50 p-3 rounded-xl\">\r\n-                                <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                            <button \r\n+                                onclick=\"window.router.push('/bill-review')\"\r\n+                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n+                            >\r\n+                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n+                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n                                 </svg>\r\n-                            </div>\r\n+                                Back to Analysis\r\n+                            </button>\r\n                         </div>\r\n-                        <div class=\"mt-4\">\r\n-                            <div id=\"system-size-progress\" class=\"h-2 bg-gray-100 rounded-full\"></div>\r\n-                        </div>\r\n                     </div>\r\n-\r\n-                    <!-- Cost Card - Span 4 columns -->\r\n-                    <div class=\"col-span-4 bg-white rounded-2xl p-6 shadow-sm\">\r\n-                        <div class=\"flex items-start justify-between\">\r\n-                            <div>\r\n-                                <p class=\"text-gray-600 text-sm\">Total Investment</p>\r\n-                                <h2 class=\"text-4xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"cost-value\">0</span>\r\n-                                </h2>\r\n-                            </div>\r\n-                            <div class=\"bg-green-50 p-3 rounded-xl\">\r\n-                                <svg class=\"w-6 h-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n-                                </svg>\r\n-                            </div>\r\n-                        </div>\r\n-                        <div class=\"mt-4 flex items-center justify-between text-sm\">\r\n-                            <span class=\"text-gray-600\">Federal Tax Credit</span>\r\n-                            <span class=\"text-green-600 font-medium\">-30%</span>\r\n-                        </div>\r\n+                </header>\r\n+    \r\n+                <!-- Main Content -->\r\n+                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n+                    <!-- Key Metrics Grid -->\r\n+                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n+                        ${this.renderKeyMetrics()}\r\n                     </div>\r\n-\r\n-                    <!-- Payback Period Card - Span 4 columns -->\r\n-                    <div class=\"col-span-4 bg-white rounded-2xl p-6 shadow-sm\">\r\n-                        <div class=\"flex items-start justify-between\">\r\n-                            <div>\r\n-                                <p class=\"text-gray-600 text-sm\">Payback Period</p>\r\n-                                <h2 class=\"text-4xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"payback-value\">0</span>\r\n-                                    <span class=\"text-xl font-normal text-gray-500\">years</span>\r\n-                                </h2>\r\n-                            </div>\r\n-                            <div class=\"bg-purple-50 p-3 rounded-xl\">\r\n-                                <svg class=\"w-6 h-6 text-purple-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n-                                </svg>\r\n-                            </div>\r\n-                        </div>\r\n-                        <div class=\"mt-4 flex items-center justify-between text-sm\">\r\n-                            <span class=\"text-gray-600\">Annual Savings</span>\r\n-                            <span id=\"annual-savings-value\" class=\"text-purple-600 font-medium\">\r\n-                                0\r\n-                            </span>\r\n-                        </div>\r\n+    \r\n+                    <!-- Charts Grid -->\r\n+                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n+                        ${this.renderChartSections()}\r\n                     </div>\r\n-                    <!-- Production Chart - Span 8 columns -->\r\n-                    <div class=\"col-span-8 bg-white rounded-2xl p-6 shadow-sm\">\r\n-                        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Energy Production</h3>\r\n-                        <canvas id=\"energy-production-chart\" height=\"300\"></canvas>\r\n+    \r\n+                    <!-- Additional Details -->\r\n+                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n+                        ${this.renderDetailsSections()}\r\n                     </div>\r\n+                </main>\r\n+            </div>\r\n+        `;\r\n \r\n-                    <!-- Statistics Grid - Span 4 columns -->\r\n-                    <div class=\"col-span-4 grid grid-cols-2 gap-4\">\r\n-                        ${this.renderStatCards()}\r\n-                    </div>\r\n+    // Initialize components after DOM is ready\r\n+    requestAnimationFrame(() => {\r\n+      this.initializeComponents();\r\n+    });\r\n+  }\r\n \r\n-                    <!-- CO2 Impact - Span 6 columns -->\r\n-                    <div class=\"col-span-6 bg-white rounded-2xl p-6 shadow-sm\">\r\n-                        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Environmental Impact</h3>\r\n-                        <div class=\"grid grid-cols-2 gap-8\">\r\n-                            <div>\r\n-                                <p class=\"text-gray-600 text-sm\">CO2 Offset</p>\r\n-                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"co2-offset-value\">0</span>\r\n-                                    <span class=\"text-lg font-normal text-gray-500\">tons/year</span>\r\n-                                </p>\r\n-                            </div>\r\n-                            <div>\r\n-                                <p class=\"text-gray-600 text-sm\">Equivalent to Trees Planted</p>\r\n-                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"trees-value\">0</span>\r\n-                                    <span class=\"text-lg font-normal text-gray-500\">trees</span>\r\n-                                </p>\r\n-                            </div>\r\n-                        </div>\r\n-                    </div>\r\n+  renderKeyMetrics() {\r\n+    const metrics = [\r\n+      {\r\n+        title: \"Recommended System Size\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        unit: \"kW\",\r\n+        icon: \"⚡\",\r\n+        color: \"blue\",\r\n+        id: \"system-size\",\r\n+      },\r\n+      {\r\n+        title: \"Total Investment\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR\",\r\n+        icon: \"💰\",\r\n+        color: \"green\",\r\n+        id: \"total-cost\",\r\n+      },\r\n+      {\r\n+        title: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        color: \"purple\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n \r\n-                    <!-- System Details - Span 6 columns -->\r\n-                    <div class=\"col-span-6 bg-white rounded-2xl p-6 shadow-sm\">\r\n-                        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">System Details</h3>\r\n-                        <div class=\"grid grid-cols-2 gap-8\">\r\n-                            <div>\r\n-                                <p class=\"text-gray-600 text-sm\">Number of Panels</p>\r\n-                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"panels-value\">0</span>\r\n-                                    <span class=\"text-lg font-normal text-gray-500\">units</span>\r\n-                                </p>\r\n-                            </div>\r\n-                            <div>\r\n-                                <p class=\"text-gray-600 text-sm\">Required Roof Area</p>\r\n-                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n-                                    <span id=\"roof-area-value\">0</span>\r\n-                                    <span class=\"text-lg font-normal text-gray-500\">sq ft</span>\r\n-                                </p>\r\n-                            </div>\r\n-                        </div>\r\n+    return metrics\r\n+      .map(\r\n+        (metric) => `\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n+            <div class=\"flex justify-between items-start\">\r\n+                <div>\r\n+                    <p class=\"text-sm font-medium text-gray-500\">${\r\n+                      metric.title\r\n+                    }</p>\r\n+                    <div class=\"mt-1 flex items-baseline\">\r\n+                        ${\r\n+                          metric.prefix\r\n+                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n+                          metric.id\r\n+                        }-value\">0</span>\r\n+                        ${\r\n+                          metric.unit\r\n+                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n+                            : \"\"\r\n+                        }\r\n                     </div>\r\n                 </div>\r\n+                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n+                    <span class=\"text-xl\">${metric.icon}</span>\r\n+                </div>\r\n             </div>\r\n-        `;\r\n+            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n \r\n-        this.initializeComponents();\r\n-    }\r\n+  renderStatCards() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-yellow-50\",\r\n+        icon: \"⚡️\",\r\n+        id: \"daily-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Production\",\r\n+        value: this.billData.estimatedMonthlyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-blue-50\",\r\n+        icon: \"📊\",\r\n+        id: \"monthly-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Coverage\",\r\n+        value: this.billData.coveragePercentage,\r\n+        unit: \"%\",\r\n+        bg: \"bg-green-50\",\r\n+        icon: \"🎯\",\r\n+        id: \"coverage-value\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Efficiency\",\r\n+        value: \"21.5\",\r\n+        unit: \"%\",\r\n+        bg: \"bg-purple-50\",\r\n+        icon: \"⚙️\",\r\n+        id: \"efficiency-value\",\r\n+      },\r\n+    ];\r\n \r\n-    renderStatCards() {\r\n-        const stats = [\r\n-            {\r\n-                label: \"Daily Production\",\r\n-                value: this.billData.estimatedDailyProduction,\r\n-                unit: \"kWh\",\r\n-                bg: \"bg-yellow-50\",\r\n-                icon: \"⚡️\",\r\n-                id: \"daily-production-value\"\r\n-            },\r\n-            {\r\n-                label: \"Monthly Production\",\r\n-                value: this.billData.estimatedMonthlyProduction,\r\n-                unit: \"kWh\",\r\n-                bg: \"bg-blue-50\",\r\n-                icon: \"📊\",\r\n-                id: \"monthly-production-value\"\r\n-            },\r\n-            {\r\n-                label: \"Coverage\",\r\n-                value: this.billData.coveragePercentage,\r\n-                unit: \"%\",\r\n-                bg: \"bg-green-50\",\r\n-                icon: \"🎯\",\r\n-                id: \"coverage-value\"\r\n-            },\r\n-            {\r\n-                label: \"Panel Efficiency\",\r\n-                value: \"21.5\",\r\n-                unit: \"%\",\r\n-                bg: \"bg-purple-50\",\r\n-                icon: \"⚙️\",\r\n-                id: \"efficiency-value\"\r\n-            }\r\n-        ];\r\n-\r\n-        return stats.map(stat => `\r\n+    return stats\r\n+      .map(\r\n+        (stat) => `\r\n             <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n                 <div class=\"flex items-center justify-between mb-2\">\r\n                     <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n                     <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n@@ -202,209 +183,310 @@\n                     <span id=\"${stat.id}\">0</span>\r\n                     <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n                 </p>\r\n             </div>\r\n-        `).join('');\r\n-    }\r\n-    initializeComponents() {\r\n-      this.initializeCountUps();\r\n-      this.initializeProgressBars();\r\n-      this.initializeCharts();\r\n-      this.startAnimations();\r\n+        `\r\n+      )\r\n+      .join(\"\");\r\n   }\r\n+  initializeComponents() {\r\n+    this.initializeCountUps();\r\n+    this.initializeProgressBars();\r\n+    this.initializeCharts();\r\n+    this.startAnimations();\r\n+  }\r\n \r\n   initializeCountUps() {\r\n-      const countUpOptions = {\r\n-          duration: 2.5,\r\n-          useEasing: true,\r\n-          useGrouping: true,\r\n-      };\r\n+    const countUpOptions = {\r\n+      duration: 2.5,\r\n+      useEasing: true,\r\n+      useGrouping: true,\r\n+    };\r\n \r\n-      // System Size\r\n-      this.countUps.systemSize = new CountUp('system-size-value', 0, this.billData.recommendedSystemSize, 2, countUpOptions);\r\n+    // System Size\r\n+    this.countUps.systemSize = new CountUp(\r\n+      \"system-size-value\",\r\n+      0,\r\n+      this.billData.recommendedSystemSize,\r\n+      2,\r\n+      countUpOptions\r\n+    );\r\n \r\n-      // Cost\r\n-      this.countUps.cost = new CountUp('cost-value', 0, this.billData.estimatedSystemCost, 0, {\r\n-          ...countUpOptions,\r\n-          prefix: 'PKR ',\r\n-          formattingFn: (value) => {\r\n-              return new Intl.NumberFormat('en-PK', {\r\n-                  style: 'currency',\r\n-                  currency: 'PKR',\r\n-                  maximumFractionDigits: 0\r\n-              }).format(value);\r\n-          }\r\n-      });\r\n+    // Cost\r\n+    this.countUps.cost = new CountUp(\r\n+      \"cost-value\",\r\n+      0,\r\n+      this.billData.estimatedSystemCost,\r\n+      0,\r\n+      {\r\n+        ...countUpOptions,\r\n+        prefix: \"PKR \",\r\n+        formattingFn: (value) => {\r\n+          return new Intl.NumberFormat(\"en-PK\", {\r\n+            style: \"currency\",\r\n+            currency: \"PKR\",\r\n+            maximumFractionDigits: 0,\r\n+          }).format(value);\r\n+        },\r\n+      }\r\n+    );\r\n \r\n-      // Payback Period\r\n-      this.countUps.payback = new CountUp('payback-value', 0, this.billData.estimatedPaybackPeriod, 1, countUpOptions);\r\n+    // Payback Period\r\n+    this.countUps.payback = new CountUp(\r\n+      \"payback-value\",\r\n+      0,\r\n+      this.billData.estimatedPaybackPeriod,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n \r\n-      // Annual Savings\r\n-      this.countUps.annualSavings = new CountUp('annual-savings-value', 0, this.billData.estimatedAnnualSavings, 0, {\r\n-          ...countUpOptions,\r\n-          prefix: 'PKR ',\r\n-          formattingFn: (value) => {\r\n-              return new Intl.NumberFormat('en-PK', {\r\n-                  style: 'currency',\r\n-                  currency: 'PKR',\r\n-                  maximumFractionDigits: 0\r\n-              }).format(value);\r\n-          }\r\n-      });\r\n+    // Annual Savings\r\n+    this.countUps.annualSavings = new CountUp(\r\n+      \"annual-savings-value\",\r\n+      0,\r\n+      this.billData.estimatedAnnualSavings,\r\n+      0,\r\n+      {\r\n+        ...countUpOptions,\r\n+        prefix: \"PKR \",\r\n+        formattingFn: (value) => {\r\n+          return new Intl.NumberFormat(\"en-PK\", {\r\n+            style: \"currency\",\r\n+            currency: \"PKR\",\r\n+            maximumFractionDigits: 0,\r\n+          }).format(value);\r\n+        },\r\n+      }\r\n+    );\r\n \r\n-      // Production Stats\r\n-      this.countUps.dailyProduction = new CountUp('daily-production-value', 0, this.billData.estimatedDailyProduction, 1, countUpOptions);\r\n-      this.countUps.monthlyProduction = new CountUp('monthly-production-value', 0, this.billData.estimatedMonthlyProduction, 0, countUpOptions);\r\n-      this.countUps.coverage = new CountUp('coverage-value', 0, this.billData.coveragePercentage, 1, countUpOptions);\r\n-      this.countUps.efficiency = new CountUp('efficiency-value', 0, 21.5, 1, countUpOptions);\r\n+    // Production Stats\r\n+    this.countUps.dailyProduction = new CountUp(\r\n+      \"daily-production-value\",\r\n+      0,\r\n+      this.billData.estimatedDailyProduction,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.monthlyProduction = new CountUp(\r\n+      \"monthly-production-value\",\r\n+      0,\r\n+      this.billData.estimatedMonthlyProduction,\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.coverage = new CountUp(\r\n+      \"coverage-value\",\r\n+      0,\r\n+      this.billData.coveragePercentage,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.efficiency = new CountUp(\r\n+      \"efficiency-value\",\r\n+      0,\r\n+      21.5,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n \r\n-      // Environmental Impact\r\n-      const co2Offset = this.billData.estimatedAnnualProduction * 0.0007;\r\n-      this.countUps.co2Offset = new CountUp('co2-offset-value', 0, co2Offset, 1, countUpOptions);\r\n-      this.countUps.trees = new CountUp('trees-value', 0, Math.round(co2Offset * 40), 0, countUpOptions);\r\n+    // Environmental Impact\r\n+    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007;\r\n+    this.countUps.co2Offset = new CountUp(\r\n+      \"co2-offset-value\",\r\n+      0,\r\n+      co2Offset,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.trees = new CountUp(\r\n+      \"trees-value\",\r\n+      0,\r\n+      Math.round(co2Offset * 40),\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n \r\n-      // System Details\r\n-      this.countUps.panels = new CountUp('panels-value', 0, this.billData.numberOfPanels, 0, countUpOptions);\r\n-      this.countUps.roofArea = new CountUp('roof-area-value', 0, this.billData.numberOfPanels * 17.5, 0, countUpOptions);\r\n+    // System Details\r\n+    this.countUps.panels = new CountUp(\r\n+      \"panels-value\",\r\n+      0,\r\n+      this.billData.numberOfPanels,\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.roofArea = new CountUp(\r\n+      \"roof-area-value\",\r\n+      0,\r\n+      this.billData.numberOfPanels * 17.5,\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n   }\r\n \r\n   initializeProgressBars() {\r\n-      // System Size Progress Bar\r\n-      this.progressBars.systemSize = new ProgressBar.Line('#system-size-progress', {\r\n-          color: '#3B82F6',\r\n-          trailColor: '#E5E7EB',\r\n-          trailWidth: 8,\r\n-          strokeWidth: 8,\r\n-          duration: 2000,\r\n-          easing: 'easeInOut',\r\n-          from: { color: '#93C5FD' },\r\n-          to: { color: '#3B82F6' },\r\n-          step: (state, bar) => {\r\n-              bar.path.setAttribute('stroke', state.color);\r\n-          }\r\n-      });\r\n\\ No newline at end of file\n+    // System Size Progress Bar\r\n+    this.progressBars.systemSize = new ProgressBar.Line(\r\n+      \"#system-size-progress\",\r\n+      {\r\n+        color: \"#3B82F6\",\r\n+        trailColor: \"#E5E7EB\",\r\n+        trailWidth: 8,\r\n+        strokeWidth: 8,\r\n+        duration: 2000,\r\n+        easing: \"easeInOut\",\r\n+        from: { color: \"#93C5FD\" },\r\n+        to: { color: \"#3B82F6\" },\r\n+        step: (state, bar) => {\r\n+          bar.path.setAttribute(\"stroke\", state.color);\r\n+        },\r\n+      }\r\n+    );\r\n   }\r\n \r\n   initializeCharts() {\r\n-      const ctx = document.getElementById('energy-production-chart');\r\n-      if (!ctx) return;\r\n+    const ctx = document.getElementById(\"energy-production-chart\");\r\n+    if (!ctx) return;\r\n \r\n-      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n-      const baseProduction = this.billData.estimatedMonthlyProduction;\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const baseProduction = this.billData.estimatedMonthlyProduction;\r\n \r\n-      const productionData = months.map(month => {\r\n-          const seasonalFactor = this.getSeasonalFactor(month);\r\n-          return baseProduction * seasonalFactor;\r\n-      });\r\n+    const productionData = months.map((month) => {\r\n+      const seasonalFactor = this.getSeasonalFactor(month);\r\n+      return baseProduction * seasonalFactor;\r\n+    });\r\n \r\n-      this.charts.production = new Chart(ctx, {\r\n-          type: 'line',\r\n-          data: {\r\n-              labels: months,\r\n-              datasets: [{\r\n-                  label: 'Estimated Production (kWh)',\r\n-                  data: productionData,\r\n-                  borderColor: '#3B82F6',\r\n-                  backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n-                  tension: 0.4,\r\n-                  fill: true,\r\n-                  pointRadius: 4,\r\n-                  pointHoverRadius: 6\r\n-              }]\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: months,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Estimated Production (kWh)\",\r\n+            data: productionData,\r\n+            borderColor: \"#3B82F6\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            tension: 0.4,\r\n+            fill: true,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n           },\r\n-          options: {\r\n-              responsive: true,\r\n-              maintainAspectRatio: false,\r\n-              plugins: {\r\n-                  legend: {\r\n-                      display: false\r\n-                  },\r\n-                  tooltip: {\r\n-                      backgroundColor: 'white',\r\n-                      titleColor: '#1F2937',\r\n-                      bodyColor: '#4B5563',\r\n-                      borderColor: '#E5E7EB',\r\n-                      borderWidth: 1,\r\n-                      padding: 12,\r\n-                      displayColors: false,\r\n-                      callbacks: {\r\n-                          label: (context) => `${context.parsed.y.toLocaleString()} kWh`\r\n-                      }\r\n-                  }\r\n-              },\r\n-              scales: {\r\n-                  x: {\r\n-                      grid: {\r\n-                          display: false\r\n-                      }\r\n-                  },\r\n-                  y: {\r\n-                      beginAtZero: true,\r\n-                      grid: {\r\n-                          color: 'rgba(0, 0, 0, 0.05)'\r\n-                      }\r\n-                  }\r\n-              }\r\n-          }\r\n-      });\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            display: false,\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1F2937\",\r\n+            bodyColor: \"#4B5563\",\r\n+            borderColor: \"#E5E7EB\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            displayColors: false,\r\n+            callbacks: {\r\n+              label: (context) => `${context.parsed.y.toLocaleString()} kWh`,\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n   }\r\n \r\n   getSeasonalFactor(month) {\r\n-      const seasonalFactors = {\r\n-          'Dec': 0.7, 'Jan': 0.7, 'Feb': 0.8,\r\n-          'Mar': 0.9, 'Apr': 1.0, 'May': 1.1,\r\n-          'Jun': 1.2, 'Jul': 1.2, 'Aug': 1.1,\r\n-          'Sep': 1.0, 'Oct': 0.9, 'Nov': 0.8\r\n-      };\r\n-      return seasonalFactors[month];\r\n+    const seasonalFactors = {\r\n+      Dec: 0.7,\r\n+      Jan: 0.7,\r\n+      Feb: 0.8,\r\n+      Mar: 0.9,\r\n+      Apr: 1.0,\r\n+      May: 1.1,\r\n+      Jun: 1.2,\r\n+      Jul: 1.2,\r\n+      Aug: 1.1,\r\n+      Sep: 1.0,\r\n+      Oct: 0.9,\r\n+      Nov: 0.8,\r\n+    };\r\n+    return seasonalFactors[month];\r\n   }\r\n \r\n   startAnimations() {\r\n-      // Start all CountUp animations\r\n-      Object.values(this.countUps).forEach(countUp => {\r\n-          if (countUp && !countUp.error) {\r\n-              countUp.start();\r\n-          }\r\n-      });\r\n+    // Start all CountUp animations\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp && !countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n+    });\r\n \r\n-      // Animate progress bars\r\n-      if (this.progressBars.systemSize) {\r\n-          this.progressBars.systemSize.animate(0.75); // Example progress value\r\n+    // Animate progress bars\r\n+    if (this.progressBars.systemSize) {\r\n+      this.progressBars.systemSize.animate(0.75); // Example progress value\r\n+    }\r\n+\r\n+    // Add entrance animations with GSAP\r\n+    const cards = document.querySelectorAll(\".rounded-2xl\");\r\n+    gsap.fromTo(\r\n+      cards,\r\n+      {\r\n+        y: 20,\r\n+        opacity: 0,\r\n+      },\r\n+      {\r\n+        y: 0,\r\n+        opacity: 1,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n       }\r\n-\r\n-      // Add entrance animations with GSAP\r\n-      const cards = document.querySelectorAll('.rounded-2xl');\r\n-      gsap.fromTo(cards, \r\n-          { \r\n-              y: 20,\r\n-              opacity: 0\r\n-          },\r\n-          {\r\n-              y: 0,\r\n-              opacity: 1,\r\n-              duration: 0.6,\r\n-              stagger: 0.1,\r\n-              ease: \"power2.out\"\r\n-          }\r\n-      );\r\n+    );\r\n   }\r\n \r\n   cleanup() {\r\n-      // Cleanup charts\r\n-      Object.values(this.charts).forEach(chart => {\r\n-          if (chart) chart.destroy();\r\n-      });\r\n-      this.charts = {};\r\n+    // Cleanup charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    this.charts = {};\r\n \r\n-      // Cleanup progress bars\r\n-      Object.values(this.progressBars).forEach(progressBar => {\r\n-          if (progressBar) progressBar.destroy();\r\n-      });\r\n-      this.progressBars = {};\r\n+    // Cleanup progress bars\r\n+    Object.values(this.progressBars).forEach((progressBar) => {\r\n+      if (progressBar) progressBar.destroy();\r\n+    });\r\n+    this.progressBars = {};\r\n \r\n-      // Reset CountUps\r\n-      Object.values(this.countUps).forEach(countUp => {\r\n-          if (countUp) countUp.reset();\r\n-      });\r\n-      this.countUps = {};\r\n+    // Reset CountUps\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp) countUp.reset();\r\n+    });\r\n+    this.countUps = {};\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1731673903958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,28 @@\n       this.initializeComponents();\r\n     });\r\n   }\r\n \r\n+  renderChartSections() {\r\n+    return `\r\n+        <!-- Energy Production Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"production-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Cost Savings Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"savings-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n   renderKeyMetrics() {\r\n     const metrics = [\r\n       {\r\n         title: \"Recommended System Size\",\r\n"
                },
                {
                    "date": 1731673934592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,86 +362,156 @@\n     );\r\n   }\r\n \r\n   initializeCharts() {\r\n-    const ctx = document.getElementById(\"energy-production-chart\");\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n     if (!ctx) return;\r\n \r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const baseProduction = this.billData.estimatedMonthlyProduction;\r\n+    // Generate monthly data\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n \r\n-    const productionData = months.map((month) => {\r\n-      const seasonalFactor = this.getSeasonalFactor(month);\r\n-      return baseProduction * seasonalFactor;\r\n-    });\r\n-\r\n+    // Create chart with proper configuration\r\n     this.charts.production = new Chart(ctx, {\r\n       type: \"line\",\r\n       data: {\r\n-        labels: months,\r\n+        labels: monthlyData.labels,\r\n         datasets: [\r\n           {\r\n-            label: \"Estimated Production (kWh)\",\r\n-            data: productionData,\r\n-            borderColor: \"#3B82F6\",\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"rgb(59, 130, 246)\",\r\n             backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n             tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n             fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n             pointRadius: 4,\r\n             pointHoverRadius: 6,\r\n           },\r\n         ],\r\n       },\r\n       options: {\r\n         responsive: true,\r\n         maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n         plugins: {\r\n           legend: {\r\n-            display: false,\r\n+            position: \"top\",\r\n+            labels: {\r\n+              usePointStyle: true,\r\n+              padding: 20,\r\n+            },\r\n           },\r\n           tooltip: {\r\n             backgroundColor: \"white\",\r\n-            titleColor: \"#1F2937\",\r\n-            bodyColor: \"#4B5563\",\r\n-            borderColor: \"#E5E7EB\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n             borderWidth: 1,\r\n             padding: 12,\r\n-            displayColors: false,\r\n+            displayColors: true,\r\n             callbacks: {\r\n-              label: (context) => `${context.parsed.y.toLocaleString()} kWh`,\r\n+              label: function (context) {\r\n+                const label = context.dataset.label || \"\";\r\n+                const value = context.parsed.y || 0;\r\n+                return `${label}: ${value.toLocaleString()} kWh`;\r\n+              },\r\n             },\r\n           },\r\n         },\r\n         scales: {\r\n           x: {\r\n             grid: {\r\n               display: false,\r\n             },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+            },\r\n           },\r\n           y: {\r\n             beginAtZero: true,\r\n             grid: {\r\n               color: \"rgba(0, 0, 0, 0.05)\",\r\n             },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+              callback: function (value) {\r\n+                return value.toLocaleString() + \" kWh\";\r\n+              },\r\n+            },\r\n           },\r\n         },\r\n       },\r\n     });\r\n   }\r\n \r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const seasonalFactors = {\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n+    };\r\n+\r\n+    const monthlyProduction = months.map((month, index) => {\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n+\r\n+      // Base production from system size\r\n+      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n+      return Math.round(baseProduction * factor);\r\n+    });\r\n+\r\n+    const monthlyConsumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+      labels: months,\r\n+      production: monthlyProduction,\r\n+      consumption: monthlyConsumption,\r\n+    };\r\n+  }\r\n+\r\n   getSeasonalFactor(month) {\r\n     const seasonalFactors = {\r\n       Dec: 0.7,\r\n       Jan: 0.7,\r\n"
                },
                {
                    "date": 1731673953115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,569 @@\n+import { gsap } from \"gsap\";\r\n+import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n+import Chart from \"chart.js/auto\";\r\n+import { CountUp } from \"countup.js\";\r\n+import ProgressBar from \"progressbar.js\";\r\n+\r\n+export class QuoteResultPage {\r\n+  constructor() {\r\n+    try {\r\n+      this.billData = getBillData();\r\n+      this.error = getError();\r\n+    } catch (error) {\r\n+      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n+      this.error = \"Failed to load bill data. Please try again.\";\r\n+    }\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n+\r\n+  render() {\r\n+    const app = document.getElementById(\"app\");\r\n+    app.innerHTML = `\r\n+            <div class=\"min-h-screen bg-gray-50\">\r\n+                <!-- Header Section -->\r\n+                <header class=\"bg-white shadow-sm\">\r\n+                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n+                        <div class=\"flex items-center justify-between\">\r\n+                            <div>\r\n+                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n+                            </div>\r\n+                            <button \r\n+                                onclick=\"window.router.push('/bill-review')\"\r\n+                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n+                            >\r\n+                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n+                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n+                                </svg>\r\n+                                Back to Analysis\r\n+                            </button>\r\n+                        </div>\r\n+                    </div>\r\n+                </header>\r\n+    \r\n+                <!-- Main Content -->\r\n+                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n+                    <!-- Key Metrics Grid -->\r\n+                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n+                        ${this.renderKeyMetrics()}\r\n+                    </div>\r\n+    \r\n+                    <!-- Charts Grid -->\r\n+                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n+                        ${this.renderChartSections()}\r\n+                    </div>\r\n+    \r\n+                    <!-- Additional Details -->\r\n+                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n+                        ${this.renderDetailsSections()}\r\n+                    </div>\r\n+                </main>\r\n+            </div>\r\n+        `;\r\n+\r\n+    // Initialize components after DOM is ready\r\n+    requestAnimationFrame(() => {\r\n+      this.initializeComponents();\r\n+    });\r\n+  }\r\n+\r\n+  renderChartSections() {\r\n+    return `\r\n+        <!-- Energy Production Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"production-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Cost Savings Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"savings-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderKeyMetrics() {\r\n+    const metrics = [\r\n+      {\r\n+        title: \"Recommended System Size\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        unit: \"kW\",\r\n+        icon: \"⚡\",\r\n+        color: \"blue\",\r\n+        id: \"system-size\",\r\n+      },\r\n+      {\r\n+        title: \"Total Investment\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR\",\r\n+        icon: \"💰\",\r\n+        color: \"green\",\r\n+        id: \"total-cost\",\r\n+      },\r\n+      {\r\n+        title: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        color: \"purple\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return metrics\r\n+      .map(\r\n+        (metric) => `\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n+            <div class=\"flex justify-between items-start\">\r\n+                <div>\r\n+                    <p class=\"text-sm font-medium text-gray-500\">${\r\n+                      metric.title\r\n+                    }</p>\r\n+                    <div class=\"mt-1 flex items-baseline\">\r\n+                        ${\r\n+                          metric.prefix\r\n+                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n+                          metric.id\r\n+                        }-value\">0</span>\r\n+                        ${\r\n+                          metric.unit\r\n+                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n+                    <span class=\"text-xl\">${metric.icon}</span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderStatCards() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-yellow-50\",\r\n+        icon: \"⚡️\",\r\n+        id: \"daily-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Production\",\r\n+        value: this.billData.estimatedMonthlyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-blue-50\",\r\n+        icon: \"📊\",\r\n+        id: \"monthly-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Coverage\",\r\n+        value: this.billData.coveragePercentage,\r\n+        unit: \"%\",\r\n+        bg: \"bg-green-50\",\r\n+        icon: \"🎯\",\r\n+        id: \"coverage-value\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Efficiency\",\r\n+        value: \"21.5\",\r\n+        unit: \"%\",\r\n+        bg: \"bg-purple-50\",\r\n+        icon: \"⚙️\",\r\n+        id: \"efficiency-value\",\r\n+      },\r\n+    ];\r\n+\r\n+    return stats\r\n+      .map(\r\n+        (stat) => `\r\n+            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n+                <div class=\"flex items-center justify-between mb-2\">\r\n+                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n+                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n+                        ${stat.icon}\r\n+                    </span>\r\n+                </div>\r\n+                <p class=\"text-xl font-bold text-gray-900\">\r\n+                    <span id=\"${stat.id}\">0</span>\r\n+                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n+                </p>\r\n+            </div>\r\n+        `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+  initializeComponents() {\r\n+    this.initializeCountUps();\r\n+    this.initializeProgressBars();\r\n+    this.initializeCharts();\r\n+    this.startAnimations();\r\n+  }\r\n+\r\n+  initializeCountUps() {\r\n+    const countUpOptions = {\r\n+      duration: 2.5,\r\n+      useEasing: true,\r\n+      useGrouping: true,\r\n+    };\r\n+\r\n+    // System Size\r\n+    this.countUps.systemSize = new CountUp(\r\n+      \"system-size-value\",\r\n+      0,\r\n+      this.billData.recommendedSystemSize,\r\n+      2,\r\n+      countUpOptions\r\n+    );\r\n+\r\n+    // Cost\r\n+    this.countUps.cost = new CountUp(\r\n+      \"cost-value\",\r\n+      0,\r\n+      this.billData.estimatedSystemCost,\r\n+      0,\r\n+      {\r\n+        ...countUpOptions,\r\n+        prefix: \"PKR \",\r\n+        formattingFn: (value) => {\r\n+          return new Intl.NumberFormat(\"en-PK\", {\r\n+            style: \"currency\",\r\n+            currency: \"PKR\",\r\n+            maximumFractionDigits: 0,\r\n+          }).format(value);\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    // Payback Period\r\n+    this.countUps.payback = new CountUp(\r\n+      \"payback-value\",\r\n+      0,\r\n+      this.billData.estimatedPaybackPeriod,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+\r\n+    // Annual Savings\r\n+    this.countUps.annualSavings = new CountUp(\r\n+      \"annual-savings-value\",\r\n+      0,\r\n+      this.billData.estimatedAnnualSavings,\r\n+      0,\r\n+      {\r\n+        ...countUpOptions,\r\n+        prefix: \"PKR \",\r\n+        formattingFn: (value) => {\r\n+          return new Intl.NumberFormat(\"en-PK\", {\r\n+            style: \"currency\",\r\n+            currency: \"PKR\",\r\n+            maximumFractionDigits: 0,\r\n+          }).format(value);\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    // Production Stats\r\n+    this.countUps.dailyProduction = new CountUp(\r\n+      \"daily-production-value\",\r\n+      0,\r\n+      this.billData.estimatedDailyProduction,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.monthlyProduction = new CountUp(\r\n+      \"monthly-production-value\",\r\n+      0,\r\n+      this.billData.estimatedMonthlyProduction,\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.coverage = new CountUp(\r\n+      \"coverage-value\",\r\n+      0,\r\n+      this.billData.coveragePercentage,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.efficiency = new CountUp(\r\n+      \"efficiency-value\",\r\n+      0,\r\n+      21.5,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+\r\n+    // Environmental Impact\r\n+    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007;\r\n+    this.countUps.co2Offset = new CountUp(\r\n+      \"co2-offset-value\",\r\n+      0,\r\n+      co2Offset,\r\n+      1,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.trees = new CountUp(\r\n+      \"trees-value\",\r\n+      0,\r\n+      Math.round(co2Offset * 40),\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n+\r\n+    // System Details\r\n+    this.countUps.panels = new CountUp(\r\n+      \"panels-value\",\r\n+      0,\r\n+      this.billData.numberOfPanels,\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n+    this.countUps.roofArea = new CountUp(\r\n+      \"roof-area-value\",\r\n+      0,\r\n+      this.billData.numberOfPanels * 17.5,\r\n+      0,\r\n+      countUpOptions\r\n+    );\r\n+  }\r\n+\r\n+  initializeProgressBars() {\r\n+    // System Size Progress Bar\r\n+    this.progressBars.systemSize = new ProgressBar.Line(\r\n+      \"#system-size-progress\",\r\n+      {\r\n+        color: \"#3B82F6\",\r\n+        trailColor: \"#E5E7EB\",\r\n+        trailWidth: 8,\r\n+        strokeWidth: 8,\r\n+        duration: 2000,\r\n+        easing: \"easeInOut\",\r\n+        from: { color: \"#93C5FD\" },\r\n+        to: { color: \"#3B82F6\" },\r\n+        step: (state, bar) => {\r\n+          bar.path.setAttribute(\"stroke\", state.color);\r\n+        },\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  initializeCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    // Generate monthly data\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    // Create chart with proper configuration\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"rgb(59, 130, 246)\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+            labels: {\r\n+              usePointStyle: true,\r\n+              padding: 20,\r\n+            },\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            displayColors: true,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                const label = context.dataset.label || \"\";\r\n+                const value = context.parsed.y || 0;\r\n+                return `${label}: ${value.toLocaleString()} kWh`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+              callback: function (value) {\r\n+                return value.toLocaleString() + \" kWh\";\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  generateMonthlyProductionData() {\r\n+    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n+    const seasonalFactors = {\r\n+        winter: 0.7,\r\n+        spring: 0.9,\r\n+        summer: 1.2,\r\n+        fall: 0.8\r\n+    };\r\n+\r\n+    const monthlyProduction = months.map((month, index) => {\r\n+        let factor;\r\n+        if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+        else if (index < 5) factor = seasonalFactors.spring;\r\n+        else if (index < 8) factor = seasonalFactors.summer;\r\n+        else factor = seasonalFactors.fall;\r\n+\r\n+        // Base production from system size\r\n+        const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n+        return Math.round(baseProduction * factor);\r\n+    });\r\n+\r\n+    const monthlyConsumption = months.map(() => \r\n+        Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+        labels: months,\r\n+        production: monthlyProduction,\r\n+        consumption: monthlyConsumption\r\n+    };\r\n+}\r\n+\r\n+  getSeasonalFactor(month) {\r\n+    const seasonalFactors = {\r\n+      Dec: 0.7,\r\n+      Jan: 0.7,\r\n+      Feb: 0.8,\r\n+      Mar: 0.9,\r\n+      Apr: 1.0,\r\n+      May: 1.1,\r\n+      Jun: 1.2,\r\n+      Jul: 1.2,\r\n+      Aug: 1.1,\r\n+      Sep: 1.0,\r\n+      Oct: 0.9,\r\n+      Nov: 0.8,\r\n+    };\r\n+    return seasonalFactors[month];\r\n+  }\r\n+\r\n+  startAnimations() {\r\n+    // Start all CountUp animations\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp && !countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n+    });\r\n+\r\n+    // Animate progress bars\r\n+    if (this.progressBars.systemSize) {\r\n+      this.progressBars.systemSize.animate(0.75); // Example progress value\r\n+    }\r\n+\r\n+    // Add entrance animations with GSAP\r\n+    const cards = document.querySelectorAll(\".rounded-2xl\");\r\n+    gsap.fromTo(\r\n+      cards,\r\n+      {\r\n+        y: 20,\r\n+        opacity: 0,\r\n+      },\r\n+      {\r\n+        y: 0,\r\n+        opacity: 1,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Cleanup charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    this.charts = {};\r\n+\r\n+    // Cleanup progress bars\r\n+    Object.values(this.progressBars).forEach((progressBar) => {\r\n+      if (progressBar) progressBar.destroy();\r\n+    });\r\n+    this.progressBars = {};\r\n+\r\n+    // Reset CountUps\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp) countUp.reset();\r\n+    });\r\n+    this.countUps = {};\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1731673968402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,73 +366,68 @@\n     this.initProductionChart();\r\n     this.initSavingsChart();\r\n   }\r\n \r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n     if (!ctx) return;\r\n \r\n-    // Generate monthly data\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n+    const years = 25; // Standard solar panel warranty period\r\n+    const yearlyLabels = Array.from(\r\n+      { length: years + 1 },\r\n+      (_, i) => `Year ${i}`\r\n+    );\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n \r\n-    // Create chart with proper configuration\r\n-    this.charts.production = new Chart(ctx, {\r\n+    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n+      Math.round(yearlySavings * index)\r\n+    );\r\n+\r\n+    const investmentLine = yearlyLabels.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n       type: \"line\",\r\n       data: {\r\n-        labels: monthlyData.labels,\r\n+        labels: yearlyLabels,\r\n         datasets: [\r\n           {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"rgb(59, 130, 246)\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"rgb(16, 185, 129)\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n             fill: true,\r\n             tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n           },\r\n           {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n             borderColor: \"rgb(239, 68, 68)\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+            tension: 0,\r\n           },\r\n         ],\r\n       },\r\n       options: {\r\n         responsive: true,\r\n         maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n         plugins: {\r\n           legend: {\r\n             position: \"top\",\r\n-            labels: {\r\n-              usePointStyle: true,\r\n-              padding: 20,\r\n-            },\r\n           },\r\n           tooltip: {\r\n             backgroundColor: \"white\",\r\n             titleColor: \"#1f2937\",\r\n             bodyColor: \"#4b5563\",\r\n             borderColor: \"#e5e7eb\",\r\n             borderWidth: 1,\r\n             padding: 12,\r\n-            displayColors: true,\r\n             callbacks: {\r\n               label: function (context) {\r\n-                const label = context.dataset.label || \"\";\r\n-                const value = context.parsed.y || 0;\r\n-                return `${label}: ${value.toLocaleString()} kWh`;\r\n+                return `${\r\n+                  context.dataset.label\r\n+                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n               },\r\n             },\r\n           },\r\n         },\r\n@@ -440,503 +435,22 @@\n           x: {\r\n             grid: {\r\n               display: false,\r\n             },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-            },\r\n           },\r\n           y: {\r\n             beginAtZero: true,\r\n-            grid: {\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n             ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n               callback: function (value) {\r\n-                return value.toLocaleString() + \" kWh\";\r\n+                return \"PKR \" + value.toLocaleString();\r\n               },\r\n             },\r\n           },\r\n         },\r\n       },\r\n     });\r\n   }\r\n \r\n-  generateMonthlyProductionData() {\r\n-    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n-    const seasonalFactors = {\r\n-        winter: 0.7,\r\n-        spring: 0.9,\r\n-        summer: 1.2,\r\n-        fall: 0.8\r\n-    };\r\n-\r\n-    const monthlyProduction = months.map((month, index) => {\r\n-        let factor;\r\n-        if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-        else if (index < 5) factor = seasonalFactors.spring;\r\n-        else if (index < 8) factor = seasonalFactors.summer;\r\n-        else factor = seasonalFactors.fall;\r\n-\r\n-        // Base production from system size\r\n-        const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n-        return Math.round(baseProduction * factor);\r\n-    });\r\n-\r\n-    const monthlyConsumption = months.map(() => \r\n-        Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-        labels: months,\r\n-        production: monthlyProduction,\r\n-        consumption: monthlyConsumption\r\n-    };\r\n-}\r\n-\r\n-  getSeasonalFactor(month) {\r\n-    const seasonalFactors = {\r\n-      Dec: 0.7,\r\n-      Jan: 0.7,\r\n-      Feb: 0.8,\r\n-      Mar: 0.9,\r\n-      Apr: 1.0,\r\n-      May: 1.1,\r\n-      Jun: 1.2,\r\n-      Jul: 1.2,\r\n-      Aug: 1.1,\r\n-      Sep: 1.0,\r\n-      Oct: 0.9,\r\n-      Nov: 0.8,\r\n-    };\r\n-    return seasonalFactors[month];\r\n-  }\r\n-\r\n-  startAnimations() {\r\n-    // Start all CountUp animations\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp && !countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n-\r\n-    // Animate progress bars\r\n-    if (this.progressBars.systemSize) {\r\n-      this.progressBars.systemSize.animate(0.75); // Example progress value\r\n-    }\r\n-\r\n-    // Add entrance animations with GSAP\r\n-    const cards = document.querySelectorAll(\".rounded-2xl\");\r\n-    gsap.fromTo(\r\n-      cards,\r\n-      {\r\n-        y: 20,\r\n-        opacity: 0,\r\n-      },\r\n-      {\r\n-        y: 0,\r\n-        opacity: 1,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n-        ease: \"power2.out\",\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Cleanup charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-    this.charts = {};\r\n-\r\n-    // Cleanup progress bars\r\n-    Object.values(this.progressBars).forEach((progressBar) => {\r\n-      if (progressBar) progressBar.destroy();\r\n-    });\r\n-    this.progressBars = {};\r\n-\r\n-    // Reset CountUps\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp) countUp.reset();\r\n-    });\r\n-    this.countUps = {};\r\n-  }\r\n-}\r\n-import { gsap } from \"gsap\";\r\n-import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n-import Chart from \"chart.js/auto\";\r\n-import { CountUp } from \"countup.js\";\r\n-import ProgressBar from \"progressbar.js\";\r\n-\r\n-export class QuoteResultPage {\r\n-  constructor() {\r\n-    try {\r\n-      this.billData = getBillData();\r\n-      this.error = getError();\r\n-    } catch (error) {\r\n-      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n-      this.error = \"Failed to load bill data. Please try again.\";\r\n-    }\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  render() {\r\n-    const app = document.getElementById(\"app\");\r\n-    app.innerHTML = `\r\n-            <div class=\"min-h-screen bg-gray-50\">\r\n-                <!-- Header Section -->\r\n-                <header class=\"bg-white shadow-sm\">\r\n-                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n-                        <div class=\"flex items-center justify-between\">\r\n-                            <div>\r\n-                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n-                            </div>\r\n-                            <button \r\n-                                onclick=\"window.router.push('/bill-review')\"\r\n-                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n-                            >\r\n-                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n-                                </svg>\r\n-                                Back to Analysis\r\n-                            </button>\r\n-                        </div>\r\n-                    </div>\r\n-                </header>\r\n-    \r\n-                <!-- Main Content -->\r\n-                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n-                    <!-- Key Metrics Grid -->\r\n-                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n-                        ${this.renderKeyMetrics()}\r\n-                    </div>\r\n-    \r\n-                    <!-- Charts Grid -->\r\n-                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n-                        ${this.renderChartSections()}\r\n-                    </div>\r\n-    \r\n-                    <!-- Additional Details -->\r\n-                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n-                        ${this.renderDetailsSections()}\r\n-                    </div>\r\n-                </main>\r\n-            </div>\r\n-        `;\r\n-\r\n-    // Initialize components after DOM is ready\r\n-    requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n-    });\r\n-  }\r\n-\r\n-  renderChartSections() {\r\n-    return `\r\n-        <!-- Energy Production Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"production-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Cost Savings Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"savings-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderKeyMetrics() {\r\n-    const metrics = [\r\n-      {\r\n-        title: \"Recommended System Size\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        unit: \"kW\",\r\n-        icon: \"⚡\",\r\n-        color: \"blue\",\r\n-        id: \"system-size\",\r\n-      },\r\n-      {\r\n-        title: \"Total Investment\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR\",\r\n-        icon: \"💰\",\r\n-        color: \"green\",\r\n-        id: \"total-cost\",\r\n-      },\r\n-      {\r\n-        title: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        color: \"purple\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return metrics\r\n-      .map(\r\n-        (metric) => `\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n-            <div class=\"flex justify-between items-start\">\r\n-                <div>\r\n-                    <p class=\"text-sm font-medium text-gray-500\">${\r\n-                      metric.title\r\n-                    }</p>\r\n-                    <div class=\"mt-1 flex items-baseline\">\r\n-                        ${\r\n-                          metric.prefix\r\n-                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n-                          metric.id\r\n-                        }-value\">0</span>\r\n-                        ${\r\n-                          metric.unit\r\n-                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n-                    <span class=\"text-xl\">${metric.icon}</span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderStatCards() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-yellow-50\",\r\n-        icon: \"⚡️\",\r\n-        id: \"daily-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Production\",\r\n-        value: this.billData.estimatedMonthlyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-blue-50\",\r\n-        icon: \"📊\",\r\n-        id: \"monthly-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Coverage\",\r\n-        value: this.billData.coveragePercentage,\r\n-        unit: \"%\",\r\n-        bg: \"bg-green-50\",\r\n-        icon: \"🎯\",\r\n-        id: \"coverage-value\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Efficiency\",\r\n-        value: \"21.5\",\r\n-        unit: \"%\",\r\n-        bg: \"bg-purple-50\",\r\n-        icon: \"⚙️\",\r\n-        id: \"efficiency-value\",\r\n-      },\r\n-    ];\r\n-\r\n-    return stats\r\n-      .map(\r\n-        (stat) => `\r\n-            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n-                <div class=\"flex items-center justify-between mb-2\">\r\n-                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n-                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n-                        ${stat.icon}\r\n-                    </span>\r\n-                </div>\r\n-                <p class=\"text-xl font-bold text-gray-900\">\r\n-                    <span id=\"${stat.id}\">0</span>\r\n-                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n-                </p>\r\n-            </div>\r\n-        `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-  initializeComponents() {\r\n-    this.initializeCountUps();\r\n-    this.initializeProgressBars();\r\n-    this.initializeCharts();\r\n-    this.startAnimations();\r\n-  }\r\n-\r\n-  initializeCountUps() {\r\n-    const countUpOptions = {\r\n-      duration: 2.5,\r\n-      useEasing: true,\r\n-      useGrouping: true,\r\n-    };\r\n-\r\n-    // System Size\r\n-    this.countUps.systemSize = new CountUp(\r\n-      \"system-size-value\",\r\n-      0,\r\n-      this.billData.recommendedSystemSize,\r\n-      2,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // Cost\r\n-    this.countUps.cost = new CountUp(\r\n-      \"cost-value\",\r\n-      0,\r\n-      this.billData.estimatedSystemCost,\r\n-      0,\r\n-      {\r\n-        ...countUpOptions,\r\n-        prefix: \"PKR \",\r\n-        formattingFn: (value) => {\r\n-          return new Intl.NumberFormat(\"en-PK\", {\r\n-            style: \"currency\",\r\n-            currency: \"PKR\",\r\n-            maximumFractionDigits: 0,\r\n-          }).format(value);\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    // Payback Period\r\n-    this.countUps.payback = new CountUp(\r\n-      \"payback-value\",\r\n-      0,\r\n-      this.billData.estimatedPaybackPeriod,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // Annual Savings\r\n-    this.countUps.annualSavings = new CountUp(\r\n-      \"annual-savings-value\",\r\n-      0,\r\n-      this.billData.estimatedAnnualSavings,\r\n-      0,\r\n-      {\r\n-        ...countUpOptions,\r\n-        prefix: \"PKR \",\r\n-        formattingFn: (value) => {\r\n-          return new Intl.NumberFormat(\"en-PK\", {\r\n-            style: \"currency\",\r\n-            currency: \"PKR\",\r\n-            maximumFractionDigits: 0,\r\n-          }).format(value);\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    // Production Stats\r\n-    this.countUps.dailyProduction = new CountUp(\r\n-      \"daily-production-value\",\r\n-      0,\r\n-      this.billData.estimatedDailyProduction,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.monthlyProduction = new CountUp(\r\n-      \"monthly-production-value\",\r\n-      0,\r\n-      this.billData.estimatedMonthlyProduction,\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.coverage = new CountUp(\r\n-      \"coverage-value\",\r\n-      0,\r\n-      this.billData.coveragePercentage,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.efficiency = new CountUp(\r\n-      \"efficiency-value\",\r\n-      0,\r\n-      21.5,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // Environmental Impact\r\n-    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007;\r\n-    this.countUps.co2Offset = new CountUp(\r\n-      \"co2-offset-value\",\r\n-      0,\r\n-      co2Offset,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.trees = new CountUp(\r\n-      \"trees-value\",\r\n-      0,\r\n-      Math.round(co2Offset * 40),\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // System Details\r\n-    this.countUps.panels = new CountUp(\r\n-      \"panels-value\",\r\n-      0,\r\n-      this.billData.numberOfPanels,\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.roofArea = new CountUp(\r\n-      \"roof-area-value\",\r\n-      0,\r\n-      this.billData.numberOfPanels * 17.5,\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-  }\r\n-\r\n-  initializeProgressBars() {\r\n-    // System Size Progress Bar\r\n-    this.progressBars.systemSize = new ProgressBar.Line(\r\n-      \"#system-size-progress\",\r\n-      {\r\n-        color: \"#3B82F6\",\r\n-        trailColor: \"#E5E7EB\",\r\n-        trailWidth: 8,\r\n-        strokeWidth: 8,\r\n-        duration: 2000,\r\n-        easing: \"easeInOut\",\r\n-        from: { color: \"#93C5FD\" },\r\n-        to: { color: \"#3B82F6\" },\r\n-        step: (state, bar) => {\r\n-          bar.path.setAttribute(\"stroke\", state.color);\r\n-        },\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  initializeCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n   initProductionChart() {\r\n     const ctx = document.getElementById(\"production-chart\");\r\n     if (!ctx) return;\r\n \r\n"
                },
                {
                    "date": 1731674049531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,129 @@\n       this.initializeComponents();\r\n     });\r\n   }\r\n \r\n+  renderDetailsSections() {\r\n+    return `\r\n+        <!-- System Specifications -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n+            <div class=\"grid grid-cols-2 gap-4\">\r\n+                ${this.renderSpecificationDetails()}\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Environmental Impact -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n+            <div class=\"space-y-6\">\r\n+                ${this.renderEnvironmentalImpact()}\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderSpecificationDetails() {\r\n+    const specs = [\r\n+      {\r\n+        label: \"Number of Panels\",\r\n+        value: this.billData.numberOfPanels,\r\n+        unit: \"panels\",\r\n+        icon: \"solar_power\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Wattage\",\r\n+        value: this.billData.panelWattage,\r\n+        unit: \"W\",\r\n+        icon: \"bolt\",\r\n+      },\r\n+      {\r\n+        label: \"Required Roof Area\",\r\n+        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n+        unit: \"sq ft\",\r\n+        icon: \"home\",\r\n+      },\r\n+      {\r\n+        label: \"Annual Production\",\r\n+        value: Math.round(this.billData.estimatedAnnualProduction),\r\n+        unit: \"kWh\",\r\n+        icon: \"power\",\r\n+      },\r\n+    ];\r\n+\r\n+    return specs\r\n+      .map(\r\n+        (spec) => `\r\n+        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n+            <div class=\"flex-shrink-0\">\r\n+                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n+                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n+                </span>\r\n+            </div>\r\n+            <div class=\"ml-4\">\r\n+                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n+                <p class=\"mt-1 text-sm text-gray-500\">\r\n+                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n+          spec.unit\r\n+        }\r\n+                </p>\r\n+            </div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderEnvironmentalImpact() {\r\n+    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007; // tons of CO2 per kWh\r\n+    const treesEquivalent = Math.round(co2Offset * 40); // Each tree absorbs ~0.025 tons CO2 per year\r\n+    const gasoline = Math.round(co2Offset * 113); // gallons of gasoline equivalent\r\n+\r\n+    return `\r\n+        <div class=\"relative pt-1\">\r\n+            <div class=\"flex mb-2 items-center justify-between\">\r\n+                <div>\r\n+                    <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200\">\r\n+                        CO₂ Offset\r\n+                    </span>\r\n+                </div>\r\n+                <div class=\"text-right\">\r\n+                    <span class=\"text-xs font-semibold inline-block text-green-600\">\r\n+                        ${co2Offset.toFixed(1)} tons/year\r\n+                    </span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"overflow-hidden h-2 text-xs flex rounded bg-green-200\">\r\n+                <div id=\"co2-progress\" \r\n+                     class=\"w-0 transition-all duration-1000 shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500\">\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <div class=\"grid grid-cols-2 gap-4 mt-6\">\r\n+            <div class=\"bg-green-50 rounded-lg p-4\">\r\n+                <div class=\"flex items-center\">\r\n+                    <span class=\"text-2xl mr-3\">🌳</span>\r\n+                    <div>\r\n+                        <p class=\"text-sm text-gray-600\">Equivalent to</p>\r\n+                        <p class=\"text-lg font-semibold text-gray-900\">${treesEquivalent.toLocaleString()} trees planted</p>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+\r\n+            <div class=\"bg-blue-50 rounded-lg p-4\">\r\n+                <div class=\"flex items-center\">\r\n+                    <span class=\"text-2xl mr-3\">⛽</span>\r\n+                    <div>\r\n+                        <p class=\"text-sm text-gray-600\">Equal to removing</p>\r\n+                        <p class=\"text-lg font-semibold text-gray-900\">${gasoline.toLocaleString()} gallons of gasoline</p>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n   renderChartSections() {\r\n     return `\r\n         <!-- Energy Production Chart -->\r\n         <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n"
                },
                {
                    "date": 1731674106800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,135 +335,10 @@\n     this.initializeCharts();\r\n     this.startAnimations();\r\n   }\r\n \r\n-  initializeCountUps() {\r\n-    const countUpOptions = {\r\n-      duration: 2.5,\r\n-      useEasing: true,\r\n-      useGrouping: true,\r\n-    };\r\n+ \r\n \r\n-    // System Size\r\n-    this.countUps.systemSize = new CountUp(\r\n-      \"system-size-value\",\r\n-      0,\r\n-      this.billData.recommendedSystemSize,\r\n-      2,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // Cost\r\n-    this.countUps.cost = new CountUp(\r\n-      \"cost-value\",\r\n-      0,\r\n-      this.billData.estimatedSystemCost,\r\n-      0,\r\n-      {\r\n-        ...countUpOptions,\r\n-        prefix: \"PKR \",\r\n-        formattingFn: (value) => {\r\n-          return new Intl.NumberFormat(\"en-PK\", {\r\n-            style: \"currency\",\r\n-            currency: \"PKR\",\r\n-            maximumFractionDigits: 0,\r\n-          }).format(value);\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    // Payback Period\r\n-    this.countUps.payback = new CountUp(\r\n-      \"payback-value\",\r\n-      0,\r\n-      this.billData.estimatedPaybackPeriod,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // Annual Savings\r\n-    this.countUps.annualSavings = new CountUp(\r\n-      \"annual-savings-value\",\r\n-      0,\r\n-      this.billData.estimatedAnnualSavings,\r\n-      0,\r\n-      {\r\n-        ...countUpOptions,\r\n-        prefix: \"PKR \",\r\n-        formattingFn: (value) => {\r\n-          return new Intl.NumberFormat(\"en-PK\", {\r\n-            style: \"currency\",\r\n-            currency: \"PKR\",\r\n-            maximumFractionDigits: 0,\r\n-          }).format(value);\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    // Production Stats\r\n-    this.countUps.dailyProduction = new CountUp(\r\n-      \"daily-production-value\",\r\n-      0,\r\n-      this.billData.estimatedDailyProduction,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.monthlyProduction = new CountUp(\r\n-      \"monthly-production-value\",\r\n-      0,\r\n-      this.billData.estimatedMonthlyProduction,\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.coverage = new CountUp(\r\n-      \"coverage-value\",\r\n-      0,\r\n-      this.billData.coveragePercentage,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.efficiency = new CountUp(\r\n-      \"efficiency-value\",\r\n-      0,\r\n-      21.5,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // Environmental Impact\r\n-    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007;\r\n-    this.countUps.co2Offset = new CountUp(\r\n-      \"co2-offset-value\",\r\n-      0,\r\n-      co2Offset,\r\n-      1,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.trees = new CountUp(\r\n-      \"trees-value\",\r\n-      0,\r\n-      Math.round(co2Offset * 40),\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-\r\n-    // System Details\r\n-    this.countUps.panels = new CountUp(\r\n-      \"panels-value\",\r\n-      0,\r\n-      this.billData.numberOfPanels,\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-    this.countUps.roofArea = new CountUp(\r\n-      \"roof-area-value\",\r\n-      0,\r\n-      this.billData.numberOfPanels * 17.5,\r\n-      0,\r\n-      countUpOptions\r\n-    );\r\n-  }\r\n-\r\n   initializeProgressBars() {\r\n     // System Size Progress Bar\r\n     this.progressBars.systemSize = new ProgressBar.Line(\r\n       \"#system-size-progress\",\r\n@@ -732,39 +607,79 @@\n     };\r\n     return seasonalFactors[month];\r\n   }\r\n \r\n-  startAnimations() {\r\n-    // Start all CountUp animations\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp && !countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n+  initializeAnimations() {\r\n+    // Fade in sections\r\n+    gsap.fromTo(\r\n+        '.bg-white',\r\n+        { \r\n+            opacity: 0, \r\n+            y: 20 \r\n+        },\r\n+        { \r\n+            opacity: 1, \r\n+            y: 0, \r\n+            duration: 0.6,\r\n+            stagger: 0.1,\r\n+            ease: \"power2.out\"\r\n+        }\r\n+    );\r\n \r\n     // Animate progress bars\r\n-    if (this.progressBars.systemSize) {\r\n-      this.progressBars.systemSize.animate(0.75); // Example progress value\r\n-    }\r\n-\r\n-    // Add entrance animations with GSAP\r\n-    const cards = document.querySelectorAll(\".rounded-2xl\");\r\n-    gsap.fromTo(\r\n-      cards,\r\n-      {\r\n-        y: 20,\r\n-        opacity: 0,\r\n-      },\r\n-      {\r\n-        y: 0,\r\n-        opacity: 1,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n+    gsap.to('#co2-progress', {\r\n+        width: '75%',\r\n+        duration: 1.5,\r\n         ease: \"power2.out\",\r\n-      }\r\n-    );\r\n-  }\r\n+        delay: 0.5\r\n+    });\r\n \r\n+    // Number counting animations\r\n+    this.initializeCounters();\r\n+}\r\n+\r\n+initializeCounters() {\r\n+    const counters = [\r\n+        {\r\n+            id: 'system-size-value',\r\n+            value: this.billData.recommendedSystemSize,\r\n+            decimals: 2\r\n+        },\r\n+        {\r\n+            id: 'total-cost-value',\r\n+            value: this.billData.estimatedSystemCost,\r\n+            prefix: 'PKR ',\r\n+            separator: ','\r\n+        },\r\n+        {\r\n+            id: 'payback-period-value',\r\n+            value: this.billData.estimatedPaybackPeriod,\r\n+            decimals: 1\r\n+        }\r\n+    ];\r\n+\r\n+    counters.forEach(counter => {\r\n+        const element = document.getElementById(counter.id);\r\n+        if (!element) return;\r\n+\r\n+        const options = {\r\n+            startVal: 0,\r\n+            duration: 2,\r\n+            useEasing: true,\r\n+            useGrouping: true,\r\n+            separator: counter.separator || '',\r\n+            decimal: '.',\r\n+            prefix: counter.prefix || '',\r\n+            decimals: counter.decimals || 0\r\n+        };\r\n+\r\n+        const countUp = new CountUp(counter.id, counter.value, options);\r\n+        if (!countUp.error) {\r\n+            countUp.start();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n   cleanup() {\r\n     // Cleanup charts\r\n     Object.values(this.charts).forEach((chart) => {\r\n       if (chart) chart.destroy();\r\n"
                },
                {
                    "date": 1731674129101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -678,24 +678,28 @@\n         }\r\n     });\r\n }\r\n \r\n-  cleanup() {\r\n-    // Cleanup charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n+cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach(chart => {\r\n+        if (chart) chart.destroy();\r\n     });\r\n     this.charts = {};\r\n \r\n-    // Cleanup progress bars\r\n-    Object.values(this.progressBars).forEach((progressBar) => {\r\n-      if (progressBar) progressBar.destroy();\r\n-    });\r\n-    this.progressBars = {};\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n \r\n-    // Reset CountUps\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp) countUp.reset();\r\n-    });\r\n-    this.countUps = {};\r\n-  }\r\n+    // Remove any event listeners if needed\r\n+    window.removeEventListener('resize', this.handleResize);\r\n }\r\n+\r\n+handleResize = () => {\r\n+    // Debounced resize handler for chart responsiveness\r\n+    clearTimeout(this.resizeTimeout);\r\n+    this.resizeTimeout = setTimeout(() => {\r\n+        Object.values(this.charts).forEach(chart => {\r\n+            if (chart) chart.resize();\r\n+        });\r\n+    }, 250);\r\n+};\r\n+}\r\n"
                },
                {
                    "date": 1731674138361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,10 +335,8 @@\n     this.initializeCharts();\r\n     this.startAnimations();\r\n   }\r\n \r\n- \r\n-\r\n   initializeProgressBars() {\r\n     // System Size Progress Bar\r\n     this.progressBars.systemSize = new ProgressBar.Line(\r\n       \"#system-size-progress\",\r\n@@ -610,96 +608,88 @@\n \r\n   initializeAnimations() {\r\n     // Fade in sections\r\n     gsap.fromTo(\r\n-        '.bg-white',\r\n-        { \r\n-            opacity: 0, \r\n-            y: 20 \r\n-        },\r\n-        { \r\n-            opacity: 1, \r\n-            y: 0, \r\n-            duration: 0.6,\r\n-            stagger: 0.1,\r\n-            ease: \"power2.out\"\r\n-        }\r\n+      \".bg-white\",\r\n+      {\r\n+        opacity: 0,\r\n+        y: 20,\r\n+      },\r\n+      {\r\n+        opacity: 1,\r\n+        y: 0,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+      }\r\n     );\r\n \r\n     // Animate progress bars\r\n-    gsap.to('#co2-progress', {\r\n-        width: '75%',\r\n-        duration: 1.5,\r\n-        ease: \"power2.out\",\r\n-        delay: 0.5\r\n+    gsap.to(\"#co2-progress\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      ease: \"power2.out\",\r\n+      delay: 0.5,\r\n     });\r\n \r\n     // Number counting animations\r\n     this.initializeCounters();\r\n-}\r\n+  }\r\n \r\n-initializeCounters() {\r\n+  initializeCounters() {\r\n     const counters = [\r\n-        {\r\n-            id: 'system-size-value',\r\n-            value: this.billData.recommendedSystemSize,\r\n-            decimals: 2\r\n-        },\r\n-        {\r\n-            id: 'total-cost-value',\r\n-            value: this.billData.estimatedSystemCost,\r\n-            prefix: 'PKR ',\r\n-            separator: ','\r\n-        },\r\n-        {\r\n-            id: 'payback-period-value',\r\n-            value: this.billData.estimatedPaybackPeriod,\r\n-            decimals: 1\r\n-        }\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n     ];\r\n \r\n-    counters.forEach(counter => {\r\n-        const element = document.getElementById(counter.id);\r\n-        if (!element) return;\r\n+    counters.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n \r\n-        const options = {\r\n-            startVal: 0,\r\n-            duration: 2,\r\n-            useEasing: true,\r\n-            useGrouping: true,\r\n-            separator: counter.separator || '',\r\n-            decimal: '.',\r\n-            prefix: counter.prefix || '',\r\n-            decimals: counter.decimals || 0\r\n-        };\r\n+      const options = {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      };\r\n \r\n-        const countUp = new CountUp(counter.id, counter.value, options);\r\n-        if (!countUp.error) {\r\n-            countUp.start();\r\n-        }\r\n+      const countUp = new CountUp(counter.id, counter.value, options);\r\n+      if (!countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n     });\r\n-}\r\n+  }\r\n \r\n-cleanup() {\r\n+  cleanup() {\r\n     // Destroy all charts\r\n-    Object.values(this.charts).forEach(chart => {\r\n-        if (chart) chart.destroy();\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n     });\r\n     this.charts = {};\r\n \r\n     // Kill all GSAP animations\r\n     gsap.killTweensOf(\"*\");\r\n \r\n     // Remove any event listeners if needed\r\n-    window.removeEventListener('resize', this.handleResize);\r\n-}\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n+  }\r\n \r\n-handleResize = () => {\r\n-    // Debounced resize handler for chart responsiveness\r\n-    clearTimeout(this.resizeTimeout);\r\n-    this.resizeTimeout = setTimeout(() => {\r\n-        Object.values(this.charts).forEach(chart => {\r\n-            if (chart) chart.resize();\r\n-        });\r\n-    }, 250);\r\n-};\r\n+\r\n }\r\n"
                },
                {
                    "date": 1731674147218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -690,6 +690,14 @@\n     // Remove any event listeners if needed\r\n     window.removeEventListener(\"resize\", this.handleResize);\r\n   }\r\n \r\n-\r\n+  handleResize = () => {\r\n+    // Debounced resize handler for chart responsiveness\r\n+    clearTimeout(this.resizeTimeout);\r\n+    this.resizeTimeout = setTimeout(() => {\r\n+        Object.values(this.charts).forEach(chart => {\r\n+            if (chart) chart.resize();\r\n+        });\r\n+    }, 250);\r\n+};\r\n }\r\n"
                },
                {
                    "date": 1731674164946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,710 @@\n+import { gsap } from \"gsap\";\r\n+import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n+import Chart from \"chart.js/auto\";\r\n+import { CountUp } from \"countup.js\";\r\n+import ProgressBar from \"progressbar.js\";\r\n+\r\n+export class QuoteResultPage {\r\n+  constructor() {\r\n+    this.charts = {};\r\n+    this.resizeTimeout = null;\r\n+    this.billData = getBillData();\r\n+\r\n+    // Bind methods\r\n+    this.handleResize = this.handleResize.bind(this);\r\n+  }\r\n+\r\n+  mount() {\r\n+    this.render();\r\n+    this.initializeCharts();\r\n+    this.initializeAnimations();\r\n+    window.addEventListener(\"resize\", this.handleResize);\r\n+  }\r\n+\r\n+  unmount() {\r\n+    this.cleanup();\r\n+  }\r\n+\r\n+  render() {\r\n+    const app = document.getElementById(\"app\");\r\n+    app.innerHTML = `\r\n+            <div class=\"min-h-screen bg-gray-50\">\r\n+                <!-- Header Section -->\r\n+                <header class=\"bg-white shadow-sm\">\r\n+                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n+                        <div class=\"flex items-center justify-between\">\r\n+                            <div>\r\n+                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n+                            </div>\r\n+                            <button \r\n+                                onclick=\"window.router.push('/bill-review')\"\r\n+                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n+                            >\r\n+                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n+                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n+                                </svg>\r\n+                                Back to Analysis\r\n+                            </button>\r\n+                        </div>\r\n+                    </div>\r\n+                </header>\r\n+    \r\n+                <!-- Main Content -->\r\n+                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n+                    <!-- Key Metrics Grid -->\r\n+                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n+                        ${this.renderKeyMetrics()}\r\n+                    </div>\r\n+    \r\n+                    <!-- Charts Grid -->\r\n+                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n+                        ${this.renderChartSections()}\r\n+                    </div>\r\n+    \r\n+                    <!-- Additional Details -->\r\n+                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n+                        ${this.renderDetailsSections()}\r\n+                    </div>\r\n+                </main>\r\n+            </div>\r\n+        `;\r\n+\r\n+    // Initialize components after DOM is ready\r\n+    requestAnimationFrame(() => {\r\n+      this.initializeComponents();\r\n+    });\r\n+  }\r\n+\r\n+  renderDetailsSections() {\r\n+    return `\r\n+        <!-- System Specifications -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n+            <div class=\"grid grid-cols-2 gap-4\">\r\n+                ${this.renderSpecificationDetails()}\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Environmental Impact -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n+            <div class=\"space-y-6\">\r\n+                ${this.renderEnvironmentalImpact()}\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderSpecificationDetails() {\r\n+    const specs = [\r\n+      {\r\n+        label: \"Number of Panels\",\r\n+        value: this.billData.numberOfPanels,\r\n+        unit: \"panels\",\r\n+        icon: \"solar_power\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Wattage\",\r\n+        value: this.billData.panelWattage,\r\n+        unit: \"W\",\r\n+        icon: \"bolt\",\r\n+      },\r\n+      {\r\n+        label: \"Required Roof Area\",\r\n+        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n+        unit: \"sq ft\",\r\n+        icon: \"home\",\r\n+      },\r\n+      {\r\n+        label: \"Annual Production\",\r\n+        value: Math.round(this.billData.estimatedAnnualProduction),\r\n+        unit: \"kWh\",\r\n+        icon: \"power\",\r\n+      },\r\n+    ];\r\n+\r\n+    return specs\r\n+      .map(\r\n+        (spec) => `\r\n+        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n+            <div class=\"flex-shrink-0\">\r\n+                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n+                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n+                </span>\r\n+            </div>\r\n+            <div class=\"ml-4\">\r\n+                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n+                <p class=\"mt-1 text-sm text-gray-500\">\r\n+                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n+          spec.unit\r\n+        }\r\n+                </p>\r\n+            </div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderEnvironmentalImpact() {\r\n+    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007; // tons of CO2 per kWh\r\n+    const treesEquivalent = Math.round(co2Offset * 40); // Each tree absorbs ~0.025 tons CO2 per year\r\n+    const gasoline = Math.round(co2Offset * 113); // gallons of gasoline equivalent\r\n+\r\n+    return `\r\n+        <div class=\"relative pt-1\">\r\n+            <div class=\"flex mb-2 items-center justify-between\">\r\n+                <div>\r\n+                    <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200\">\r\n+                        CO₂ Offset\r\n+                    </span>\r\n+                </div>\r\n+                <div class=\"text-right\">\r\n+                    <span class=\"text-xs font-semibold inline-block text-green-600\">\r\n+                        ${co2Offset.toFixed(1)} tons/year\r\n+                    </span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"overflow-hidden h-2 text-xs flex rounded bg-green-200\">\r\n+                <div id=\"co2-progress\" \r\n+                     class=\"w-0 transition-all duration-1000 shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500\">\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <div class=\"grid grid-cols-2 gap-4 mt-6\">\r\n+            <div class=\"bg-green-50 rounded-lg p-4\">\r\n+                <div class=\"flex items-center\">\r\n+                    <span class=\"text-2xl mr-3\">🌳</span>\r\n+                    <div>\r\n+                        <p class=\"text-sm text-gray-600\">Equivalent to</p>\r\n+                        <p class=\"text-lg font-semibold text-gray-900\">${treesEquivalent.toLocaleString()} trees planted</p>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+\r\n+            <div class=\"bg-blue-50 rounded-lg p-4\">\r\n+                <div class=\"flex items-center\">\r\n+                    <span class=\"text-2xl mr-3\">⛽</span>\r\n+                    <div>\r\n+                        <p class=\"text-sm text-gray-600\">Equal to removing</p>\r\n+                        <p class=\"text-lg font-semibold text-gray-900\">${gasoline.toLocaleString()} gallons of gasoline</p>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderChartSections() {\r\n+    return `\r\n+        <!-- Energy Production Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"production-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Cost Savings Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"savings-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderKeyMetrics() {\r\n+    const metrics = [\r\n+      {\r\n+        title: \"Recommended System Size\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        unit: \"kW\",\r\n+        icon: \"⚡\",\r\n+        color: \"blue\",\r\n+        id: \"system-size\",\r\n+      },\r\n+      {\r\n+        title: \"Total Investment\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR\",\r\n+        icon: \"💰\",\r\n+        color: \"green\",\r\n+        id: \"total-cost\",\r\n+      },\r\n+      {\r\n+        title: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        color: \"purple\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return metrics\r\n+      .map(\r\n+        (metric) => `\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n+            <div class=\"flex justify-between items-start\">\r\n+                <div>\r\n+                    <p class=\"text-sm font-medium text-gray-500\">${\r\n+                      metric.title\r\n+                    }</p>\r\n+                    <div class=\"mt-1 flex items-baseline\">\r\n+                        ${\r\n+                          metric.prefix\r\n+                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n+                          metric.id\r\n+                        }-value\">0</span>\r\n+                        ${\r\n+                          metric.unit\r\n+                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n+                    <span class=\"text-xl\">${metric.icon}</span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderStatCards() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-yellow-50\",\r\n+        icon: \"⚡️\",\r\n+        id: \"daily-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Production\",\r\n+        value: this.billData.estimatedMonthlyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-blue-50\",\r\n+        icon: \"📊\",\r\n+        id: \"monthly-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Coverage\",\r\n+        value: this.billData.coveragePercentage,\r\n+        unit: \"%\",\r\n+        bg: \"bg-green-50\",\r\n+        icon: \"🎯\",\r\n+        id: \"coverage-value\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Efficiency\",\r\n+        value: \"21.5\",\r\n+        unit: \"%\",\r\n+        bg: \"bg-purple-50\",\r\n+        icon: \"⚙️\",\r\n+        id: \"efficiency-value\",\r\n+      },\r\n+    ];\r\n+\r\n+    return stats\r\n+      .map(\r\n+        (stat) => `\r\n+            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n+                <div class=\"flex items-center justify-between mb-2\">\r\n+                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n+                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n+                        ${stat.icon}\r\n+                    </span>\r\n+                </div>\r\n+                <p class=\"text-xl font-bold text-gray-900\">\r\n+                    <span id=\"${stat.id}\">0</span>\r\n+                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n+                </p>\r\n+            </div>\r\n+        `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+  initializeComponents() {\r\n+    this.initializeCountUps();\r\n+    this.initializeProgressBars();\r\n+    this.initializeCharts();\r\n+    this.startAnimations();\r\n+  }\r\n+\r\n+  initializeProgressBars() {\r\n+    // System Size Progress Bar\r\n+    this.progressBars.systemSize = new ProgressBar.Line(\r\n+      \"#system-size-progress\",\r\n+      {\r\n+        color: \"#3B82F6\",\r\n+        trailColor: \"#E5E7EB\",\r\n+        trailWidth: 8,\r\n+        strokeWidth: 8,\r\n+        duration: 2000,\r\n+        easing: \"easeInOut\",\r\n+        from: { color: \"#93C5FD\" },\r\n+        to: { color: \"#3B82F6\" },\r\n+        step: (state, bar) => {\r\n+          bar.path.setAttribute(\"stroke\", state.color);\r\n+        },\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  initializeCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const years = 25; // Standard solar panel warranty period\r\n+    const yearlyLabels = Array.from(\r\n+      { length: years + 1 },\r\n+      (_, i) => `Year ${i}`\r\n+    );\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n+\r\n+    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n+      Math.round(yearlySavings * index)\r\n+    );\r\n+\r\n+    const investmentLine = yearlyLabels.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: yearlyLabels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"rgb(16, 185, 129)\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+            tension: 0,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                return `${\r\n+                  context.dataset.label\r\n+                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: function (value) {\r\n+                return \"PKR \" + value.toLocaleString();\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    // Generate monthly data\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    // Create chart with proper configuration\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"rgb(59, 130, 246)\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+            labels: {\r\n+              usePointStyle: true,\r\n+              padding: 20,\r\n+            },\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            displayColors: true,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                const label = context.dataset.label || \"\";\r\n+                const value = context.parsed.y || 0;\r\n+                return `${label}: ${value.toLocaleString()} kWh`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+              callback: function (value) {\r\n+                return value.toLocaleString() + \" kWh\";\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const seasonalFactors = {\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n+    };\r\n+\r\n+    const monthlyProduction = months.map((month, index) => {\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n+\r\n+      // Base production from system size\r\n+      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n+      return Math.round(baseProduction * factor);\r\n+    });\r\n+\r\n+    const monthlyConsumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+      labels: months,\r\n+      production: monthlyProduction,\r\n+      consumption: monthlyConsumption,\r\n+    };\r\n+  }\r\n+\r\n+  getSeasonalFactor(month) {\r\n+    const seasonalFactors = {\r\n+      Dec: 0.7,\r\n+      Jan: 0.7,\r\n+      Feb: 0.8,\r\n+      Mar: 0.9,\r\n+      Apr: 1.0,\r\n+      May: 1.1,\r\n+      Jun: 1.2,\r\n+      Jul: 1.2,\r\n+      Aug: 1.1,\r\n+      Sep: 1.0,\r\n+      Oct: 0.9,\r\n+      Nov: 0.8,\r\n+    };\r\n+    return seasonalFactors[month];\r\n+  }\r\n+\r\n+  initializeAnimations() {\r\n+    // Fade in sections\r\n+    gsap.fromTo(\r\n+      \".bg-white\",\r\n+      {\r\n+        opacity: 0,\r\n+        y: 20,\r\n+      },\r\n+      {\r\n+        opacity: 1,\r\n+        y: 0,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+      }\r\n+    );\r\n+\r\n+    // Animate progress bars\r\n+    gsap.to(\"#co2-progress\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      ease: \"power2.out\",\r\n+      delay: 0.5,\r\n+    });\r\n+\r\n+    // Number counting animations\r\n+    this.initializeCounters();\r\n+  }\r\n+\r\n+  initializeCounters() {\r\n+    const counters = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n+    ];\r\n+\r\n+    counters.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n+\r\n+      const options = {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      };\r\n+\r\n+      const countUp = new CountUp(counter.id, counter.value, options);\r\n+      if (!countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    this.charts = {};\r\n+\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n+\r\n+    // Remove any event listeners if needed\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n+  }\r\n+\r\n+  handleResize = () => {\r\n+    // Debounced resize handler for chart responsiveness\r\n+    clearTimeout(this.resizeTimeout);\r\n+    this.resizeTimeout = setTimeout(() => {\r\n+      Object.values(this.charts).forEach((chart) => {\r\n+        if (chart) chart.resize();\r\n+      });\r\n+    }, 250);\r\n+  };\r\n+}\r\n"
                },
                {
                    "date": 1731674197841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -707,707 +707,4 @@\n       });\r\n     }, 250);\r\n   };\r\n }\r\n-import { gsap } from \"gsap\";\r\n-import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n-import Chart from \"chart.js/auto\";\r\n-import { CountUp } from \"countup.js\";\r\n-import ProgressBar from \"progressbar.js\";\r\n-\r\n-export class QuoteResultPage {\r\n-  constructor() {\r\n-    try {\r\n-      this.billData = getBillData();\r\n-      this.error = getError();\r\n-    } catch (error) {\r\n-      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n-      this.error = \"Failed to load bill data. Please try again.\";\r\n-    }\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  render() {\r\n-    const app = document.getElementById(\"app\");\r\n-    app.innerHTML = `\r\n-            <div class=\"min-h-screen bg-gray-50\">\r\n-                <!-- Header Section -->\r\n-                <header class=\"bg-white shadow-sm\">\r\n-                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n-                        <div class=\"flex items-center justify-between\">\r\n-                            <div>\r\n-                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n-                            </div>\r\n-                            <button \r\n-                                onclick=\"window.router.push('/bill-review')\"\r\n-                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n-                            >\r\n-                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n-                                </svg>\r\n-                                Back to Analysis\r\n-                            </button>\r\n-                        </div>\r\n-                    </div>\r\n-                </header>\r\n-    \r\n-                <!-- Main Content -->\r\n-                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n-                    <!-- Key Metrics Grid -->\r\n-                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n-                        ${this.renderKeyMetrics()}\r\n-                    </div>\r\n-    \r\n-                    <!-- Charts Grid -->\r\n-                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n-                        ${this.renderChartSections()}\r\n-                    </div>\r\n-    \r\n-                    <!-- Additional Details -->\r\n-                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n-                        ${this.renderDetailsSections()}\r\n-                    </div>\r\n-                </main>\r\n-            </div>\r\n-        `;\r\n-\r\n-    // Initialize components after DOM is ready\r\n-    requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n-    });\r\n-  }\r\n-\r\n-  renderDetailsSections() {\r\n-    return `\r\n-        <!-- System Specifications -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n-            <div class=\"grid grid-cols-2 gap-4\">\r\n-                ${this.renderSpecificationDetails()}\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Environmental Impact -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n-            <div class=\"space-y-6\">\r\n-                ${this.renderEnvironmentalImpact()}\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderSpecificationDetails() {\r\n-    const specs = [\r\n-      {\r\n-        label: \"Number of Panels\",\r\n-        value: this.billData.numberOfPanels,\r\n-        unit: \"panels\",\r\n-        icon: \"solar_power\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Wattage\",\r\n-        value: this.billData.panelWattage,\r\n-        unit: \"W\",\r\n-        icon: \"bolt\",\r\n-      },\r\n-      {\r\n-        label: \"Required Roof Area\",\r\n-        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n-        unit: \"sq ft\",\r\n-        icon: \"home\",\r\n-      },\r\n-      {\r\n-        label: \"Annual Production\",\r\n-        value: Math.round(this.billData.estimatedAnnualProduction),\r\n-        unit: \"kWh\",\r\n-        icon: \"power\",\r\n-      },\r\n-    ];\r\n-\r\n-    return specs\r\n-      .map(\r\n-        (spec) => `\r\n-        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n-            <div class=\"flex-shrink-0\">\r\n-                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n-                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n-                </span>\r\n-            </div>\r\n-            <div class=\"ml-4\">\r\n-                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n-                <p class=\"mt-1 text-sm text-gray-500\">\r\n-                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n-          spec.unit\r\n-        }\r\n-                </p>\r\n-            </div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderEnvironmentalImpact() {\r\n-    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007; // tons of CO2 per kWh\r\n-    const treesEquivalent = Math.round(co2Offset * 40); // Each tree absorbs ~0.025 tons CO2 per year\r\n-    const gasoline = Math.round(co2Offset * 113); // gallons of gasoline equivalent\r\n-\r\n-    return `\r\n-        <div class=\"relative pt-1\">\r\n-            <div class=\"flex mb-2 items-center justify-between\">\r\n-                <div>\r\n-                    <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200\">\r\n-                        CO₂ Offset\r\n-                    </span>\r\n-                </div>\r\n-                <div class=\"text-right\">\r\n-                    <span class=\"text-xs font-semibold inline-block text-green-600\">\r\n-                        ${co2Offset.toFixed(1)} tons/year\r\n-                    </span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"overflow-hidden h-2 text-xs flex rounded bg-green-200\">\r\n-                <div id=\"co2-progress\" \r\n-                     class=\"w-0 transition-all duration-1000 shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500\">\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <div class=\"grid grid-cols-2 gap-4 mt-6\">\r\n-            <div class=\"bg-green-50 rounded-lg p-4\">\r\n-                <div class=\"flex items-center\">\r\n-                    <span class=\"text-2xl mr-3\">🌳</span>\r\n-                    <div>\r\n-                        <p class=\"text-sm text-gray-600\">Equivalent to</p>\r\n-                        <p class=\"text-lg font-semibold text-gray-900\">${treesEquivalent.toLocaleString()} trees planted</p>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-\r\n-            <div class=\"bg-blue-50 rounded-lg p-4\">\r\n-                <div class=\"flex items-center\">\r\n-                    <span class=\"text-2xl mr-3\">⛽</span>\r\n-                    <div>\r\n-                        <p class=\"text-sm text-gray-600\">Equal to removing</p>\r\n-                        <p class=\"text-lg font-semibold text-gray-900\">${gasoline.toLocaleString()} gallons of gasoline</p>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderChartSections() {\r\n-    return `\r\n-        <!-- Energy Production Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"production-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Cost Savings Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"savings-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderKeyMetrics() {\r\n-    const metrics = [\r\n-      {\r\n-        title: \"Recommended System Size\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        unit: \"kW\",\r\n-        icon: \"⚡\",\r\n-        color: \"blue\",\r\n-        id: \"system-size\",\r\n-      },\r\n-      {\r\n-        title: \"Total Investment\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR\",\r\n-        icon: \"💰\",\r\n-        color: \"green\",\r\n-        id: \"total-cost\",\r\n-      },\r\n-      {\r\n-        title: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        color: \"purple\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return metrics\r\n-      .map(\r\n-        (metric) => `\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n-            <div class=\"flex justify-between items-start\">\r\n-                <div>\r\n-                    <p class=\"text-sm font-medium text-gray-500\">${\r\n-                      metric.title\r\n-                    }</p>\r\n-                    <div class=\"mt-1 flex items-baseline\">\r\n-                        ${\r\n-                          metric.prefix\r\n-                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n-                          metric.id\r\n-                        }-value\">0</span>\r\n-                        ${\r\n-                          metric.unit\r\n-                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n-                    <span class=\"text-xl\">${metric.icon}</span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderStatCards() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-yellow-50\",\r\n-        icon: \"⚡️\",\r\n-        id: \"daily-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Production\",\r\n-        value: this.billData.estimatedMonthlyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-blue-50\",\r\n-        icon: \"📊\",\r\n-        id: \"monthly-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Coverage\",\r\n-        value: this.billData.coveragePercentage,\r\n-        unit: \"%\",\r\n-        bg: \"bg-green-50\",\r\n-        icon: \"🎯\",\r\n-        id: \"coverage-value\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Efficiency\",\r\n-        value: \"21.5\",\r\n-        unit: \"%\",\r\n-        bg: \"bg-purple-50\",\r\n-        icon: \"⚙️\",\r\n-        id: \"efficiency-value\",\r\n-      },\r\n-    ];\r\n-\r\n-    return stats\r\n-      .map(\r\n-        (stat) => `\r\n-            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n-                <div class=\"flex items-center justify-between mb-2\">\r\n-                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n-                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n-                        ${stat.icon}\r\n-                    </span>\r\n-                </div>\r\n-                <p class=\"text-xl font-bold text-gray-900\">\r\n-                    <span id=\"${stat.id}\">0</span>\r\n-                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n-                </p>\r\n-            </div>\r\n-        `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-  initializeComponents() {\r\n-    this.initializeCountUps();\r\n-    this.initializeProgressBars();\r\n-    this.initializeCharts();\r\n-    this.startAnimations();\r\n-  }\r\n-\r\n-  initializeProgressBars() {\r\n-    // System Size Progress Bar\r\n-    this.progressBars.systemSize = new ProgressBar.Line(\r\n-      \"#system-size-progress\",\r\n-      {\r\n-        color: \"#3B82F6\",\r\n-        trailColor: \"#E5E7EB\",\r\n-        trailWidth: 8,\r\n-        strokeWidth: 8,\r\n-        duration: 2000,\r\n-        easing: \"easeInOut\",\r\n-        from: { color: \"#93C5FD\" },\r\n-        to: { color: \"#3B82F6\" },\r\n-        step: (state, bar) => {\r\n-          bar.path.setAttribute(\"stroke\", state.color);\r\n-        },\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  initializeCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initSavingsChart() {\r\n-    const ctx = document.getElementById(\"savings-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const years = 25; // Standard solar panel warranty period\r\n-    const yearlyLabels = Array.from(\r\n-      { length: years + 1 },\r\n-      (_, i) => `Year ${i}`\r\n-    );\r\n-    const systemCost = this.billData.estimatedSystemCost;\r\n-    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n-\r\n-    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n-      Math.round(yearlySavings * index)\r\n-    );\r\n-\r\n-    const investmentLine = yearlyLabels.map(() => systemCost);\r\n-\r\n-    this.charts.savings = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: yearlyLabels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Cumulative Savings\",\r\n-            data: cumulativeSavings,\r\n-            borderColor: \"rgb(16, 185, 129)\",\r\n-            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Initial Investment\",\r\n-            data: investmentLine,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            borderDash: [5, 5],\r\n-            fill: false,\r\n-            tension: 0,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                return `${\r\n-                  context.dataset.label\r\n-                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            ticks: {\r\n-              callback: function (value) {\r\n-                return \"PKR \" + value.toLocaleString();\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    // Generate monthly data\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n-\r\n-    // Create chart with proper configuration\r\n-    this.charts.production = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: monthlyData.labels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"rgb(59, 130, 246)\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-          {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-            labels: {\r\n-              usePointStyle: true,\r\n-              padding: 20,\r\n-            },\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            displayColors: true,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                const label = context.dataset.label || \"\";\r\n-                const value = context.parsed.y || 0;\r\n-                return `${label}: ${value.toLocaleString()} kWh`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: {\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-              callback: function (value) {\r\n-                return value.toLocaleString() + \" kWh\";\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  generateMonthlyProductionData() {\r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const seasonalFactors = {\r\n-      winter: 0.7,\r\n-      spring: 0.9,\r\n-      summer: 1.2,\r\n-      fall: 0.8,\r\n-    };\r\n-\r\n-    const monthlyProduction = months.map((month, index) => {\r\n-      let factor;\r\n-      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-      else if (index < 5) factor = seasonalFactors.spring;\r\n-      else if (index < 8) factor = seasonalFactors.summer;\r\n-      else factor = seasonalFactors.fall;\r\n-\r\n-      // Base production from system size\r\n-      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n-      return Math.round(baseProduction * factor);\r\n-    });\r\n-\r\n-    const monthlyConsumption = months.map(() =>\r\n-      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-      labels: months,\r\n-      production: monthlyProduction,\r\n-      consumption: monthlyConsumption,\r\n-    };\r\n-  }\r\n-\r\n-  getSeasonalFactor(month) {\r\n-    const seasonalFactors = {\r\n-      Dec: 0.7,\r\n-      Jan: 0.7,\r\n-      Feb: 0.8,\r\n-      Mar: 0.9,\r\n-      Apr: 1.0,\r\n-      May: 1.1,\r\n-      Jun: 1.2,\r\n-      Jul: 1.2,\r\n-      Aug: 1.1,\r\n-      Sep: 1.0,\r\n-      Oct: 0.9,\r\n-      Nov: 0.8,\r\n-    };\r\n-    return seasonalFactors[month];\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    // Fade in sections\r\n-    gsap.fromTo(\r\n-      \".bg-white\",\r\n-      {\r\n-        opacity: 0,\r\n-        y: 20,\r\n-      },\r\n-      {\r\n-        opacity: 1,\r\n-        y: 0,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n-        ease: \"power2.out\",\r\n-      }\r\n-    );\r\n-\r\n-    // Animate progress bars\r\n-    gsap.to(\"#co2-progress\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      ease: \"power2.out\",\r\n-      delay: 0.5,\r\n-    });\r\n-\r\n-    // Number counting animations\r\n-    this.initializeCounters();\r\n-  }\r\n-\r\n-  initializeCounters() {\r\n-    const counters = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counters.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      const options = {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      };\r\n-\r\n-      const countUp = new CountUp(counter.id, counter.value, options);\r\n-      if (!countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-    this.charts = {};\r\n-\r\n-    // Kill all GSAP animations\r\n-    gsap.killTweensOf(\"*\");\r\n-\r\n-    // Remove any event listeners if needed\r\n-    window.removeEventListener(\"resize\", this.handleResize);\r\n-  }\r\n-\r\n-  handleResize = () => {\r\n-    // Debounced resize handler for chart responsiveness\r\n-    clearTimeout(this.resizeTimeout);\r\n-    this.resizeTimeout = setTimeout(() => {\r\n-        Object.values(this.charts).forEach(chart => {\r\n-            if (chart) chart.resize();\r\n-        });\r\n-    }, 250);\r\n-};\r\n-}\r\n"
                },
                {
                    "date": 1731674370345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,819 @@\n+import { gsap } from \"gsap\";\r\n+import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n+import Chart from \"chart.js/auto\";\r\n+import { CountUp } from \"countup.js\";\r\n+import ProgressBar from \"progressbar.js\";\r\n+\r\n+// QuoteResultPage.js\r\n+export class QuoteResultPage {\r\n+    constructor() {\r\n+        try {\r\n+            this.billData = getBillData();\r\n+            this.error = getError();\r\n+        } catch (error) {\r\n+            console.error(\"Error in QuoteResultPage constructor:\", error);\r\n+            this.error = \"Failed to load bill data. Please try again.\";\r\n+        }\r\n+        this.charts = {};\r\n+        this.progressBars = {};\r\n+        this.countUps = {};\r\n+    }\r\n+\r\n+    render() {\r\n+        const app = document.getElementById(\"app\");\r\n+        app.innerHTML = `\r\n+            <div class=\"min-h-screen bg-gray-50\">\r\n+                <!-- Header Section -->\r\n+                <header class=\"bg-white shadow-sm\">\r\n+                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n+                        <div class=\"flex items-center justify-between\">\r\n+                            <div>\r\n+                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n+                            </div>\r\n+                            <button \r\n+                                onclick=\"window.router.push('/bill-review')\"\r\n+                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n+                            >\r\n+                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n+                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n+                                </svg>\r\n+                                Back to Analysis\r\n+                            </button>\r\n+                        </div>\r\n+                    </div>\r\n+                </header>\r\n+\r\n+                <!-- Main Content -->\r\n+                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n+                    <!-- Key Metrics Grid -->\r\n+                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n+                        ${this.renderKeyMetrics()}\r\n+                    </div>\r\n+\r\n+                    <!-- Charts Grid -->\r\n+                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n+                        ${this.renderChartSections()}\r\n+                    </div>\r\n+\r\n+                    <!-- Additional Details -->\r\n+                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n+                        ${this.renderDetailsSections()}\r\n+                    </div>\r\n+                </main>\r\n+            </div>\r\n+        `;\r\n+\r\n+        // Initialize components after DOM is ready\r\n+        requestAnimationFrame(() => {\r\n+            this.initializeComponents();\r\n+        });\r\n+    }\r\n+\r\n+    initializeComponents() {\r\n+        this.initCharts();\r\n+        this.initCounters();\r\n+        this.initProgressBars();\r\n+        this.startAnimations();\r\n+    }\r\n+\r\n+    initCharts() {\r\n+        this.initProductionChart();\r\n+        this.initSavingsChart();\r\n+    }\r\n+\r\n+    initCounters() {\r\n+        const counterData = [\r\n+            {\r\n+                id: 'system-size-value',\r\n+                value: this.billData.recommendedSystemSize,\r\n+                decimals: 2\r\n+            },\r\n+            {\r\n+                id: 'total-cost-value',\r\n+                value: this.billData.estimatedSystemCost,\r\n+                prefix: 'PKR ',\r\n+                separator: ','\r\n+            },\r\n+            {\r\n+                id: 'payback-period-value',\r\n+                value: this.billData.estimatedPaybackPeriod,\r\n+                decimals: 1\r\n+            }\r\n+        ];\r\n+\r\n+        counterData.forEach(counter => {\r\n+            const element = document.getElementById(counter.id);\r\n+            if (!element) return;\r\n+\r\n+            this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n+                startVal: 0,\r\n+                duration: 2,\r\n+                useEasing: true,\r\n+                useGrouping: true,\r\n+                separator: counter.separator || '',\r\n+                decimal: '.',\r\n+                prefix: counter.prefix || '',\r\n+                decimals: counter.decimals || 0\r\n+            });\r\n+\r\n+            if (!this.countUps[counter.id].error) {\r\n+                this.countUps[counter.id].start();\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    initProgressBars() {\r\n+        const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n+        progressBarElements.forEach(element => {\r\n+            if (!element) return;\r\n+            \r\n+            this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n+                strokeWidth: 4,\r\n+                easing: 'easeInOut',\r\n+                duration: 1400,\r\n+                color: '#3b82f6',\r\n+                trailColor: '#e5e7eb',\r\n+                trailWidth: 4,\r\n+                svgStyle: {width: '100%', height: '100%'}\r\n+            });\r\n+            \r\n+            this.progressBars[element.id].animate(0.75);\r\n+        });\r\n+    }\r\n+\r\n+    startAnimations() {\r\n+        gsap.fromTo(\r\n+            '.bg-white',\r\n+            { \r\n+                opacity: 0, \r\n+                y: 20 \r\n+            },\r\n+            { \r\n+                opacity: 1, \r\n+                y: 0, \r\n+                duration: 0.6,\r\n+                stagger: 0.1,\r\n+                ease: \"power2.out\"\r\n+            }\r\n+        );\r\n+    }\r\n+\r\n+    cleanup() {\r\n+        // Destroy all charts\r\n+        Object.values(this.charts).forEach(chart => {\r\n+            if (chart) chart.destroy();\r\n+        });\r\n+        \r\n+        // Destroy all progress bars\r\n+        Object.values(this.progressBars).forEach(progressBar => {\r\n+            if (progressBar) progressBar.destroy();\r\n+        });\r\n+        \r\n+        // Reset all counters\r\n+        Object.values(this.countUps).forEach(countUp => {\r\n+            if (countUp) countUp.reset();\r\n+        });\r\n+\r\n+        // Kill all GSAP animations\r\n+        gsap.killTweensOf(\"*\");\r\n+        \r\n+        // Clear all objects\r\n+        this.charts = {};\r\n+        this.progressBars = {};\r\n+        this.countUps = {};\r\n+    }\r\n+\r\n+\r\n+  renderDetailsSections() {\r\n+    return `\r\n+        <!-- System Specifications -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n+            <div class=\"grid grid-cols-2 gap-4\">\r\n+                ${this.renderSpecificationDetails()}\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Environmental Impact -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n+            <div class=\"space-y-6\">\r\n+                ${this.renderEnvironmentalImpact()}\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderSpecificationDetails() {\r\n+    const specs = [\r\n+      {\r\n+        label: \"Number of Panels\",\r\n+        value: this.billData.numberOfPanels,\r\n+        unit: \"panels\",\r\n+        icon: \"solar_power\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Wattage\",\r\n+        value: this.billData.panelWattage,\r\n+        unit: \"W\",\r\n+        icon: \"bolt\",\r\n+      },\r\n+      {\r\n+        label: \"Required Roof Area\",\r\n+        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n+        unit: \"sq ft\",\r\n+        icon: \"home\",\r\n+      },\r\n+      {\r\n+        label: \"Annual Production\",\r\n+        value: Math.round(this.billData.estimatedAnnualProduction),\r\n+        unit: \"kWh\",\r\n+        icon: \"power\",\r\n+      },\r\n+    ];\r\n+\r\n+    return specs\r\n+      .map(\r\n+        (spec) => `\r\n+        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n+            <div class=\"flex-shrink-0\">\r\n+                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n+                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n+                </span>\r\n+            </div>\r\n+            <div class=\"ml-4\">\r\n+                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n+                <p class=\"mt-1 text-sm text-gray-500\">\r\n+                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n+          spec.unit\r\n+        }\r\n+                </p>\r\n+            </div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderEnvironmentalImpact() {\r\n+    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007; // tons of CO2 per kWh\r\n+    const treesEquivalent = Math.round(co2Offset * 40); // Each tree absorbs ~0.025 tons CO2 per year\r\n+    const gasoline = Math.round(co2Offset * 113); // gallons of gasoline equivalent\r\n+\r\n+    return `\r\n+        <div class=\"relative pt-1\">\r\n+            <div class=\"flex mb-2 items-center justify-between\">\r\n+                <div>\r\n+                    <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200\">\r\n+                        CO₂ Offset\r\n+                    </span>\r\n+                </div>\r\n+                <div class=\"text-right\">\r\n+                    <span class=\"text-xs font-semibold inline-block text-green-600\">\r\n+                        ${co2Offset.toFixed(1)} tons/year\r\n+                    </span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"overflow-hidden h-2 text-xs flex rounded bg-green-200\">\r\n+                <div id=\"co2-progress\" \r\n+                     class=\"w-0 transition-all duration-1000 shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500\">\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <div class=\"grid grid-cols-2 gap-4 mt-6\">\r\n+            <div class=\"bg-green-50 rounded-lg p-4\">\r\n+                <div class=\"flex items-center\">\r\n+                    <span class=\"text-2xl mr-3\">🌳</span>\r\n+                    <div>\r\n+                        <p class=\"text-sm text-gray-600\">Equivalent to</p>\r\n+                        <p class=\"text-lg font-semibold text-gray-900\">${treesEquivalent.toLocaleString()} trees planted</p>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+\r\n+            <div class=\"bg-blue-50 rounded-lg p-4\">\r\n+                <div class=\"flex items-center\">\r\n+                    <span class=\"text-2xl mr-3\">⛽</span>\r\n+                    <div>\r\n+                        <p class=\"text-sm text-gray-600\">Equal to removing</p>\r\n+                        <p class=\"text-lg font-semibold text-gray-900\">${gasoline.toLocaleString()} gallons of gasoline</p>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderChartSections() {\r\n+    return `\r\n+        <!-- Energy Production Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"production-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Cost Savings Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"savings-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderKeyMetrics() {\r\n+    const metrics = [\r\n+      {\r\n+        title: \"Recommended System Size\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        unit: \"kW\",\r\n+        icon: \"⚡\",\r\n+        color: \"blue\",\r\n+        id: \"system-size\",\r\n+      },\r\n+      {\r\n+        title: \"Total Investment\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR\",\r\n+        icon: \"💰\",\r\n+        color: \"green\",\r\n+        id: \"total-cost\",\r\n+      },\r\n+      {\r\n+        title: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        color: \"purple\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return metrics\r\n+      .map(\r\n+        (metric) => `\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n+            <div class=\"flex justify-between items-start\">\r\n+                <div>\r\n+                    <p class=\"text-sm font-medium text-gray-500\">${\r\n+                      metric.title\r\n+                    }</p>\r\n+                    <div class=\"mt-1 flex items-baseline\">\r\n+                        ${\r\n+                          metric.prefix\r\n+                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n+                          metric.id\r\n+                        }-value\">0</span>\r\n+                        ${\r\n+                          metric.unit\r\n+                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n+                    <span class=\"text-xl\">${metric.icon}</span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderStatCards() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-yellow-50\",\r\n+        icon: \"⚡️\",\r\n+        id: \"daily-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Production\",\r\n+        value: this.billData.estimatedMonthlyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-blue-50\",\r\n+        icon: \"📊\",\r\n+        id: \"monthly-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Coverage\",\r\n+        value: this.billData.coveragePercentage,\r\n+        unit: \"%\",\r\n+        bg: \"bg-green-50\",\r\n+        icon: \"🎯\",\r\n+        id: \"coverage-value\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Efficiency\",\r\n+        value: \"21.5\",\r\n+        unit: \"%\",\r\n+        bg: \"bg-purple-50\",\r\n+        icon: \"⚙️\",\r\n+        id: \"efficiency-value\",\r\n+      },\r\n+    ];\r\n+\r\n+    return stats\r\n+      .map(\r\n+        (stat) => `\r\n+            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n+                <div class=\"flex items-center justify-between mb-2\">\r\n+                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n+                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n+                        ${stat.icon}\r\n+                    </span>\r\n+                </div>\r\n+                <p class=\"text-xl font-bold text-gray-900\">\r\n+                    <span id=\"${stat.id}\">0</span>\r\n+                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n+                </p>\r\n+            </div>\r\n+        `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+  initializeComponents() {\r\n+    this.initializeCountUps();\r\n+    this.initializeProgressBars();\r\n+    this.initializeCharts();\r\n+    this.startAnimations();\r\n+  }\r\n+\r\n+  initializeProgressBars() {\r\n+    // System Size Progress Bar\r\n+    this.progressBars.systemSize = new ProgressBar.Line(\r\n+      \"#system-size-progress\",\r\n+      {\r\n+        color: \"#3B82F6\",\r\n+        trailColor: \"#E5E7EB\",\r\n+        trailWidth: 8,\r\n+        strokeWidth: 8,\r\n+        duration: 2000,\r\n+        easing: \"easeInOut\",\r\n+        from: { color: \"#93C5FD\" },\r\n+        to: { color: \"#3B82F6\" },\r\n+        step: (state, bar) => {\r\n+          bar.path.setAttribute(\"stroke\", state.color);\r\n+        },\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  initializeCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const years = 25; // Standard solar panel warranty period\r\n+    const yearlyLabels = Array.from(\r\n+      { length: years + 1 },\r\n+      (_, i) => `Year ${i}`\r\n+    );\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n+\r\n+    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n+      Math.round(yearlySavings * index)\r\n+    );\r\n+\r\n+    const investmentLine = yearlyLabels.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: yearlyLabels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"rgb(16, 185, 129)\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+            tension: 0,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                return `${\r\n+                  context.dataset.label\r\n+                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: function (value) {\r\n+                return \"PKR \" + value.toLocaleString();\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    // Generate monthly data\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    // Create chart with proper configuration\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"rgb(59, 130, 246)\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+            labels: {\r\n+              usePointStyle: true,\r\n+              padding: 20,\r\n+            },\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            displayColors: true,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                const label = context.dataset.label || \"\";\r\n+                const value = context.parsed.y || 0;\r\n+                return `${label}: ${value.toLocaleString()} kWh`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+              callback: function (value) {\r\n+                return value.toLocaleString() + \" kWh\";\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const seasonalFactors = {\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n+    };\r\n+\r\n+    const monthlyProduction = months.map((month, index) => {\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n+\r\n+      // Base production from system size\r\n+      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n+      return Math.round(baseProduction * factor);\r\n+    });\r\n+\r\n+    const monthlyConsumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+      labels: months,\r\n+      production: monthlyProduction,\r\n+      consumption: monthlyConsumption,\r\n+    };\r\n+  }\r\n+\r\n+  getSeasonalFactor(month) {\r\n+    const seasonalFactors = {\r\n+      Dec: 0.7,\r\n+      Jan: 0.7,\r\n+      Feb: 0.8,\r\n+      Mar: 0.9,\r\n+      Apr: 1.0,\r\n+      May: 1.1,\r\n+      Jun: 1.2,\r\n+      Jul: 1.2,\r\n+      Aug: 1.1,\r\n+      Sep: 1.0,\r\n+      Oct: 0.9,\r\n+      Nov: 0.8,\r\n+    };\r\n+    return seasonalFactors[month];\r\n+  }\r\n+\r\n+  initializeAnimations() {\r\n+    // Fade in sections\r\n+    gsap.fromTo(\r\n+      \".bg-white\",\r\n+      {\r\n+        opacity: 0,\r\n+        y: 20,\r\n+      },\r\n+      {\r\n+        opacity: 1,\r\n+        y: 0,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+      }\r\n+    );\r\n+\r\n+    // Animate progress bars\r\n+    gsap.to(\"#co2-progress\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      ease: \"power2.out\",\r\n+      delay: 0.5,\r\n+    });\r\n+\r\n+    // Number counting animations\r\n+    this.initializeCounters();\r\n+  }\r\n+\r\n+  initializeCounters() {\r\n+    const counters = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n+    ];\r\n+\r\n+    counters.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n+\r\n+      const options = {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      };\r\n+\r\n+      const countUp = new CountUp(counter.id, counter.value, options);\r\n+      if (!countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    this.charts = {};\r\n+\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n+\r\n+    // Remove any event listeners if needed\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n+  }\r\n+\r\n+  handleResize = () => {\r\n+    // Debounced resize handler for chart responsiveness\r\n+    clearTimeout(this.resizeTimeout);\r\n+    this.resizeTimeout = setTimeout(() => {\r\n+      Object.values(this.charts).forEach((chart) => {\r\n+        if (chart) chart.resize();\r\n+      });\r\n+    }, 250);\r\n+  };\r\n+}\r\n"
                },
                {
                    "date": 1731674403013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,24 +5,24 @@\n import ProgressBar from \"progressbar.js\";\r\n \r\n // QuoteResultPage.js\r\n export class QuoteResultPage {\r\n-    constructor() {\r\n-        try {\r\n-            this.billData = getBillData();\r\n-            this.error = getError();\r\n-        } catch (error) {\r\n-            console.error(\"Error in QuoteResultPage constructor:\", error);\r\n-            this.error = \"Failed to load bill data. Please try again.\";\r\n-        }\r\n-        this.charts = {};\r\n-        this.progressBars = {};\r\n-        this.countUps = {};\r\n+  constructor() {\r\n+    try {\r\n+      this.billData = getBillData();\r\n+      this.error = getError();\r\n+    } catch (error) {\r\n+      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n+      this.error = \"Failed to load bill data. Please try again.\";\r\n     }\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n \r\n-    render() {\r\n-        const app = document.getElementById(\"app\");\r\n-        app.innerHTML = `\r\n+  render() {\r\n+    const app = document.getElementById(\"app\");\r\n+    app.innerHTML = `\r\n             <div class=\"min-h-screen bg-gray-50\">\r\n                 <!-- Header Section -->\r\n                 <header class=\"bg-white shadow-sm\">\r\n                     <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n@@ -63,668 +63,87 @@\n                 </main>\r\n             </div>\r\n         `;\r\n \r\n-        // Initialize components after DOM is ready\r\n-        requestAnimationFrame(() => {\r\n-            this.initializeComponents();\r\n-        });\r\n-    }\r\n-\r\n-    initializeComponents() {\r\n-        this.initCharts();\r\n-        this.initCounters();\r\n-        this.initProgressBars();\r\n-        this.startAnimations();\r\n-    }\r\n-\r\n-    initCharts() {\r\n-        this.initProductionChart();\r\n-        this.initSavingsChart();\r\n-    }\r\n-\r\n-    initCounters() {\r\n-        const counterData = [\r\n-            {\r\n-                id: 'system-size-value',\r\n-                value: this.billData.recommendedSystemSize,\r\n-                decimals: 2\r\n-            },\r\n-            {\r\n-                id: 'total-cost-value',\r\n-                value: this.billData.estimatedSystemCost,\r\n-                prefix: 'PKR ',\r\n-                separator: ','\r\n-            },\r\n-            {\r\n-                id: 'payback-period-value',\r\n-                value: this.billData.estimatedPaybackPeriod,\r\n-                decimals: 1\r\n-            }\r\n-        ];\r\n-\r\n-        counterData.forEach(counter => {\r\n-            const element = document.getElementById(counter.id);\r\n-            if (!element) return;\r\n-\r\n-            this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n-                startVal: 0,\r\n-                duration: 2,\r\n-                useEasing: true,\r\n-                useGrouping: true,\r\n-                separator: counter.separator || '',\r\n-                decimal: '.',\r\n-                prefix: counter.prefix || '',\r\n-                decimals: counter.decimals || 0\r\n-            });\r\n-\r\n-            if (!this.countUps[counter.id].error) {\r\n-                this.countUps[counter.id].start();\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    initProgressBars() {\r\n-        const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n-        progressBarElements.forEach(element => {\r\n-            if (!element) return;\r\n-            \r\n-            this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n-                strokeWidth: 4,\r\n-                easing: 'easeInOut',\r\n-                duration: 1400,\r\n-                color: '#3b82f6',\r\n-                trailColor: '#e5e7eb',\r\n-                trailWidth: 4,\r\n-                svgStyle: {width: '100%', height: '100%'}\r\n-            });\r\n-            \r\n-            this.progressBars[element.id].animate(0.75);\r\n-        });\r\n-    }\r\n-\r\n-    startAnimations() {\r\n-        gsap.fromTo(\r\n-            '.bg-white',\r\n-            { \r\n-                opacity: 0, \r\n-                y: 20 \r\n-            },\r\n-            { \r\n-                opacity: 1, \r\n-                y: 0, \r\n-                duration: 0.6,\r\n-                stagger: 0.1,\r\n-                ease: \"power2.out\"\r\n-            }\r\n-        );\r\n-    }\r\n-\r\n-    cleanup() {\r\n-        // Destroy all charts\r\n-        Object.values(this.charts).forEach(chart => {\r\n-            if (chart) chart.destroy();\r\n-        });\r\n-        \r\n-        // Destroy all progress bars\r\n-        Object.values(this.progressBars).forEach(progressBar => {\r\n-            if (progressBar) progressBar.destroy();\r\n-        });\r\n-        \r\n-        // Reset all counters\r\n-        Object.values(this.countUps).forEach(countUp => {\r\n-            if (countUp) countUp.reset();\r\n-        });\r\n-\r\n-        // Kill all GSAP animations\r\n-        gsap.killTweensOf(\"*\");\r\n-        \r\n-        // Clear all objects\r\n-        this.charts = {};\r\n-        this.progressBars = {};\r\n-        this.countUps = {};\r\n-    }\r\n-\r\n-\r\n-  renderDetailsSections() {\r\n-    return `\r\n-        <!-- System Specifications -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n-            <div class=\"grid grid-cols-2 gap-4\">\r\n-                ${this.renderSpecificationDetails()}\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Environmental Impact -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n-            <div class=\"space-y-6\">\r\n-                ${this.renderEnvironmentalImpact()}\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n+    // Initialize components after DOM is ready\r\n+    requestAnimationFrame(() => {\r\n+      this.initializeComponents();\r\n+    });\r\n   }\r\n \r\n-  renderSpecificationDetails() {\r\n-    const specs = [\r\n-      {\r\n-        label: \"Number of Panels\",\r\n-        value: this.billData.numberOfPanels,\r\n-        unit: \"panels\",\r\n-        icon: \"solar_power\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Wattage\",\r\n-        value: this.billData.panelWattage,\r\n-        unit: \"W\",\r\n-        icon: \"bolt\",\r\n-      },\r\n-      {\r\n-        label: \"Required Roof Area\",\r\n-        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n-        unit: \"sq ft\",\r\n-        icon: \"home\",\r\n-      },\r\n-      {\r\n-        label: \"Annual Production\",\r\n-        value: Math.round(this.billData.estimatedAnnualProduction),\r\n-        unit: \"kWh\",\r\n-        icon: \"power\",\r\n-      },\r\n-    ];\r\n-\r\n-    return specs\r\n-      .map(\r\n-        (spec) => `\r\n-        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n-            <div class=\"flex-shrink-0\">\r\n-                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n-                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n-                </span>\r\n-            </div>\r\n-            <div class=\"ml-4\">\r\n-                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n-                <p class=\"mt-1 text-sm text-gray-500\">\r\n-                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n-          spec.unit\r\n-        }\r\n-                </p>\r\n-            </div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n+  initializeComponents() {\r\n+    this.initCharts();\r\n+    this.initCounters();\r\n+    this.initProgressBars();\r\n+    this.startAnimations();\r\n   }\r\n \r\n-  renderEnvironmentalImpact() {\r\n-    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007; // tons of CO2 per kWh\r\n-    const treesEquivalent = Math.round(co2Offset * 40); // Each tree absorbs ~0.025 tons CO2 per year\r\n-    const gasoline = Math.round(co2Offset * 113); // gallons of gasoline equivalent\r\n-\r\n-    return `\r\n-        <div class=\"relative pt-1\">\r\n-            <div class=\"flex mb-2 items-center justify-between\">\r\n-                <div>\r\n-                    <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200\">\r\n-                        CO₂ Offset\r\n-                    </span>\r\n-                </div>\r\n-                <div class=\"text-right\">\r\n-                    <span class=\"text-xs font-semibold inline-block text-green-600\">\r\n-                        ${co2Offset.toFixed(1)} tons/year\r\n-                    </span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"overflow-hidden h-2 text-xs flex rounded bg-green-200\">\r\n-                <div id=\"co2-progress\" \r\n-                     class=\"w-0 transition-all duration-1000 shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500\">\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <div class=\"grid grid-cols-2 gap-4 mt-6\">\r\n-            <div class=\"bg-green-50 rounded-lg p-4\">\r\n-                <div class=\"flex items-center\">\r\n-                    <span class=\"text-2xl mr-3\">🌳</span>\r\n-                    <div>\r\n-                        <p class=\"text-sm text-gray-600\">Equivalent to</p>\r\n-                        <p class=\"text-lg font-semibold text-gray-900\">${treesEquivalent.toLocaleString()} trees planted</p>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-\r\n-            <div class=\"bg-blue-50 rounded-lg p-4\">\r\n-                <div class=\"flex items-center\">\r\n-                    <span class=\"text-2xl mr-3\">⛽</span>\r\n-                    <div>\r\n-                        <p class=\"text-sm text-gray-600\">Equal to removing</p>\r\n-                        <p class=\"text-lg font-semibold text-gray-900\">${gasoline.toLocaleString()} gallons of gasoline</p>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n+  initCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n   }\r\n \r\n-  renderChartSections() {\r\n-    return `\r\n-        <!-- Energy Production Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"production-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Cost Savings Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"savings-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderKeyMetrics() {\r\n-    const metrics = [\r\n+  initCounters() {\r\n+    const counterData = [\r\n       {\r\n-        title: \"Recommended System Size\",\r\n+        id: \"system-size-value\",\r\n         value: this.billData.recommendedSystemSize,\r\n-        unit: \"kW\",\r\n-        icon: \"⚡\",\r\n-        color: \"blue\",\r\n-        id: \"system-size\",\r\n+        decimals: 2,\r\n       },\r\n       {\r\n-        title: \"Total Investment\",\r\n+        id: \"total-cost-value\",\r\n         value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR\",\r\n-        icon: \"💰\",\r\n-        color: \"green\",\r\n-        id: \"total-cost\",\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n       },\r\n       {\r\n-        title: \"Payback Period\",\r\n+        id: \"payback-period-value\",\r\n         value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        color: \"purple\",\r\n-        id: \"payback-period\",\r\n+        decimals: 1,\r\n       },\r\n     ];\r\n \r\n-    return metrics\r\n-      .map(\r\n-        (metric) => `\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n-            <div class=\"flex justify-between items-start\">\r\n-                <div>\r\n-                    <p class=\"text-sm font-medium text-gray-500\">${\r\n-                      metric.title\r\n-                    }</p>\r\n-                    <div class=\"mt-1 flex items-baseline\">\r\n-                        ${\r\n-                          metric.prefix\r\n-                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n-                          metric.id\r\n-                        }-value\">0</span>\r\n-                        ${\r\n-                          metric.unit\r\n-                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n-                    <span class=\"text-xl\">${metric.icon}</span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n+    counterData.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n \r\n-  renderStatCards() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-yellow-50\",\r\n-        icon: \"⚡️\",\r\n-        id: \"daily-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Production\",\r\n-        value: this.billData.estimatedMonthlyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-blue-50\",\r\n-        icon: \"📊\",\r\n-        id: \"monthly-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Coverage\",\r\n-        value: this.billData.coveragePercentage,\r\n-        unit: \"%\",\r\n-        bg: \"bg-green-50\",\r\n-        icon: \"🎯\",\r\n-        id: \"coverage-value\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Efficiency\",\r\n-        value: \"21.5\",\r\n-        unit: \"%\",\r\n-        bg: \"bg-purple-50\",\r\n-        icon: \"⚙️\",\r\n-        id: \"efficiency-value\",\r\n-      },\r\n-    ];\r\n+      this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      });\r\n \r\n-    return stats\r\n-      .map(\r\n-        (stat) => `\r\n-            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n-                <div class=\"flex items-center justify-between mb-2\">\r\n-                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n-                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n-                        ${stat.icon}\r\n-                    </span>\r\n-                </div>\r\n-                <p class=\"text-xl font-bold text-gray-900\">\r\n-                    <span id=\"${stat.id}\">0</span>\r\n-                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n-                </p>\r\n-            </div>\r\n-        `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-  initializeComponents() {\r\n-    this.initializeCountUps();\r\n-    this.initializeProgressBars();\r\n-    this.initializeCharts();\r\n-    this.startAnimations();\r\n-  }\r\n-\r\n-  initializeProgressBars() {\r\n-    // System Size Progress Bar\r\n-    this.progressBars.systemSize = new ProgressBar.Line(\r\n-      \"#system-size-progress\",\r\n-      {\r\n-        color: \"#3B82F6\",\r\n-        trailColor: \"#E5E7EB\",\r\n-        trailWidth: 8,\r\n-        strokeWidth: 8,\r\n-        duration: 2000,\r\n-        easing: \"easeInOut\",\r\n-        from: { color: \"#93C5FD\" },\r\n-        to: { color: \"#3B82F6\" },\r\n-        step: (state, bar) => {\r\n-          bar.path.setAttribute(\"stroke\", state.color);\r\n-        },\r\n+      if (!this.countUps[counter.id].error) {\r\n+        this.countUps[counter.id].start();\r\n       }\r\n-    );\r\n-  }\r\n-\r\n-  initializeCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initSavingsChart() {\r\n-    const ctx = document.getElementById(\"savings-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const years = 25; // Standard solar panel warranty period\r\n-    const yearlyLabels = Array.from(\r\n-      { length: years + 1 },\r\n-      (_, i) => `Year ${i}`\r\n-    );\r\n-    const systemCost = this.billData.estimatedSystemCost;\r\n-    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n-\r\n-    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n-      Math.round(yearlySavings * index)\r\n-    );\r\n-\r\n-    const investmentLine = yearlyLabels.map(() => systemCost);\r\n-\r\n-    this.charts.savings = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: yearlyLabels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Cumulative Savings\",\r\n-            data: cumulativeSavings,\r\n-            borderColor: \"rgb(16, 185, 129)\",\r\n-            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Initial Investment\",\r\n-            data: investmentLine,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            borderDash: [5, 5],\r\n-            fill: false,\r\n-            tension: 0,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                return `${\r\n-                  context.dataset.label\r\n-                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            ticks: {\r\n-              callback: function (value) {\r\n-                return \"PKR \" + value.toLocaleString();\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n     });\r\n   }\r\n \r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n+  initProgressBars() {\r\n+    const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n+    progressBarElements.forEach((element) => {\r\n+      if (!element) return;\r\n \r\n-    // Generate monthly data\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n+      this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n+        strokeWidth: 4,\r\n+        easing: \"easeInOut\",\r\n+        duration: 1400,\r\n+        color: \"#3b82f6\",\r\n+        trailColor: \"#e5e7eb\",\r\n+        trailWidth: 4,\r\n+        svgStyle: { width: \"100%\", height: \"100%\" },\r\n+      });\r\n \r\n-    // Create chart with proper configuration\r\n-    this.charts.production = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: monthlyData.labels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"rgb(59, 130, 246)\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-          {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-            labels: {\r\n-              usePointStyle: true,\r\n-              padding: 20,\r\n-            },\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            displayColors: true,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                const label = context.dataset.label || \"\";\r\n-                const value = context.parsed.y || 0;\r\n-                return `${label}: ${value.toLocaleString()} kWh`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: {\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-              callback: function (value) {\r\n-                return value.toLocaleString() + \" kWh\";\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n+      this.progressBars[element.id].animate(0.75);\r\n     });\r\n   }\r\n \r\n-  generateMonthlyProductionData() {\r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const seasonalFactors = {\r\n-      winter: 0.7,\r\n-      spring: 0.9,\r\n-      summer: 1.2,\r\n-      fall: 0.8,\r\n-    };\r\n-\r\n-    const monthlyProduction = months.map((month, index) => {\r\n-      let factor;\r\n-      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-      else if (index < 5) factor = seasonalFactors.spring;\r\n-      else if (index < 8) factor = seasonalFactors.summer;\r\n-      else factor = seasonalFactors.fall;\r\n-\r\n-      // Base production from system size\r\n-      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n-      return Math.round(baseProduction * factor);\r\n-    });\r\n-\r\n-    const monthlyConsumption = months.map(() =>\r\n-      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-      labels: months,\r\n-      production: monthlyProduction,\r\n-      consumption: monthlyConsumption,\r\n-    };\r\n-  }\r\n-\r\n-  getSeasonalFactor(month) {\r\n-    const seasonalFactors = {\r\n-      Dec: 0.7,\r\n-      Jan: 0.7,\r\n-      Feb: 0.8,\r\n-      Mar: 0.9,\r\n-      Apr: 1.0,\r\n-      May: 1.1,\r\n-      Jun: 1.2,\r\n-      Jul: 1.2,\r\n-      Aug: 1.1,\r\n-      Sep: 1.0,\r\n-      Oct: 0.9,\r\n-      Nov: 0.8,\r\n-    };\r\n-    return seasonalFactors[month];\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    // Fade in sections\r\n+  startAnimations() {\r\n     gsap.fromTo(\r\n       \".bg-white\",\r\n       {\r\n         opacity: 0,\r\n@@ -737,165 +156,35 @@\n         stagger: 0.1,\r\n         ease: \"power2.out\",\r\n       }\r\n     );\r\n-\r\n-    // Animate progress bars\r\n-    gsap.to(\"#co2-progress\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      ease: \"power2.out\",\r\n-      delay: 0.5,\r\n-    });\r\n-\r\n-    // Number counting animations\r\n-    this.initializeCounters();\r\n   }\r\n \r\n-  initializeCounters() {\r\n-    const counters = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counters.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      const options = {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      };\r\n-\r\n-      const countUp = new CountUp(counter.id, counter.value, options);\r\n-      if (!countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n   cleanup() {\r\n     // Destroy all charts\r\n     Object.values(this.charts).forEach((chart) => {\r\n       if (chart) chart.destroy();\r\n     });\r\n-    this.charts = {};\r\n \r\n+    // Destroy all progress bars\r\n+    Object.values(this.progressBars).forEach((progressBar) => {\r\n+      if (progressBar) progressBar.destroy();\r\n+    });\r\n+\r\n+    // Reset all counters\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp) countUp.reset();\r\n+    });\r\n+\r\n     // Kill all GSAP animations\r\n     gsap.killTweensOf(\"*\");\r\n \r\n-    // Remove any event listeners if needed\r\n-    window.removeEventListener(\"resize\", this.handleResize);\r\n-  }\r\n-\r\n-  handleResize = () => {\r\n-    // Debounced resize handler for chart responsiveness\r\n-    clearTimeout(this.resizeTimeout);\r\n-    this.resizeTimeout = setTimeout(() => {\r\n-      Object.values(this.charts).forEach((chart) => {\r\n-        if (chart) chart.resize();\r\n-      });\r\n-    }, 250);\r\n-  };\r\n-}\r\n-import { gsap } from \"gsap\";\r\n-import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n-import Chart from \"chart.js/auto\";\r\n-import { CountUp } from \"countup.js\";\r\n-import ProgressBar from \"progressbar.js\";\r\n-\r\n-export class QuoteResultPage {\r\n-  constructor() {\r\n+    // Clear all objects\r\n     this.charts = {};\r\n-    this.resizeTimeout = null;\r\n-    this.billData = getBillData();\r\n-\r\n-    // Bind methods\r\n-    this.handleResize = this.handleResize.bind(this);\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n   }\r\n \r\n-  mount() {\r\n-    this.render();\r\n-    this.initializeCharts();\r\n-    this.initializeAnimations();\r\n-    window.addEventListener(\"resize\", this.handleResize);\r\n-  }\r\n-\r\n-  unmount() {\r\n-    this.cleanup();\r\n-  }\r\n-\r\n-  render() {\r\n-    const app = document.getElementById(\"app\");\r\n-    app.innerHTML = `\r\n-            <div class=\"min-h-screen bg-gray-50\">\r\n-                <!-- Header Section -->\r\n-                <header class=\"bg-white shadow-sm\">\r\n-                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n-                        <div class=\"flex items-center justify-between\">\r\n-                            <div>\r\n-                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n-                            </div>\r\n-                            <button \r\n-                                onclick=\"window.router.push('/bill-review')\"\r\n-                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n-                            >\r\n-                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n-                                </svg>\r\n-                                Back to Analysis\r\n-                            </button>\r\n-                        </div>\r\n-                    </div>\r\n-                </header>\r\n-    \r\n-                <!-- Main Content -->\r\n-                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n-                    <!-- Key Metrics Grid -->\r\n-                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n-                        ${this.renderKeyMetrics()}\r\n-                    </div>\r\n-    \r\n-                    <!-- Charts Grid -->\r\n-                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n-                        ${this.renderChartSections()}\r\n-                    </div>\r\n-    \r\n-                    <!-- Additional Details -->\r\n-                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n-                        ${this.renderDetailsSections()}\r\n-                    </div>\r\n-                </main>\r\n-            </div>\r\n-        `;\r\n-\r\n-    // Initialize components after DOM is ready\r\n-    requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n-    });\r\n-  }\r\n-\r\n   renderDetailsSections() {\r\n     return `\r\n         <!-- System Specifications -->\r\n         <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n@@ -1154,14 +443,8 @@\n         `\r\n       )\r\n       .join(\"\");\r\n   }\r\n-  initializeComponents() {\r\n-    this.initializeCountUps();\r\n-    this.initializeProgressBars();\r\n-    this.initializeCharts();\r\n-    this.startAnimations();\r\n-  }\r\n \r\n   initializeProgressBars() {\r\n     // System Size Progress Bar\r\n     this.progressBars.systemSize = new ProgressBar.Line(\r\n"
                },
                {
                    "date": 1731675025707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,56 +21,120 @@\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n-            <div class=\"min-h-screen bg-gray-50\">\r\n-                <!-- Header Section -->\r\n-                <header class=\"bg-white shadow-sm\">\r\n-                    <div class=\"max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8\">\r\n-                        <div class=\"flex items-center justify-between\">\r\n-                            <div>\r\n-                                <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                                <p class=\"mt-1 text-sm text-gray-500\">Based on your electricity consumption analysis</p>\r\n-                            </div>\r\n-                            <button \r\n-                                onclick=\"window.router.push('/bill-review')\"\r\n-                                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n-                            >\r\n-                                <svg class=\"mr-2 -ml-1 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n-                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n-                                </svg>\r\n-                                Back to Analysis\r\n-                            </button>\r\n-                        </div>\r\n-                    </div>\r\n-                </header>\r\n+        <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n+            <!-- Header -->\r\n+            <div class=\"mb-8 flex justify-between items-center\">\r\n+                <div>\r\n+                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n+                </div>\r\n+                <button \r\n+                    onclick=\"window.router.push('/bill-review')\"\r\n+                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n+                >\r\n+                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n+                    </svg>\r\n+                    Back\r\n+                </button>\r\n+            </div>\r\n \r\n-                <!-- Main Content -->\r\n-                <main class=\"max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8\">\r\n-                    <!-- Key Metrics Grid -->\r\n-                    <div class=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-6\">\r\n-                        ${this.renderKeyMetrics()}\r\n+            <!-- Bento Grid Layout -->\r\n+            <div class=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 auto-rows-[120px]\">\r\n+                <!-- System Size Card - Tall -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:row-span-2\">\r\n+                    ${this.renderSystemSizeCard()}\r\n+                </div>\r\n+\r\n+                <!-- Cost Card - Wide -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n+                    ${this.renderCostCard()}\r\n+                </div>\r\n+\r\n+                <!-- Environmental Impact - Square -->\r\n+                <div class=\"rounded-xl bg-gradient-to-br from-green-50 to-emerald-50 p-6 shadow-sm row-span-2\">\r\n+                    ${this.renderEnvironmentalImpact()}\r\n+                </div>\r\n+\r\n+                <!-- Energy Production Chart - Wide & Tall -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2 md:row-span-2\">\r\n+                    <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                    <div class=\"h-[300px]\">\r\n+                        <canvas id=\"production-chart\"></canvas>\r\n                     </div>\r\n+                </div>\r\n \r\n-                    <!-- Charts Grid -->\r\n-                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n-                        ${this.renderChartSections()}\r\n+                <!-- Quick Stats - Wide -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n+                    ${this.renderQuickStats()}\r\n+                </div>\r\n+\r\n+                <!-- Savings Timeline - Extra Wide & Tall -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-3 md:row-span-2\">\r\n+                    <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                    <div class=\"h-[300px]\">\r\n+                        <canvas id=\"savings-chart\"></canvas>\r\n                     </div>\r\n+                </div>\r\n \r\n-                    <!-- Additional Details -->\r\n-                    <div class=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n-                        ${this.renderDetailsSections()}\r\n-                    </div>\r\n-                </main>\r\n+                <!-- System Details - Square -->\r\n+                <div class=\"rounded-xl bg-gradient-to-br from-blue-50 to-indigo-50 p-6 shadow-sm\">\r\n+                    ${this.renderSystemDetails()}\r\n+                </div>\r\n             </div>\r\n-        `;\r\n+        </div>\r\n+    `;\r\n \r\n-    // Initialize components after DOM is ready\r\n     requestAnimationFrame(() => {\r\n       this.initializeComponents();\r\n     });\r\n   }\r\n \r\n+  renderSystemSizeCard() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n+                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                    </svg>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n+                    <span id=\"system-size-value\">0</span>\r\n+                    <span class=\"text-lg text-gray-500\">kW</span>\r\n+                </div>\r\n+                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n+            </div>\r\n+            <div id=\"system-size-progress\" class=\"mt-4 h-2\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderCostCard() {\r\n+    return `\r\n+        <div class=\"flex items-center justify-between h-full\">\r\n+            <div>\r\n+                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n+                <div class=\"text-3xl font-bold text-gray-900\">\r\n+                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n+                    <span id=\"total-cost-value\">0</span>\r\n+                </div>\r\n+                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n+                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n   initializeComponents() {\r\n     this.initCharts();\r\n     this.initCounters();\r\n     this.initProgressBars();\r\n"
                },
                {
                    "date": 1731675153291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,75 @@\n             </div>\r\n         </div>\r\n     `;\r\n   }\r\n+  attachBaseStyles() {\r\n+    const style = document.createElement(\"style\");\r\n+    style.textContent = `\r\n+        .bento-card {\r\n+            transition: all 0.3s ease;\r\n+            position: relative;\r\n+            overflow: hidden;\r\n+        }\r\n \r\n+        .bento-card:hover {\r\n+            transform: translateY(-2px);\r\n+            box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);\r\n+        }\r\n+\r\n+        .bento-card::after {\r\n+            content: '';\r\n+            position: absolute;\r\n+            top: 0;\r\n+            left: 0;\r\n+            right: 0;\r\n+            bottom: 0;\r\n+            border-radius: inherit;\r\n+            background: linear-gradient(\r\n+                120deg,\r\n+                transparent 20%,\r\n+                rgba(255, 255, 255, 0.1) 28%,\r\n+                transparent 40%\r\n+            );\r\n+            transform: translateX(-100%);\r\n+            transition: transform 0.7s ease;\r\n+        }\r\n+\r\n+        .bento-card:hover::after {\r\n+            transform: translateX(100%);\r\n+        }\r\n+\r\n+        .stat-value {\r\n+            transition: color 0.3s ease;\r\n+        }\r\n+\r\n+        .bento-card:hover .stat-value {\r\n+            color: #3b82f6;\r\n+        }\r\n+\r\n+        .chart-container {\r\n+            position: relative;\r\n+        }\r\n+\r\n+        .chart-container canvas {\r\n+            transition: transform 0.3s ease;\r\n+        }\r\n+\r\n+        .chart-container:hover canvas {\r\n+            transform: scale(1.02);\r\n+        }\r\n+\r\n+        .environmental-impact-card {\r\n+            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\r\n+        }\r\n+\r\n+        .savings-card {\r\n+            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\r\n+        }\r\n+    `;\r\n+    document.head.appendChild(style);\r\n+  }\r\n+\r\n   renderSpecificationDetails() {\r\n     const specs = [\r\n       {\r\n         label: \"Number of Panels\",\r\n@@ -319,57 +385,129 @@\n       .join(\"\");\r\n   }\r\n \r\n   renderEnvironmentalImpact() {\r\n-    const co2Offset = this.billData.estimatedAnnualProduction * 0.0007; // tons of CO2 per kWh\r\n-    const treesEquivalent = Math.round(co2Offset * 40); // Each tree absorbs ~0.025 tons CO2 per year\r\n-    const gasoline = Math.round(co2Offset * 113); // gallons of gasoline equivalent\r\n+    const co2Offset = this.calculateCO2Offset();\r\n+    const treesEquivalent = Math.round(co2Offset * 40);\r\n \r\n     return `\r\n-        <div class=\"relative pt-1\">\r\n-            <div class=\"flex mb-2 items-center justify-between\">\r\n-                <div>\r\n-                    <span class=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200\">\r\n-                        CO₂ Offset\r\n-                    </span>\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n+                <span class=\"text-2xl\">🌍</span>\r\n+            </div>\r\n+            \r\n+            <div class=\"flex-1 space-y-4\">\r\n+                <div class=\"relative\">\r\n+                    <div class=\"flex justify-between mb-1\">\r\n+                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n+                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n+                            ${co2Offset.toFixed(1)} tons/year\r\n+                        </span>\r\n+                    </div>\r\n+                    <div class=\"w-full h-2 bg-green-100 rounded-full\">\r\n+                        <div id=\"co2-progress-bar\" \r\n+                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n+                             style=\"width: 0%\">\r\n+                        </div>\r\n+                    </div>\r\n                 </div>\r\n-                <div class=\"text-right\">\r\n-                    <span class=\"text-xs font-semibold inline-block text-green-600\">\r\n-                        ${co2Offset.toFixed(1)} tons/year\r\n-                    </span>\r\n+\r\n+                <div class=\"grid grid-cols-2 gap-3\">\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">🌳</div>\r\n+                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"trees-value\">0</span> trees\r\n+                        </div>\r\n+                    </div>\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">⚡</div>\r\n+                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"homes-value\">0</span> homes\r\n+                        </div>\r\n+                    </div>\r\n                 </div>\r\n             </div>\r\n-            <div class=\"overflow-hidden h-2 text-xs flex rounded bg-green-200\">\r\n-                <div id=\"co2-progress\" \r\n-                     class=\"w-0 transition-all duration-1000 shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-green-500\">\r\n-                </div>\r\n-            </div>\r\n         </div>\r\n+    `;\r\n+  }\r\n \r\n-        <div class=\"grid grid-cols-2 gap-4 mt-6\">\r\n-            <div class=\"bg-green-50 rounded-lg p-4\">\r\n-                <div class=\"flex items-center\">\r\n-                    <span class=\"text-2xl mr-3\">🌳</span>\r\n-                    <div>\r\n-                        <p class=\"text-sm text-gray-600\">Equivalent to</p>\r\n-                        <p class=\"text-lg font-semibold text-gray-900\">${treesEquivalent.toLocaleString()} trees planted</p>\r\n+  renderQuickStats() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        icon: \"⚡\",\r\n+        id: \"daily-production\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Savings\",\r\n+        value: this.billData.estimatedAnnualSavings / 12,\r\n+        unit: \"PKR\",\r\n+        icon: \"💰\",\r\n+        id: \"monthly-savings\",\r\n+      },\r\n+      {\r\n+        label: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return `\r\n+        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n+            ${stats\r\n+              .map(\r\n+                (stat) => `\r\n+                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n+                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n+                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n+                        <span id=\"${stat.id}-value\">0</span>\r\n+                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n                     </div>\r\n                 </div>\r\n-            </div>\r\n+            `\r\n+              )\r\n+              .join(\"\")}\r\n+        </div>\r\n+    `;\r\n+  }\r\n \r\n-            <div class=\"bg-blue-50 rounded-lg p-4\">\r\n-                <div class=\"flex items-center\">\r\n-                    <span class=\"text-2xl mr-3\">⛽</span>\r\n-                    <div>\r\n-                        <p class=\"text-sm text-gray-600\">Equal to removing</p>\r\n-                        <p class=\"text-lg font-semibold text-gray-900\">${gasoline.toLocaleString()} gallons of gasoline</p>\r\n+  renderSystemDetails() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">System Details</h3>\r\n+            <div class=\"grid grid-cols-2 gap-3 flex-1\">\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Panels</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">\r\n+                        <span id=\"panels-value\">0</span>\r\n                     </div>\r\n                 </div>\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Roof Area</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">\r\n+                        <span id=\"area-value\">0</span> sq ft\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Warranty</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">25 years</div>\r\n+                </div>\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Efficiency</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">21.5%</div>\r\n+                </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n   }\r\n-\r\n   renderChartSections() {\r\n     return `\r\n         <!-- Energy Production Chart -->\r\n         <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n"
                },
                {
                    "date": 1731675189279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,36 +917,78 @@\n     return seasonalFactors[month];\r\n   }\r\n \r\n   initializeAnimations() {\r\n-    // Fade in sections\r\n-    gsap.fromTo(\r\n-      \".bg-white\",\r\n-      {\r\n+    // Initial fade in animation for all cards\r\n+    gsap.from('.bento-card', {\r\n+        duration: 0.8,\r\n         opacity: 0,\r\n-        y: 20,\r\n-      },\r\n-      {\r\n-        opacity: 1,\r\n-        y: 0,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n-        ease: \"power2.out\",\r\n-      }\r\n-    );\r\n+        y: 30,\r\n+        stagger: {\r\n+            amount: 0.8,\r\n+            from: \"random\"\r\n+        },\r\n+        ease: \"power3.out\"\r\n+    });\r\n \r\n     // Animate progress bars\r\n-    gsap.to(\"#co2-progress\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      ease: \"power2.out\",\r\n-      delay: 0.5,\r\n+    this.animateProgressBars();\r\n+\r\n+    // Start counters with slight delays\r\n+    this.animateCounters();\r\n+\r\n+    // Add hover animations\r\n+    this.initializeHoverEffects();\r\n+}\r\n+\r\n+animateProgressBars() {\r\n+    // CO2 Progress animation\r\n+    gsap.to('#co2-progress-bar', {\r\n+        width: '75%',\r\n+        duration: 1.5,\r\n+        delay: 0.5,\r\n+        ease: \"power2.out\"\r\n     });\r\n \r\n-    // Number counting animations\r\n-    this.initializeCounters();\r\n-  }\r\n+    // System size progress animation\r\n+    if (this.progressBars['system-size-progress']) {\r\n+        this.progressBars['system-size-progress'].animate(0.8, {\r\n+            duration: 1500,\r\n+            easing: 'easeInOut'\r\n+        });\r\n+    }\r\n+}\r\n \r\n+animateCounters() {\r\n+    Object.values(this.countUps).forEach((counter, index) => {\r\n+        if (counter && !counter.error) {\r\n+            setTimeout(() => {\r\n+                counter.start();\r\n+            }, index * 200); // Staggered start\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+initializeHoverEffects() {\r\n+    document.querySelectorAll('.bento-card').forEach(card => {\r\n+        card.addEventListener('mouseenter', () => {\r\n+            gsap.to(card.querySelectorAll('.stat-value'), {\r\n+                scale: 1.05,\r\n+                duration: 0.3,\r\n+                ease: \"power2.out\"\r\n+            });\r\n+        });\r\n+\r\n+        card.addEventListener('mouseleave', () => {\r\n+            gsap.to(card.querySelectorAll('.stat-value'), {\r\n+                scale: 1,\r\n+                duration: 0.3,\r\n+                ease: \"power2.out\"\r\n+            });\r\n+        });\r\n+    });\r\n+}\r\n+\r\n   initializeCounters() {\r\n     const counters = [\r\n       {\r\n         id: \"system-size-value\",\r\n"
                },
                {
                    "date": 1731675212824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1055 @@\n+import { gsap } from \"gsap\";\r\n+import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n+import Chart from \"chart.js/auto\";\r\n+import { CountUp } from \"countup.js\";\r\n+import ProgressBar from \"progressbar.js\";\r\n+\r\n+// QuoteResultPage.js\r\n+export class QuoteResultPage {\r\n+  constructor() {\r\n+    try {\r\n+      this.billData = getBillData();\r\n+      this.error = getError();\r\n+    } catch (error) {\r\n+      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n+      this.error = \"Failed to load bill data. Please try again.\";\r\n+    }\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n+\r\n+  render() {\r\n+    const app = document.getElementById(\"app\");\r\n+    app.innerHTML = `\r\n+        <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n+            <!-- Header -->\r\n+            <div class=\"mb-8 flex justify-between items-center\">\r\n+                <div>\r\n+                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n+                </div>\r\n+                <button \r\n+                    onclick=\"window.router.push('/bill-review')\"\r\n+                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n+                >\r\n+                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n+                    </svg>\r\n+                    Back\r\n+                </button>\r\n+            </div>\r\n+\r\n+            <!-- Bento Grid Layout -->\r\n+            <div class=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 auto-rows-[120px]\">\r\n+                <!-- System Size Card - Tall -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:row-span-2\">\r\n+                    ${this.renderSystemSizeCard()}\r\n+                </div>\r\n+\r\n+                <!-- Cost Card - Wide -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n+                    ${this.renderCostCard()}\r\n+                </div>\r\n+\r\n+                <!-- Environmental Impact - Square -->\r\n+                <div class=\"rounded-xl bg-gradient-to-br from-green-50 to-emerald-50 p-6 shadow-sm row-span-2\">\r\n+                    ${this.renderEnvironmentalImpact()}\r\n+                </div>\r\n+\r\n+                <!-- Energy Production Chart - Wide & Tall -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2 md:row-span-2\">\r\n+                    <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                    <div class=\"h-[300px]\">\r\n+                        <canvas id=\"production-chart\"></canvas>\r\n+                    </div>\r\n+                </div>\r\n+\r\n+                <!-- Quick Stats - Wide -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n+                    ${this.renderQuickStats()}\r\n+                </div>\r\n+\r\n+                <!-- Savings Timeline - Extra Wide & Tall -->\r\n+                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-3 md:row-span-2\">\r\n+                    <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                    <div class=\"h-[300px]\">\r\n+                        <canvas id=\"savings-chart\"></canvas>\r\n+                    </div>\r\n+                </div>\r\n+\r\n+                <!-- System Details - Square -->\r\n+                <div class=\"rounded-xl bg-gradient-to-br from-blue-50 to-indigo-50 p-6 shadow-sm\">\r\n+                    ${this.renderSystemDetails()}\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+\r\n+    requestAnimationFrame(() => {\r\n+      this.initializeComponents();\r\n+    });\r\n+  }\r\n+\r\n+  renderSystemSizeCard() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n+                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                    </svg>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n+                    <span id=\"system-size-value\">0</span>\r\n+                    <span class=\"text-lg text-gray-500\">kW</span>\r\n+                </div>\r\n+                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n+            </div>\r\n+            <div id=\"system-size-progress\" class=\"mt-4 h-2\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderCostCard() {\r\n+    return `\r\n+        <div class=\"flex items-center justify-between h-full\">\r\n+            <div>\r\n+                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n+                <div class=\"text-3xl font-bold text-gray-900\">\r\n+                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n+                    <span id=\"total-cost-value\">0</span>\r\n+                </div>\r\n+                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n+                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+  initializeComponents() {\r\n+    this.initCharts();\r\n+    this.initCounters();\r\n+    this.initProgressBars();\r\n+    this.startAnimations();\r\n+  }\r\n+\r\n+  initCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initCounters() {\r\n+    const counterData = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n+    ];\r\n+\r\n+    counterData.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n+\r\n+      this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      });\r\n+\r\n+      if (!this.countUps[counter.id].error) {\r\n+        this.countUps[counter.id].start();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  initProgressBars() {\r\n+    const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n+    progressBarElements.forEach((element) => {\r\n+      if (!element) return;\r\n+\r\n+      this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n+        strokeWidth: 4,\r\n+        easing: \"easeInOut\",\r\n+        duration: 1400,\r\n+        color: \"#3b82f6\",\r\n+        trailColor: \"#e5e7eb\",\r\n+        trailWidth: 4,\r\n+        svgStyle: { width: \"100%\", height: \"100%\" },\r\n+      });\r\n+\r\n+      this.progressBars[element.id].animate(0.75);\r\n+    });\r\n+  }\r\n+\r\n+  startAnimations() {\r\n+    gsap.fromTo(\r\n+      \".bg-white\",\r\n+      {\r\n+        opacity: 0,\r\n+        y: 20,\r\n+      },\r\n+      {\r\n+        opacity: 1,\r\n+        y: 0,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+\r\n+    // Destroy all progress bars\r\n+    Object.values(this.progressBars).forEach((progressBar) => {\r\n+      if (progressBar) progressBar.destroy();\r\n+    });\r\n+\r\n+    // Reset all counters\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp) countUp.reset();\r\n+    });\r\n+\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n+\r\n+    // Clear all objects\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n+\r\n+  renderDetailsSections() {\r\n+    return `\r\n+        <!-- System Specifications -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n+            <div class=\"grid grid-cols-2 gap-4\">\r\n+                ${this.renderSpecificationDetails()}\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Environmental Impact -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n+            <div class=\"space-y-6\">\r\n+                ${this.renderEnvironmentalImpact()}\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+  attachBaseStyles() {\r\n+    const style = document.createElement(\"style\");\r\n+    style.textContent = `\r\n+        .bento-card {\r\n+            transition: all 0.3s ease;\r\n+            position: relative;\r\n+            overflow: hidden;\r\n+        }\r\n+\r\n+        .bento-card:hover {\r\n+            transform: translateY(-2px);\r\n+            box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);\r\n+        }\r\n+\r\n+        .bento-card::after {\r\n+            content: '';\r\n+            position: absolute;\r\n+            top: 0;\r\n+            left: 0;\r\n+            right: 0;\r\n+            bottom: 0;\r\n+            border-radius: inherit;\r\n+            background: linear-gradient(\r\n+                120deg,\r\n+                transparent 20%,\r\n+                rgba(255, 255, 255, 0.1) 28%,\r\n+                transparent 40%\r\n+            );\r\n+            transform: translateX(-100%);\r\n+            transition: transform 0.7s ease;\r\n+        }\r\n+\r\n+        .bento-card:hover::after {\r\n+            transform: translateX(100%);\r\n+        }\r\n+\r\n+        .stat-value {\r\n+            transition: color 0.3s ease;\r\n+        }\r\n+\r\n+        .bento-card:hover .stat-value {\r\n+            color: #3b82f6;\r\n+        }\r\n+\r\n+        .chart-container {\r\n+            position: relative;\r\n+        }\r\n+\r\n+        .chart-container canvas {\r\n+            transition: transform 0.3s ease;\r\n+        }\r\n+\r\n+        .chart-container:hover canvas {\r\n+            transform: scale(1.02);\r\n+        }\r\n+\r\n+        .environmental-impact-card {\r\n+            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\r\n+        }\r\n+\r\n+        .savings-card {\r\n+            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\r\n+        }\r\n+    `;\r\n+    document.head.appendChild(style);\r\n+  }\r\n+\r\n+  renderSpecificationDetails() {\r\n+    const specs = [\r\n+      {\r\n+        label: \"Number of Panels\",\r\n+        value: this.billData.numberOfPanels,\r\n+        unit: \"panels\",\r\n+        icon: \"solar_power\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Wattage\",\r\n+        value: this.billData.panelWattage,\r\n+        unit: \"W\",\r\n+        icon: \"bolt\",\r\n+      },\r\n+      {\r\n+        label: \"Required Roof Area\",\r\n+        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n+        unit: \"sq ft\",\r\n+        icon: \"home\",\r\n+      },\r\n+      {\r\n+        label: \"Annual Production\",\r\n+        value: Math.round(this.billData.estimatedAnnualProduction),\r\n+        unit: \"kWh\",\r\n+        icon: \"power\",\r\n+      },\r\n+    ];\r\n+\r\n+    return specs\r\n+      .map(\r\n+        (spec) => `\r\n+        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n+            <div class=\"flex-shrink-0\">\r\n+                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n+                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n+                </span>\r\n+            </div>\r\n+            <div class=\"ml-4\">\r\n+                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n+                <p class=\"mt-1 text-sm text-gray-500\">\r\n+                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n+          spec.unit\r\n+        }\r\n+                </p>\r\n+            </div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderEnvironmentalImpact() {\r\n+    const treesEquivalent = Math.round(co2Offset * 40);\r\n+\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n+                <span class=\"text-2xl\">🌍</span>\r\n+            </div>\r\n+            \r\n+            <div class=\"flex-1 space-y-4\">\r\n+                <div class=\"relative\">\r\n+                    <div class=\"flex justify-between mb-1\">\r\n+                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n+                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n+                            ${co2Offset.toFixed(1)} tons/year\r\n+                        </span>\r\n+                    </div>\r\n+                    <div class=\"w-full h-2 bg-green-100 rounded-full\">\r\n+                        <div id=\"co2-progress-bar\" \r\n+                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n+                             style=\"width: 0%\">\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+\r\n+                <div class=\"grid grid-cols-2 gap-3\">\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">🌳</div>\r\n+                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"trees-value\">0</span> trees\r\n+                        </div>\r\n+                    </div>\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">⚡</div>\r\n+                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"homes-value\">0</span> homes\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderQuickStats() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        icon: \"⚡\",\r\n+        id: \"daily-production\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Savings\",\r\n+        value: this.billData.estimatedAnnualSavings / 12,\r\n+        unit: \"PKR\",\r\n+        icon: \"💰\",\r\n+        id: \"monthly-savings\",\r\n+      },\r\n+      {\r\n+        label: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return `\r\n+        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n+            ${stats\r\n+              .map(\r\n+                (stat) => `\r\n+                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n+                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n+                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n+                        <span id=\"${stat.id}-value\">0</span>\r\n+                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n+                    </div>\r\n+                </div>\r\n+            `\r\n+              )\r\n+              .join(\"\")}\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderSystemDetails() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">System Details</h3>\r\n+            <div class=\"grid grid-cols-2 gap-3 flex-1\">\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Panels</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">\r\n+                        <span id=\"panels-value\">0</span>\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Roof Area</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">\r\n+                        <span id=\"area-value\">0</span> sq ft\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Warranty</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">25 years</div>\r\n+                </div>\r\n+                <div class=\"bg-white/50 rounded-lg p-3\">\r\n+                    <div class=\"text-sm text-gray-600\">Efficiency</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900\">21.5%</div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+  renderChartSections() {\r\n+    return `\r\n+        <!-- Energy Production Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"production-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Cost Savings Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"savings-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderKeyMetrics() {\r\n+    const metrics = [\r\n+      {\r\n+        title: \"Recommended System Size\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        unit: \"kW\",\r\n+        icon: \"⚡\",\r\n+        color: \"blue\",\r\n+        id: \"system-size\",\r\n+      },\r\n+      {\r\n+        title: \"Total Investment\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR\",\r\n+        icon: \"💰\",\r\n+        color: \"green\",\r\n+        id: \"total-cost\",\r\n+      },\r\n+      {\r\n+        title: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        color: \"purple\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return metrics\r\n+      .map(\r\n+        (metric) => `\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n+            <div class=\"flex justify-between items-start\">\r\n+                <div>\r\n+                    <p class=\"text-sm font-medium text-gray-500\">${\r\n+                      metric.title\r\n+                    }</p>\r\n+                    <div class=\"mt-1 flex items-baseline\">\r\n+                        ${\r\n+                          metric.prefix\r\n+                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n+                          metric.id\r\n+                        }-value\">0</span>\r\n+                        ${\r\n+                          metric.unit\r\n+                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n+                    <span class=\"text-xl\">${metric.icon}</span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderStatCards() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-yellow-50\",\r\n+        icon: \"⚡️\",\r\n+        id: \"daily-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Production\",\r\n+        value: this.billData.estimatedMonthlyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-blue-50\",\r\n+        icon: \"📊\",\r\n+        id: \"monthly-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Coverage\",\r\n+        value: this.billData.coveragePercentage,\r\n+        unit: \"%\",\r\n+        bg: \"bg-green-50\",\r\n+        icon: \"🎯\",\r\n+        id: \"coverage-value\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Efficiency\",\r\n+        value: \"21.5\",\r\n+        unit: \"%\",\r\n+        bg: \"bg-purple-50\",\r\n+        icon: \"⚙️\",\r\n+        id: \"efficiency-value\",\r\n+      },\r\n+    ];\r\n+\r\n+    return stats\r\n+      .map(\r\n+        (stat) => `\r\n+            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n+                <div class=\"flex items-center justify-between mb-2\">\r\n+                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n+                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n+                        ${stat.icon}\r\n+                    </span>\r\n+                </div>\r\n+                <p class=\"text-xl font-bold text-gray-900\">\r\n+                    <span id=\"${stat.id}\">0</span>\r\n+                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n+                </p>\r\n+            </div>\r\n+        `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  initializeProgressBars() {\r\n+    // System Size Progress Bar\r\n+    this.progressBars.systemSize = new ProgressBar.Line(\r\n+      \"#system-size-progress\",\r\n+      {\r\n+        color: \"#3B82F6\",\r\n+        trailColor: \"#E5E7EB\",\r\n+        trailWidth: 8,\r\n+        strokeWidth: 8,\r\n+        duration: 2000,\r\n+        easing: \"easeInOut\",\r\n+        from: { color: \"#93C5FD\" },\r\n+        to: { color: \"#3B82F6\" },\r\n+        step: (state, bar) => {\r\n+          bar.path.setAttribute(\"stroke\", state.color);\r\n+        },\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  initializeCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const years = 25; // Standard solar panel warranty period\r\n+    const yearlyLabels = Array.from(\r\n+      { length: years + 1 },\r\n+      (_, i) => `Year ${i}`\r\n+    );\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n+\r\n+    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n+      Math.round(yearlySavings * index)\r\n+    );\r\n+\r\n+    const investmentLine = yearlyLabels.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: yearlyLabels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"rgb(16, 185, 129)\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+            tension: 0,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                return `${\r\n+                  context.dataset.label\r\n+                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: function (value) {\r\n+                return \"PKR \" + value.toLocaleString();\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    // Generate monthly data\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    // Create chart with proper configuration\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"rgb(59, 130, 246)\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+            labels: {\r\n+              usePointStyle: true,\r\n+              padding: 20,\r\n+            },\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            displayColors: true,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                const label = context.dataset.label || \"\";\r\n+                const value = context.parsed.y || 0;\r\n+                return `${label}: ${value.toLocaleString()} kWh`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+              callback: function (value) {\r\n+                return value.toLocaleString() + \" kWh\";\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const seasonalFactors = {\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n+    };\r\n+\r\n+    const monthlyProduction = months.map((month, index) => {\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n+\r\n+      // Base production from system size\r\n+      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n+      return Math.round(baseProduction * factor);\r\n+    });\r\n+\r\n+    const monthlyConsumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+      labels: months,\r\n+      production: monthlyProduction,\r\n+      consumption: monthlyConsumption,\r\n+    };\r\n+  }\r\n+\r\n+  getSeasonalFactor(month) {\r\n+    const seasonalFactors = {\r\n+      Dec: 0.7,\r\n+      Jan: 0.7,\r\n+      Feb: 0.8,\r\n+      Mar: 0.9,\r\n+      Apr: 1.0,\r\n+      May: 1.1,\r\n+      Jun: 1.2,\r\n+      Jul: 1.2,\r\n+      Aug: 1.1,\r\n+      Sep: 1.0,\r\n+      Oct: 0.9,\r\n+      Nov: 0.8,\r\n+    };\r\n+    return seasonalFactors[month];\r\n+  }\r\n+\r\n+  initializeAnimations() {\r\n+    // Initial fade in animation for all cards\r\n+    gsap.from('.bento-card', {\r\n+        duration: 0.8,\r\n+        opacity: 0,\r\n+        y: 30,\r\n+        stagger: {\r\n+            amount: 0.8,\r\n+            from: \"random\"\r\n+        },\r\n+        ease: \"power3.out\"\r\n+    });\r\n+\r\n+    // Animate progress bars\r\n+    this.animateProgressBars();\r\n+\r\n+    // Start counters with slight delays\r\n+    this.animateCounters();\r\n+\r\n+    // Add hover animations\r\n+    this.initializeHoverEffects();\r\n+}\r\n+\r\n+animateProgressBars() {\r\n+    // CO2 Progress animation\r\n+    gsap.to('#co2-progress-bar', {\r\n+        width: '75%',\r\n+        duration: 1.5,\r\n+        delay: 0.5,\r\n+        ease: \"power2.out\"\r\n+    });\r\n+\r\n+    // System size progress animation\r\n+    if (this.progressBars['system-size-progress']) {\r\n+        this.progressBars['system-size-progress'].animate(0.8, {\r\n+            duration: 1500,\r\n+            easing: 'easeInOut'\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+animateCounters() {\r\n+    Object.values(this.countUps).forEach((counter, index) => {\r\n+        if (counter && !counter.error) {\r\n+            setTimeout(() => {\r\n+                counter.start();\r\n+            }, index * 200); // Staggered start\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+initializeHoverEffects() {\r\n+    document.querySelectorAll('.bento-card').forEach(card => {\r\n+        card.addEventListener('mouseenter', () => {\r\n+            gsap.to(card.querySelectorAll('.stat-value'), {\r\n+                scale: 1.05,\r\n+                duration: 0.3,\r\n+                ease: \"power2.out\"\r\n+            });\r\n+        });\r\n+\r\n+        card.addEventListener('mouseleave', () => {\r\n+            gsap.to(card.querySelectorAll('.stat-value'), {\r\n+                scale: 1,\r\n+                duration: 0.3,\r\n+                ease: \"power2.out\"\r\n+            });\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+  initializeCounters() {\r\n+    const counters = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n+    ];\r\n+\r\n+    counters.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n+\r\n+      const options = {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      };\r\n+\r\n+      const countUp = new CountUp(counter.id, counter.value, options);\r\n+      if (!countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    this.charts = {};\r\n+\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n+\r\n+    // Remove any event listeners if needed\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n+  }\r\n+\r\n+  handleResize = () => {\r\n+    // Debounced resize handler for chart responsiveness\r\n+    clearTimeout(this.resizeTimeout);\r\n+    this.resizeTimeout = setTimeout(() => {\r\n+      Object.values(this.charts).forEach((chart) => {\r\n+        if (chart) chart.resize();\r\n+      });\r\n+    }, 250);\r\n+  };\r\n+}\r\n"
                },
                {
                    "date": 1731675222233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,9 +385,8 @@\n       .join(\"\");\r\n   }\r\n \r\n   renderEnvironmentalImpact() {\r\n-    const treesEquivalent = Math.round(co2Offset * 40);\r\n \r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <div class=\"flex items-center justify-between mb-4\">\r\n@@ -1052,1060 +1051,4 @@\n       });\r\n     }, 250);\r\n   };\r\n }\r\n-import { gsap } from \"gsap\";\r\n-import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n-import Chart from \"chart.js/auto\";\r\n-import { CountUp } from \"countup.js\";\r\n-import ProgressBar from \"progressbar.js\";\r\n-\r\n-// QuoteResultPage.js\r\n-export class QuoteResultPage {\r\n-  constructor() {\r\n-    try {\r\n-      this.billData = getBillData();\r\n-      this.error = getError();\r\n-    } catch (error) {\r\n-      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n-      this.error = \"Failed to load bill data. Please try again.\";\r\n-    }\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  render() {\r\n-    const app = document.getElementById(\"app\");\r\n-    app.innerHTML = `\r\n-        <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n-            <!-- Header -->\r\n-            <div class=\"mb-8 flex justify-between items-center\">\r\n-                <div>\r\n-                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n-                </div>\r\n-                <button \r\n-                    onclick=\"window.router.push('/bill-review')\"\r\n-                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n-                >\r\n-                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n-                    </svg>\r\n-                    Back\r\n-                </button>\r\n-            </div>\r\n-\r\n-            <!-- Bento Grid Layout -->\r\n-            <div class=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 auto-rows-[120px]\">\r\n-                <!-- System Size Card - Tall -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:row-span-2\">\r\n-                    ${this.renderSystemSizeCard()}\r\n-                </div>\r\n-\r\n-                <!-- Cost Card - Wide -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n-                    ${this.renderCostCard()}\r\n-                </div>\r\n-\r\n-                <!-- Environmental Impact - Square -->\r\n-                <div class=\"rounded-xl bg-gradient-to-br from-green-50 to-emerald-50 p-6 shadow-sm row-span-2\">\r\n-                    ${this.renderEnvironmentalImpact()}\r\n-                </div>\r\n-\r\n-                <!-- Energy Production Chart - Wide & Tall -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2 md:row-span-2\">\r\n-                    <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n-                    <div class=\"h-[300px]\">\r\n-                        <canvas id=\"production-chart\"></canvas>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <!-- Quick Stats - Wide -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n-                    ${this.renderQuickStats()}\r\n-                </div>\r\n-\r\n-                <!-- Savings Timeline - Extra Wide & Tall -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-3 md:row-span-2\">\r\n-                    <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n-                    <div class=\"h-[300px]\">\r\n-                        <canvas id=\"savings-chart\"></canvas>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <!-- System Details - Square -->\r\n-                <div class=\"rounded-xl bg-gradient-to-br from-blue-50 to-indigo-50 p-6 shadow-sm\">\r\n-                    ${this.renderSystemDetails()}\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-\r\n-    requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n-    });\r\n-  }\r\n-\r\n-  renderSystemSizeCard() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n-                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n-                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n-                    </svg>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n-                    <span id=\"system-size-value\">0</span>\r\n-                    <span class=\"text-lg text-gray-500\">kW</span>\r\n-                </div>\r\n-                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n-            </div>\r\n-            <div id=\"system-size-progress\" class=\"mt-4 h-2\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderCostCard() {\r\n-    return `\r\n-        <div class=\"flex items-center justify-between h-full\">\r\n-            <div>\r\n-                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n-                <div class=\"text-3xl font-bold text-gray-900\">\r\n-                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n-                    <span id=\"total-cost-value\">0</span>\r\n-                </div>\r\n-                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n-                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n-                    </svg>\r\n-                    30% Tax Credit Available\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  initializeComponents() {\r\n-    this.initCharts();\r\n-    this.initCounters();\r\n-    this.initProgressBars();\r\n-    this.startAnimations();\r\n-  }\r\n-\r\n-  initCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initCounters() {\r\n-    const counterData = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counterData.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      });\r\n-\r\n-      if (!this.countUps[counter.id].error) {\r\n-        this.countUps[counter.id].start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  initProgressBars() {\r\n-    const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n-    progressBarElements.forEach((element) => {\r\n-      if (!element) return;\r\n-\r\n-      this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n-        strokeWidth: 4,\r\n-        easing: \"easeInOut\",\r\n-        duration: 1400,\r\n-        color: \"#3b82f6\",\r\n-        trailColor: \"#e5e7eb\",\r\n-        trailWidth: 4,\r\n-        svgStyle: { width: \"100%\", height: \"100%\" },\r\n-      });\r\n-\r\n-      this.progressBars[element.id].animate(0.75);\r\n-    });\r\n-  }\r\n-\r\n-  startAnimations() {\r\n-    gsap.fromTo(\r\n-      \".bg-white\",\r\n-      {\r\n-        opacity: 0,\r\n-        y: 20,\r\n-      },\r\n-      {\r\n-        opacity: 1,\r\n-        y: 0,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n-        ease: \"power2.out\",\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-\r\n-    // Destroy all progress bars\r\n-    Object.values(this.progressBars).forEach((progressBar) => {\r\n-      if (progressBar) progressBar.destroy();\r\n-    });\r\n-\r\n-    // Reset all counters\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp) countUp.reset();\r\n-    });\r\n-\r\n-    // Kill all GSAP animations\r\n-    gsap.killTweensOf(\"*\");\r\n-\r\n-    // Clear all objects\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  renderDetailsSections() {\r\n-    return `\r\n-        <!-- System Specifications -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n-            <div class=\"grid grid-cols-2 gap-4\">\r\n-                ${this.renderSpecificationDetails()}\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Environmental Impact -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n-            <div class=\"space-y-6\">\r\n-                ${this.renderEnvironmentalImpact()}\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  attachBaseStyles() {\r\n-    const style = document.createElement(\"style\");\r\n-    style.textContent = `\r\n-        .bento-card {\r\n-            transition: all 0.3s ease;\r\n-            position: relative;\r\n-            overflow: hidden;\r\n-        }\r\n-\r\n-        .bento-card:hover {\r\n-            transform: translateY(-2px);\r\n-            box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);\r\n-        }\r\n-\r\n-        .bento-card::after {\r\n-            content: '';\r\n-            position: absolute;\r\n-            top: 0;\r\n-            left: 0;\r\n-            right: 0;\r\n-            bottom: 0;\r\n-            border-radius: inherit;\r\n-            background: linear-gradient(\r\n-                120deg,\r\n-                transparent 20%,\r\n-                rgba(255, 255, 255, 0.1) 28%,\r\n-                transparent 40%\r\n-            );\r\n-            transform: translateX(-100%);\r\n-            transition: transform 0.7s ease;\r\n-        }\r\n-\r\n-        .bento-card:hover::after {\r\n-            transform: translateX(100%);\r\n-        }\r\n-\r\n-        .stat-value {\r\n-            transition: color 0.3s ease;\r\n-        }\r\n-\r\n-        .bento-card:hover .stat-value {\r\n-            color: #3b82f6;\r\n-        }\r\n-\r\n-        .chart-container {\r\n-            position: relative;\r\n-        }\r\n-\r\n-        .chart-container canvas {\r\n-            transition: transform 0.3s ease;\r\n-        }\r\n-\r\n-        .chart-container:hover canvas {\r\n-            transform: scale(1.02);\r\n-        }\r\n-\r\n-        .environmental-impact-card {\r\n-            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\r\n-        }\r\n-\r\n-        .savings-card {\r\n-            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\r\n-        }\r\n-    `;\r\n-    document.head.appendChild(style);\r\n-  }\r\n-\r\n-  renderSpecificationDetails() {\r\n-    const specs = [\r\n-      {\r\n-        label: \"Number of Panels\",\r\n-        value: this.billData.numberOfPanels,\r\n-        unit: \"panels\",\r\n-        icon: \"solar_power\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Wattage\",\r\n-        value: this.billData.panelWattage,\r\n-        unit: \"W\",\r\n-        icon: \"bolt\",\r\n-      },\r\n-      {\r\n-        label: \"Required Roof Area\",\r\n-        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n-        unit: \"sq ft\",\r\n-        icon: \"home\",\r\n-      },\r\n-      {\r\n-        label: \"Annual Production\",\r\n-        value: Math.round(this.billData.estimatedAnnualProduction),\r\n-        unit: \"kWh\",\r\n-        icon: \"power\",\r\n-      },\r\n-    ];\r\n-\r\n-    return specs\r\n-      .map(\r\n-        (spec) => `\r\n-        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n-            <div class=\"flex-shrink-0\">\r\n-                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n-                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n-                </span>\r\n-            </div>\r\n-            <div class=\"ml-4\">\r\n-                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n-                <p class=\"mt-1 text-sm text-gray-500\">\r\n-                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n-          spec.unit\r\n-        }\r\n-                </p>\r\n-            </div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderEnvironmentalImpact() {\r\n-    const co2Offset = this.calculateCO2Offset();\r\n-    const treesEquivalent = Math.round(co2Offset * 40);\r\n-\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n-                <span class=\"text-2xl\">🌍</span>\r\n-            </div>\r\n-            \r\n-            <div class=\"flex-1 space-y-4\">\r\n-                <div class=\"relative\">\r\n-                    <div class=\"flex justify-between mb-1\">\r\n-                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n-                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n-                            ${co2Offset.toFixed(1)} tons/year\r\n-                        </span>\r\n-                    </div>\r\n-                    <div class=\"w-full h-2 bg-green-100 rounded-full\">\r\n-                        <div id=\"co2-progress-bar\" \r\n-                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n-                             style=\"width: 0%\">\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <div class=\"grid grid-cols-2 gap-3\">\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">🌳</div>\r\n-                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"trees-value\">0</span> trees\r\n-                        </div>\r\n-                    </div>\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">⚡</div>\r\n-                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"homes-value\">0</span> homes\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderQuickStats() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        icon: \"⚡\",\r\n-        id: \"daily-production\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Savings\",\r\n-        value: this.billData.estimatedAnnualSavings / 12,\r\n-        unit: \"PKR\",\r\n-        icon: \"💰\",\r\n-        id: \"monthly-savings\",\r\n-      },\r\n-      {\r\n-        label: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return `\r\n-        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n-            ${stats\r\n-              .map(\r\n-                (stat) => `\r\n-                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n-                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n-                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n-                        <span id=\"${stat.id}-value\">0</span>\r\n-                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n-                    </div>\r\n-                </div>\r\n-            `\r\n-              )\r\n-              .join(\"\")}\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderSystemDetails() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">System Details</h3>\r\n-            <div class=\"grid grid-cols-2 gap-3 flex-1\">\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Panels</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">\r\n-                        <span id=\"panels-value\">0</span>\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Roof Area</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">\r\n-                        <span id=\"area-value\">0</span> sq ft\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Warranty</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">25 years</div>\r\n-                </div>\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Efficiency</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">21.5%</div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  renderChartSections() {\r\n-    return `\r\n-        <!-- Energy Production Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"production-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Cost Savings Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"savings-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderKeyMetrics() {\r\n-    const metrics = [\r\n-      {\r\n-        title: \"Recommended System Size\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        unit: \"kW\",\r\n-        icon: \"⚡\",\r\n-        color: \"blue\",\r\n-        id: \"system-size\",\r\n-      },\r\n-      {\r\n-        title: \"Total Investment\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR\",\r\n-        icon: \"💰\",\r\n-        color: \"green\",\r\n-        id: \"total-cost\",\r\n-      },\r\n-      {\r\n-        title: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        color: \"purple\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return metrics\r\n-      .map(\r\n-        (metric) => `\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n-            <div class=\"flex justify-between items-start\">\r\n-                <div>\r\n-                    <p class=\"text-sm font-medium text-gray-500\">${\r\n-                      metric.title\r\n-                    }</p>\r\n-                    <div class=\"mt-1 flex items-baseline\">\r\n-                        ${\r\n-                          metric.prefix\r\n-                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n-                          metric.id\r\n-                        }-value\">0</span>\r\n-                        ${\r\n-                          metric.unit\r\n-                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n-                    <span class=\"text-xl\">${metric.icon}</span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderStatCards() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-yellow-50\",\r\n-        icon: \"⚡️\",\r\n-        id: \"daily-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Production\",\r\n-        value: this.billData.estimatedMonthlyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-blue-50\",\r\n-        icon: \"📊\",\r\n-        id: \"monthly-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Coverage\",\r\n-        value: this.billData.coveragePercentage,\r\n-        unit: \"%\",\r\n-        bg: \"bg-green-50\",\r\n-        icon: \"🎯\",\r\n-        id: \"coverage-value\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Efficiency\",\r\n-        value: \"21.5\",\r\n-        unit: \"%\",\r\n-        bg: \"bg-purple-50\",\r\n-        icon: \"⚙️\",\r\n-        id: \"efficiency-value\",\r\n-      },\r\n-    ];\r\n-\r\n-    return stats\r\n-      .map(\r\n-        (stat) => `\r\n-            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n-                <div class=\"flex items-center justify-between mb-2\">\r\n-                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n-                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n-                        ${stat.icon}\r\n-                    </span>\r\n-                </div>\r\n-                <p class=\"text-xl font-bold text-gray-900\">\r\n-                    <span id=\"${stat.id}\">0</span>\r\n-                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n-                </p>\r\n-            </div>\r\n-        `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  initializeProgressBars() {\r\n-    // System Size Progress Bar\r\n-    this.progressBars.systemSize = new ProgressBar.Line(\r\n-      \"#system-size-progress\",\r\n-      {\r\n-        color: \"#3B82F6\",\r\n-        trailColor: \"#E5E7EB\",\r\n-        trailWidth: 8,\r\n-        strokeWidth: 8,\r\n-        duration: 2000,\r\n-        easing: \"easeInOut\",\r\n-        from: { color: \"#93C5FD\" },\r\n-        to: { color: \"#3B82F6\" },\r\n-        step: (state, bar) => {\r\n-          bar.path.setAttribute(\"stroke\", state.color);\r\n-        },\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  initializeCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initSavingsChart() {\r\n-    const ctx = document.getElementById(\"savings-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const years = 25; // Standard solar panel warranty period\r\n-    const yearlyLabels = Array.from(\r\n-      { length: years + 1 },\r\n-      (_, i) => `Year ${i}`\r\n-    );\r\n-    const systemCost = this.billData.estimatedSystemCost;\r\n-    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n-\r\n-    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n-      Math.round(yearlySavings * index)\r\n-    );\r\n-\r\n-    const investmentLine = yearlyLabels.map(() => systemCost);\r\n-\r\n-    this.charts.savings = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: yearlyLabels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Cumulative Savings\",\r\n-            data: cumulativeSavings,\r\n-            borderColor: \"rgb(16, 185, 129)\",\r\n-            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Initial Investment\",\r\n-            data: investmentLine,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            borderDash: [5, 5],\r\n-            fill: false,\r\n-            tension: 0,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                return `${\r\n-                  context.dataset.label\r\n-                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            ticks: {\r\n-              callback: function (value) {\r\n-                return \"PKR \" + value.toLocaleString();\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    // Generate monthly data\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n-\r\n-    // Create chart with proper configuration\r\n-    this.charts.production = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: monthlyData.labels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"rgb(59, 130, 246)\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-          {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-            labels: {\r\n-              usePointStyle: true,\r\n-              padding: 20,\r\n-            },\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            displayColors: true,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                const label = context.dataset.label || \"\";\r\n-                const value = context.parsed.y || 0;\r\n-                return `${label}: ${value.toLocaleString()} kWh`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: {\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-              callback: function (value) {\r\n-                return value.toLocaleString() + \" kWh\";\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  generateMonthlyProductionData() {\r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const seasonalFactors = {\r\n-      winter: 0.7,\r\n-      spring: 0.9,\r\n-      summer: 1.2,\r\n-      fall: 0.8,\r\n-    };\r\n-\r\n-    const monthlyProduction = months.map((month, index) => {\r\n-      let factor;\r\n-      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-      else if (index < 5) factor = seasonalFactors.spring;\r\n-      else if (index < 8) factor = seasonalFactors.summer;\r\n-      else factor = seasonalFactors.fall;\r\n-\r\n-      // Base production from system size\r\n-      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n-      return Math.round(baseProduction * factor);\r\n-    });\r\n-\r\n-    const monthlyConsumption = months.map(() =>\r\n-      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-      labels: months,\r\n-      production: monthlyProduction,\r\n-      consumption: monthlyConsumption,\r\n-    };\r\n-  }\r\n-\r\n-  getSeasonalFactor(month) {\r\n-    const seasonalFactors = {\r\n-      Dec: 0.7,\r\n-      Jan: 0.7,\r\n-      Feb: 0.8,\r\n-      Mar: 0.9,\r\n-      Apr: 1.0,\r\n-      May: 1.1,\r\n-      Jun: 1.2,\r\n-      Jul: 1.2,\r\n-      Aug: 1.1,\r\n-      Sep: 1.0,\r\n-      Oct: 0.9,\r\n-      Nov: 0.8,\r\n-    };\r\n-    return seasonalFactors[month];\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    // Initial fade in animation for all cards\r\n-    gsap.from('.bento-card', {\r\n-        duration: 0.8,\r\n-        opacity: 0,\r\n-        y: 30,\r\n-        stagger: {\r\n-            amount: 0.8,\r\n-            from: \"random\"\r\n-        },\r\n-        ease: \"power3.out\"\r\n-    });\r\n-\r\n-    // Animate progress bars\r\n-    this.animateProgressBars();\r\n-\r\n-    // Start counters with slight delays\r\n-    this.animateCounters();\r\n-\r\n-    // Add hover animations\r\n-    this.initializeHoverEffects();\r\n-}\r\n-\r\n-animateProgressBars() {\r\n-    // CO2 Progress animation\r\n-    gsap.to('#co2-progress-bar', {\r\n-        width: '75%',\r\n-        duration: 1.5,\r\n-        delay: 0.5,\r\n-        ease: \"power2.out\"\r\n-    });\r\n-\r\n-    // System size progress animation\r\n-    if (this.progressBars['system-size-progress']) {\r\n-        this.progressBars['system-size-progress'].animate(0.8, {\r\n-            duration: 1500,\r\n-            easing: 'easeInOut'\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-animateCounters() {\r\n-    Object.values(this.countUps).forEach((counter, index) => {\r\n-        if (counter && !counter.error) {\r\n-            setTimeout(() => {\r\n-                counter.start();\r\n-            }, index * 200); // Staggered start\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-initializeHoverEffects() {\r\n-    document.querySelectorAll('.bento-card').forEach(card => {\r\n-        card.addEventListener('mouseenter', () => {\r\n-            gsap.to(card.querySelectorAll('.stat-value'), {\r\n-                scale: 1.05,\r\n-                duration: 0.3,\r\n-                ease: \"power2.out\"\r\n-            });\r\n-        });\r\n-\r\n-        card.addEventListener('mouseleave', () => {\r\n-            gsap.to(card.querySelectorAll('.stat-value'), {\r\n-                scale: 1,\r\n-                duration: 0.3,\r\n-                ease: \"power2.out\"\r\n-            });\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-  initializeCounters() {\r\n-    const counters = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counters.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      const options = {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      };\r\n-\r\n-      const countUp = new CountUp(counter.id, counter.value, options);\r\n-      if (!countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-    this.charts = {};\r\n-\r\n-    // Kill all GSAP animations\r\n-    gsap.killTweensOf(\"*\");\r\n-\r\n-    // Remove any event listeners if needed\r\n-    window.removeEventListener(\"resize\", this.handleResize);\r\n-  }\r\n-\r\n-  handleResize = () => {\r\n-    // Debounced resize handler for chart responsiveness\r\n-    clearTimeout(this.resizeTimeout);\r\n-    this.resizeTimeout = setTimeout(() => {\r\n-      Object.values(this.charts).forEach((chart) => {\r\n-        if (chart) chart.resize();\r\n-      });\r\n-    }, 250);\r\n-  };\r\n-}\r\n"
                },
                {
                    "date": 1731675235858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,14 +395,9 @@\n             </div>\r\n             \r\n             <div class=\"flex-1 space-y-4\">\r\n                 <div class=\"relative\">\r\n-                    <div class=\"flex justify-between mb-1\">\r\n-                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n-                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n-                            ${co2Offset.toFixed(1)} tons/year\r\n-                        </span>\r\n-                    </div>\r\n+                    \r\n                     <div class=\"w-full h-2 bg-green-100 rounded-full\">\r\n                         <div id=\"co2-progress-bar\" \r\n                              class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n                              style=\"width: 0%\">\r\n"
                },
                {
                    "date": 1731675410570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1045,5 +1045,339 @@\n         if (chart) chart.resize();\r\n       });\r\n     }, 250);\r\n   };\r\n+\r\n+\r\n+  renderCostCard() {\r\n+    return `\r\n+        <div class=\"flex items-center justify-between h-full\">\r\n+            <div>\r\n+                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n+                <div class=\"text-3xl font-bold text-gray-900\">\r\n+                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n+                    <span id=\"total-cost-value\" class=\"stat-value\">0</span>\r\n+                </div>\r\n+                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n+                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n+        </div>\r\n+    `;\r\n }\r\n+\r\n+renderEnvironmentalImpact() {\r\n+    const co2Offset = this.calculateCO2Offset();\r\n+    const treesEquivalent = Math.round(co2Offset * 40);\r\n+    \r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n+                <span class=\"text-2xl\">🌍</span>\r\n+            </div>\r\n+            \r\n+            <div class=\"flex-1 space-y-4\">\r\n+                <div class=\"relative\">\r\n+                    <div class=\"flex justify-between mb-1\">\r\n+                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n+                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n+                            ${co2Offset.toFixed(1)} tons/year\r\n+                        </span>\r\n+                    </div>\r\n+                    <div class=\"w-full h-2 bg-green-100 rounded-full overflow-hidden\">\r\n+                        <div id=\"co2-progress-bar\" \r\n+                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n+                             style=\"width: 0%\">\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+\r\n+                <div class=\"grid grid-cols-2 gap-3\">\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">🌳</div>\r\n+                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"trees-value\" class=\"stat-value\">0</span> trees\r\n+                        </div>\r\n+                    </div>\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">⚡</div>\r\n+                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"homes-value\" class=\"stat-value\">0</span> homes\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+}\r\n+\r\n+renderQuickStats() {\r\n+    const stats = [\r\n+        {\r\n+            label: \"Daily Production\",\r\n+            value: this.billData.estimatedDailyProduction,\r\n+            unit: \"kWh\",\r\n+            icon: \"⚡\",\r\n+            id: \"daily-production\"\r\n+        },\r\n+        {\r\n+            label: \"Monthly Savings\",\r\n+            value: this.billData.estimatedAnnualSavings / 12,\r\n+            unit: \"PKR\",\r\n+            icon: \"💰\",\r\n+            id: \"monthly-savings\"\r\n+        },\r\n+        {\r\n+            label: \"Payback Period\",\r\n+            value: this.billData.estimatedPaybackPeriod,\r\n+            unit: \"years\",\r\n+            icon: \"⏱️\",\r\n+            id: \"payback-period\"\r\n+        }\r\n+    ];\r\n+\r\n+    return `\r\n+        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n+            ${stats.map(stat => `\r\n+                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n+                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n+                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n+                        <span id=\"${stat.id}-value\" class=\"stat-value\">0</span>\r\n+                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n+                    </div>\r\n+                </div>\r\n+            `).join('')}\r\n+        </div>\r\n+    `;\r\n+}\r\n+\r\n+initializeComponents() {\r\n+    this.initCharts();\r\n+    this.initCounters();\r\n+    this.initProgressBars();\r\n+    this.initializeAnimations();\r\n+}\r\n+\r\n+initCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+}\r\n+\r\n+initProductionChart() {\r\n+    const ctx = document.getElementById('production-chart');\r\n+    if (!ctx) return;\r\n+\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    this.charts.production = new Chart(ctx, {\r\n+        type: 'line',\r\n+        data: {\r\n+            labels: monthlyData.labels,\r\n+            datasets: [\r\n+                {\r\n+                    label: 'Solar Production',\r\n+                    data: monthlyData.production,\r\n+                    borderColor: '#3b82f6',\r\n+                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n+                    fill: true,\r\n+                    tension: 0.4\r\n+                },\r\n+                {\r\n+                    label: 'Energy Consumption',\r\n+                    data: monthlyData.consumption,\r\n+                    borderColor: '#ef4444',\r\n+                    backgroundColor: 'rgba(239, 68, 68, 0.1)',\r\n+                    fill: true,\r\n+                    tension: 0.4\r\n+                }\r\n+            ]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            interaction: {\r\n+                mode: 'index',\r\n+                intersect: false,\r\n+            },\r\n+            plugins: {\r\n+                legend: {\r\n+                    position: 'top',\r\n+                },\r\n+                tooltip: {\r\n+                    backgroundColor: 'white',\r\n+                    titleColor: '#1f2937',\r\n+                    bodyColor: '#4b5563',\r\n+                    borderColor: '#e5e7eb',\r\n+                    borderWidth: 1,\r\n+                    padding: 12,\r\n+                    usePointStyle: true\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                y: {\r\n+                    beginAtZero: true,\r\n+                    grid: {\r\n+                        display: true,\r\n+                        color: 'rgba(0, 0, 0, 0.05)'\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+initSavingsChart() {\r\n+    const ctx = document.getElementById('savings-chart');\r\n+    if (!ctx) return;\r\n+\r\n+    const years = Array.from({length: 26}, (_, i) => `Year ${i}`);\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const annualSavings = this.billData.estimatedAnnualSavings;\r\n+\r\n+    const cumulativeSavings = years.map((_, i) => i * annualSavings);\r\n+    const investmentLine = years.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n+        type: 'line',\r\n+        data: {\r\n+            labels: years,\r\n+            datasets: [\r\n+                {\r\n+                    label: 'Cumulative Savings',\r\n+                    data: cumulativeSavings,\r\n+                    borderColor: '#10b981',\r\n+                    backgroundColor: 'rgba(16, 185, 129, 0.1)',\r\n+                    fill: true,\r\n+                    tension: 0.4\r\n+                },\r\n+                {\r\n+                    label: 'Initial Investment',\r\n+                    data: investmentLine,\r\n+                    borderColor: '#ef4444',\r\n+                    borderDash: [5, 5],\r\n+                    fill: false\r\n+                }\r\n+            ]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: {\r\n+                legend: {\r\n+                    position: 'top'\r\n+                },\r\n+                tooltip: {\r\n+                    backgroundColor: 'white',\r\n+                    titleColor: '#1f2937',\r\n+                    bodyColor: '#4b5563',\r\n+                    borderColor: '#e5e7eb',\r\n+                    borderWidth: 1,\r\n+                    padding: 12\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                y: {\r\n+                    beginAtZero: true,\r\n+                    ticks: {\r\n+                        callback: value => `PKR ${value.toLocaleString()}`\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+generateMonthlyProductionData() {\r\n+    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n+    const seasonalFactors = {\r\n+        winter: 0.7,\r\n+        spring: 0.9,\r\n+        summer: 1.2,\r\n+        fall: 0.8\r\n+    };\r\n+\r\n+    const production = months.map((_, index) => {\r\n+        let factor;\r\n+        if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+        else if (index < 5) factor = seasonalFactors.spring;\r\n+        else if (index < 8) factor = seasonalFactors.summer;\r\n+        else factor = seasonalFactors.fall;\r\n+\r\n+        return Math.round(this.billData.estimatedDailyProduction * 30 * factor);\r\n+    });\r\n+\r\n+    const consumption = months.map(() => \r\n+        Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+        labels: months,\r\n+        production,\r\n+        consumption\r\n+    };\r\n+}\r\n+\r\n+calculateCO2Offset() {\r\n+    return this.billData.estimatedAnnualProduction * 0.0007; // tons CO2 per kWh\r\n+}\r\n+\r\n+initializeAnimations() {\r\n+    gsap.from('.bento-card', {\r\n+        duration: 0.8,\r\n+        opacity: 0,\r\n+        y: 30,\r\n+        stagger: {\r\n+            amount: 0.8,\r\n+            from: \"random\"\r\n+        },\r\n+        ease: \"power3.out\"\r\n+    });\r\n+\r\n+    gsap.to('#co2-progress-bar', {\r\n+        width: '75%',\r\n+        duration: 1.5,\r\n+        delay: 0.5,\r\n+        ease: \"power2.out\"\r\n+    });\r\n+\r\n+    this.initializeHoverEffects();\r\n+}\r\n+\r\n+initializeHoverEffects() {\r\n+    document.querySelectorAll('.bento-card').forEach(card => {\r\n+        card.addEventListener('mouseenter', () => {\r\n+            gsap.to(card.querySelectorAll('.stat-value'), {\r\n+                scale: 1.05,\r\n+                duration: 0.3,\r\n+                ease: \"power2.out\"\r\n+            });\r\n+        });\r\n+\r\n+        card.addEventListener('mouseleave', () => {\r\n+            gsap.to(card.querySelectorAll('.stat-value'), {\r\n+                scale: 1,\r\n+                duration: 0.3,\r\n+                ease: \"power2.out\"\r\n+            });\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+cleanup() {\r\n+    Object.values(this.charts).forEach(chart => {\r\n+        if (chart) chart.destroy();\r\n+    });\r\n+    gsap.killTweensOf(\"*\");\r\n+    document.querySelectorAll('.bento-card').forEach(card => {\r\n+        card.removeEventListener('mouseenter', () => {});\r\n+        card.removeEventListener('mouseleave', () => {});\r\n+    });\r\n+}\r\n+}\r\n"
                },
                {
                    "date": 1731675448483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,9 +385,8 @@\n       .join(\"\");\r\n   }\r\n \r\n   renderEnvironmentalImpact() {\r\n-\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <div class=\"flex items-center justify-between mb-4\">\r\n                 <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n@@ -911,17 +910,17 @@\n   }\r\n \r\n   initializeAnimations() {\r\n     // Initial fade in animation for all cards\r\n-    gsap.from('.bento-card', {\r\n-        duration: 0.8,\r\n-        opacity: 0,\r\n-        y: 30,\r\n-        stagger: {\r\n-            amount: 0.8,\r\n-            from: \"random\"\r\n-        },\r\n-        ease: \"power3.out\"\r\n+    gsap.from(\".bento-card\", {\r\n+      duration: 0.8,\r\n+      opacity: 0,\r\n+      y: 30,\r\n+      stagger: {\r\n+        amount: 0.8,\r\n+        from: \"random\",\r\n+      },\r\n+      ease: \"power3.out\",\r\n     });\r\n \r\n     // Animate progress bars\r\n     this.animateProgressBars();\r\n@@ -930,57 +929,57 @@\n     this.animateCounters();\r\n \r\n     // Add hover animations\r\n     this.initializeHoverEffects();\r\n-}\r\n+  }\r\n \r\n-animateProgressBars() {\r\n+  animateProgressBars() {\r\n     // CO2 Progress animation\r\n-    gsap.to('#co2-progress-bar', {\r\n-        width: '75%',\r\n-        duration: 1.5,\r\n-        delay: 0.5,\r\n-        ease: \"power2.out\"\r\n+    gsap.to(\"#co2-progress-bar\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      delay: 0.5,\r\n+      ease: \"power2.out\",\r\n     });\r\n \r\n     // System size progress animation\r\n-    if (this.progressBars['system-size-progress']) {\r\n-        this.progressBars['system-size-progress'].animate(0.8, {\r\n-            duration: 1500,\r\n-            easing: 'easeInOut'\r\n-        });\r\n+    if (this.progressBars[\"system-size-progress\"]) {\r\n+      this.progressBars[\"system-size-progress\"].animate(0.8, {\r\n+        duration: 1500,\r\n+        easing: \"easeInOut\",\r\n+      });\r\n     }\r\n-}\r\n+  }\r\n \r\n-animateCounters() {\r\n+  animateCounters() {\r\n     Object.values(this.countUps).forEach((counter, index) => {\r\n-        if (counter && !counter.error) {\r\n-            setTimeout(() => {\r\n-                counter.start();\r\n-            }, index * 200); // Staggered start\r\n-        }\r\n+      if (counter && !counter.error) {\r\n+        setTimeout(() => {\r\n+          counter.start();\r\n+        }, index * 200); // Staggered start\r\n+      }\r\n     });\r\n-}\r\n+  }\r\n \r\n-initializeHoverEffects() {\r\n-    document.querySelectorAll('.bento-card').forEach(card => {\r\n-        card.addEventListener('mouseenter', () => {\r\n-            gsap.to(card.querySelectorAll('.stat-value'), {\r\n-                scale: 1.05,\r\n-                duration: 0.3,\r\n-                ease: \"power2.out\"\r\n-            });\r\n+  initializeHoverEffects() {\r\n+    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n+      card.addEventListener(\"mouseenter\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1.05,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n         });\r\n+      });\r\n \r\n-        card.addEventListener('mouseleave', () => {\r\n-            gsap.to(card.querySelectorAll('.stat-value'), {\r\n-                scale: 1,\r\n-                duration: 0.3,\r\n-                ease: \"power2.out\"\r\n-            });\r\n+      card.addEventListener(\"mouseleave\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n         });\r\n+      });\r\n     });\r\n-}\r\n+  }\r\n \r\n   initializeCounters() {\r\n     const counters = [\r\n       {\r\n@@ -1046,9 +1045,8 @@\n       });\r\n     }, 250);\r\n   };\r\n \r\n-\r\n   renderCostCard() {\r\n     return `\r\n         <div class=\"flex items-center justify-between h-full\">\r\n             <div>\r\n@@ -1066,14 +1064,14 @@\n             </div>\r\n             <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderEnvironmentalImpact() {\r\n+  renderEnvironmentalImpact() {\r\n     const co2Offset = this.calculateCO2Offset();\r\n     const treesEquivalent = Math.round(co2Offset * 40);\r\n-    \r\n+\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <div class=\"flex items-center justify-between mb-4\">\r\n                 <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n@@ -1114,270 +1112,287 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderQuickStats() {\r\n+  renderQuickStats() {\r\n     const stats = [\r\n-        {\r\n-            label: \"Daily Production\",\r\n-            value: this.billData.estimatedDailyProduction,\r\n-            unit: \"kWh\",\r\n-            icon: \"⚡\",\r\n-            id: \"daily-production\"\r\n-        },\r\n-        {\r\n-            label: \"Monthly Savings\",\r\n-            value: this.billData.estimatedAnnualSavings / 12,\r\n-            unit: \"PKR\",\r\n-            icon: \"💰\",\r\n-            id: \"monthly-savings\"\r\n-        },\r\n-        {\r\n-            label: \"Payback Period\",\r\n-            value: this.billData.estimatedPaybackPeriod,\r\n-            unit: \"years\",\r\n-            icon: \"⏱️\",\r\n-            id: \"payback-period\"\r\n-        }\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        icon: \"⚡\",\r\n+        id: \"daily-production\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Savings\",\r\n+        value: this.billData.estimatedAnnualSavings / 12,\r\n+        unit: \"PKR\",\r\n+        icon: \"💰\",\r\n+        id: \"monthly-savings\",\r\n+      },\r\n+      {\r\n+        label: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        id: \"payback-period\",\r\n+      },\r\n     ];\r\n \r\n     return `\r\n         <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n-            ${stats.map(stat => `\r\n+            ${stats\r\n+              .map(\r\n+                (stat) => `\r\n                 <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n                     <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n                     <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n                     <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n                         <span id=\"${stat.id}-value\" class=\"stat-value\">0</span>\r\n                         <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n                     </div>\r\n                 </div>\r\n-            `).join('')}\r\n+            `\r\n+              )\r\n+              .join(\"\")}\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-initializeComponents() {\r\n+  initializeComponents() {\r\n     this.initCharts();\r\n     this.initCounters();\r\n     this.initProgressBars();\r\n     this.initializeAnimations();\r\n-}\r\n+  }\r\n \r\n-initCharts() {\r\n+  initCharts() {\r\n     this.initProductionChart();\r\n     this.initSavingsChart();\r\n-}\r\n+  }\r\n \r\n-initProductionChart() {\r\n-    const ctx = document.getElementById('production-chart');\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n     if (!ctx) return;\r\n \r\n     const monthlyData = this.generateMonthlyProductionData();\r\n \r\n     this.charts.production = new Chart(ctx, {\r\n-        type: 'line',\r\n-        data: {\r\n-            labels: monthlyData.labels,\r\n-            datasets: [\r\n-                {\r\n-                    label: 'Solar Production',\r\n-                    data: monthlyData.production,\r\n-                    borderColor: '#3b82f6',\r\n-                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n-                    fill: true,\r\n-                    tension: 0.4\r\n-                },\r\n-                {\r\n-                    label: 'Energy Consumption',\r\n-                    data: monthlyData.consumption,\r\n-                    borderColor: '#ef4444',\r\n-                    backgroundColor: 'rgba(239, 68, 68, 0.1)',\r\n-                    fill: true,\r\n-                    tension: 0.4\r\n-                }\r\n-            ]\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"#3b82f6\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"#ef4444\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n         },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            interaction: {\r\n-                mode: 'index',\r\n-                intersect: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            usePointStyle: true,\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              display: true,\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n             },\r\n-            plugins: {\r\n-                legend: {\r\n-                    position: 'top',\r\n-                },\r\n-                tooltip: {\r\n-                    backgroundColor: 'white',\r\n-                    titleColor: '#1f2937',\r\n-                    bodyColor: '#4b5563',\r\n-                    borderColor: '#e5e7eb',\r\n-                    borderWidth: 1,\r\n-                    padding: 12,\r\n-                    usePointStyle: true\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                y: {\r\n-                    beginAtZero: true,\r\n-                    grid: {\r\n-                        display: true,\r\n-                        color: 'rgba(0, 0, 0, 0.05)'\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n+          },\r\n+        },\r\n+      },\r\n     });\r\n-}\r\n+  }\r\n \r\n-initSavingsChart() {\r\n-    const ctx = document.getElementById('savings-chart');\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n     if (!ctx) return;\r\n \r\n-    const years = Array.from({length: 26}, (_, i) => `Year ${i}`);\r\n+    const years = Array.from({ length: 26 }, (_, i) => `Year ${i}`);\r\n     const systemCost = this.billData.estimatedSystemCost;\r\n     const annualSavings = this.billData.estimatedAnnualSavings;\r\n \r\n     const cumulativeSavings = years.map((_, i) => i * annualSavings);\r\n     const investmentLine = years.map(() => systemCost);\r\n \r\n     this.charts.savings = new Chart(ctx, {\r\n-        type: 'line',\r\n-        data: {\r\n-            labels: years,\r\n-            datasets: [\r\n-                {\r\n-                    label: 'Cumulative Savings',\r\n-                    data: cumulativeSavings,\r\n-                    borderColor: '#10b981',\r\n-                    backgroundColor: 'rgba(16, 185, 129, 0.1)',\r\n-                    fill: true,\r\n-                    tension: 0.4\r\n-                },\r\n-                {\r\n-                    label: 'Initial Investment',\r\n-                    data: investmentLine,\r\n-                    borderColor: '#ef4444',\r\n-                    borderDash: [5, 5],\r\n-                    fill: false\r\n-                }\r\n-            ]\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: years,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"#10b981\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n+            borderColor: \"#ef4444\",\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+          },\r\n         },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: {\r\n-                legend: {\r\n-                    position: 'top'\r\n-                },\r\n-                tooltip: {\r\n-                    backgroundColor: 'white',\r\n-                    titleColor: '#1f2937',\r\n-                    bodyColor: '#4b5563',\r\n-                    borderColor: '#e5e7eb',\r\n-                    borderWidth: 1,\r\n-                    padding: 12\r\n-                }\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: (value) => `PKR ${value.toLocaleString()}`,\r\n             },\r\n-            scales: {\r\n-                y: {\r\n-                    beginAtZero: true,\r\n-                    ticks: {\r\n-                        callback: value => `PKR ${value.toLocaleString()}`\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n+          },\r\n+        },\r\n+      },\r\n     });\r\n-}\r\n+  }\r\n \r\n-generateMonthlyProductionData() {\r\n-    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n     const seasonalFactors = {\r\n-        winter: 0.7,\r\n-        spring: 0.9,\r\n-        summer: 1.2,\r\n-        fall: 0.8\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n     };\r\n \r\n     const production = months.map((_, index) => {\r\n-        let factor;\r\n-        if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-        else if (index < 5) factor = seasonalFactors.spring;\r\n-        else if (index < 8) factor = seasonalFactors.summer;\r\n-        else factor = seasonalFactors.fall;\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n \r\n-        return Math.round(this.billData.estimatedDailyProduction * 30 * factor);\r\n+      return Math.round(this.billData.estimatedDailyProduction * 30 * factor);\r\n     });\r\n \r\n-    const consumption = months.map(() => \r\n-        Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    const consumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n     );\r\n \r\n     return {\r\n-        labels: months,\r\n-        production,\r\n-        consumption\r\n+      labels: months,\r\n+      production,\r\n+      consumption,\r\n     };\r\n-}\r\n+  }\r\n \r\n-calculateCO2Offset() {\r\n+  calculateCO2Offset() {\r\n     return this.billData.estimatedAnnualProduction * 0.0007; // tons CO2 per kWh\r\n-}\r\n+  }\r\n \r\n-initializeAnimations() {\r\n-    gsap.from('.bento-card', {\r\n-        duration: 0.8,\r\n-        opacity: 0,\r\n-        y: 30,\r\n-        stagger: {\r\n-            amount: 0.8,\r\n-            from: \"random\"\r\n-        },\r\n-        ease: \"power3.out\"\r\n+  initializeAnimations() {\r\n+    gsap.from(\".bento-card\", {\r\n+      duration: 0.8,\r\n+      opacity: 0,\r\n+      y: 30,\r\n+      stagger: {\r\n+        amount: 0.8,\r\n+        from: \"random\",\r\n+      },\r\n+      ease: \"power3.out\",\r\n     });\r\n \r\n-    gsap.to('#co2-progress-bar', {\r\n-        width: '75%',\r\n-        duration: 1.5,\r\n-        delay: 0.5,\r\n-        ease: \"power2.out\"\r\n+    gsap.to(\"#co2-progress-bar\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      delay: 0.5,\r\n+      ease: \"power2.out\",\r\n     });\r\n \r\n     this.initializeHoverEffects();\r\n-}\r\n+  }\r\n \r\n-initializeHoverEffects() {\r\n-    document.querySelectorAll('.bento-card').forEach(card => {\r\n-        card.addEventListener('mouseenter', () => {\r\n-            gsap.to(card.querySelectorAll('.stat-value'), {\r\n-                scale: 1.05,\r\n-                duration: 0.3,\r\n-                ease: \"power2.out\"\r\n-            });\r\n+  initializeHoverEffects() {\r\n+    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n+      card.addEventListener(\"mouseenter\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1.05,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n         });\r\n+      });\r\n \r\n-        card.addEventListener('mouseleave', () => {\r\n-            gsap.to(card.querySelectorAll('.stat-value'), {\r\n-                scale: 1,\r\n-                duration: 0.3,\r\n-                ease: \"power2.out\"\r\n-            });\r\n+      card.addEventListener(\"mouseleave\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n         });\r\n+      });\r\n     });\r\n-}\r\n+  }\r\n \r\n-cleanup() {\r\n-    Object.values(this.charts).forEach(chart => {\r\n-        if (chart) chart.destroy();\r\n+  cleanup() {\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n     });\r\n     gsap.killTweensOf(\"*\");\r\n-    document.querySelectorAll('.bento-card').forEach(card => {\r\n-        card.removeEventListener('mouseenter', () => {});\r\n-        card.removeEventListener('mouseleave', () => {});\r\n+    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n+      card.removeEventListener(\"mouseenter\", () => {});\r\n+      card.removeEventListener(\"mouseleave\", () => {});\r\n     });\r\n+  }\r\n }\r\n-}\r\n"
                },
                {
                    "date": 1731675833674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,79 +19,141 @@\n     this.countUps = {};\r\n   }\r\n \r\n   render() {\r\n-    const app = document.getElementById(\"app\");\r\n-    app.innerHTML = `\r\n-        <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n-            <!-- Header -->\r\n-            <div class=\"mb-8 flex justify-between items-center\">\r\n-                <div>\r\n-                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n-                </div>\r\n-                <button \r\n-                    onclick=\"window.router.push('/bill-review')\"\r\n-                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n-                >\r\n-                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n-                    </svg>\r\n-                    Back\r\n-                </button>\r\n-            </div>\r\n+    return `\r\n+        <div class=\"relative max-w-[1136px] mx-auto p-8 min-h-[836px]\">\r\n+            <div class=\"flex gap-6\">\r\n+                <!-- Main Content Area -->\r\n+                <div class=\"flex-1 flex flex-col gap-6\">\r\n+                    <!-- Top Row -->\r\n+                    <div class=\"flex gap-6\">\r\n+                        <!-- System Size & Cost Overview -->\r\n+                        <div class=\"flex flex-col gap-6 w-[325px]\">\r\n+                            <div class=\"bg-white rounded-2xl p-6 h-[183px] flex flex-col justify-between\">\r\n+                                <div class=\"flex items-center justify-between mb-4\">\r\n+                                    <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n+                                    <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                                        <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                                        </svg>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div id=\"system-size-progress\"></div>\r\n+                            </div>\r\n+                            \r\n+                            <!-- Quick Stats Card -->\r\n+                            <div class=\"bg-white rounded-2xl p-6\">\r\n+                                ${this.renderQuickStats()}\r\n+                            </div>\r\n+                        </div>\r\n+                        \r\n+                        <!-- Energy Production Chart -->\r\n+                        <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n+                            <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                            <div class=\"h-[calc(100%-2rem)]\">\r\n+                                <canvas id=\"production-chart\"></canvas>\r\n+                            </div>\r\n+                        </div>\r\n+                    </div>\r\n \r\n-            <!-- Bento Grid Layout -->\r\n-            <div class=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 auto-rows-[120px]\">\r\n-                <!-- System Size Card - Tall -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:row-span-2\">\r\n-                    ${this.renderSystemSizeCard()}\r\n+                    <!-- Bottom Row -->\r\n+                    <div class=\"flex gap-6\">\r\n+                        <!-- Savings Timeline Chart -->\r\n+                        <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n+                            <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                            <div class=\"h-[calc(100%-2rem)]\">\r\n+                                <canvas id=\"savings-chart\"></canvas>\r\n+                            </div>\r\n+                        </div>\r\n+                        \r\n+                        <!-- Environmental Impact -->\r\n+                        <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n+                            ${this.renderEnvironmentalImpact()}\r\n+                        </div>\r\n+                    </div>\r\n                 </div>\r\n \r\n-                <!-- Cost Card - Wide -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n-                    ${this.renderCostCard()}\r\n+                <!-- Sidebar -->\r\n+                <div class=\"w-[324px] flex flex-col gap-6\">\r\n+                    <!-- Monthly Production Analysis -->\r\n+                    <div class=\"h-[384px] bg-white rounded-2xl p-6\">\r\n+                        <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n+                        <div class=\"h-[calc(100%-2rem)]\">\r\n+                            <canvas id=\"monthly-production-chart\"></canvas>\r\n+                        </div>\r\n+                    </div>\r\n+                    \r\n+                    <!-- Cost Analysis -->\r\n+                    <div class=\"flex-1 bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n+                        ${this.renderCostAnalysis()}\r\n+                    </div>\r\n                 </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+}\r\n \r\n-                <!-- Environmental Impact - Square -->\r\n-                <div class=\"rounded-xl bg-gradient-to-br from-green-50 to-emerald-50 p-6 shadow-sm row-span-2\">\r\n-                    ${this.renderEnvironmentalImpact()}\r\n-                </div>\r\n+renderQuickStats() {\r\n+    return `\r\n+        <div class=\"grid grid-cols-2 gap-4\">\r\n+            <div class=\"text-center\">\r\n+                <div class=\"text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n+                <div class=\"text-sm text-gray-600\">Daily kWh</div>\r\n+            </div>\r\n+            <div class=\"text-center\">\r\n+                <div class=\"text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n+                <div class=\"text-sm text-gray-600\">Monthly PKR</div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+}\r\n \r\n-                <!-- Energy Production Chart - Wide & Tall -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2 md:row-span-2\">\r\n-                    <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n-                    <div class=\"h-[300px]\">\r\n-                        <canvas id=\"production-chart\"></canvas>\r\n+renderEnvironmentalImpact() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <h3 class=\"text-lg font-semibold mb-4\">Environmental Impact</h3>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"mb-6\">\r\n+                    <div class=\"text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n+                    <div class=\"text-3xl font-bold\" id=\"co2-value\">0</div>\r\n+                    <div class=\"w-full bg-white/20 h-2 rounded-full mt-2\">\r\n+                        <div class=\"bg-white h-full rounded-full\" style=\"width: 75%\"></div>\r\n                     </div>\r\n                 </div>\r\n-\r\n-                <!-- Quick Stats - Wide -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-2\">\r\n-                    ${this.renderQuickStats()}\r\n-                </div>\r\n-\r\n-                <!-- Savings Timeline - Extra Wide & Tall -->\r\n-                <div class=\"rounded-xl bg-white p-6 shadow-sm md:col-span-3 md:row-span-2\">\r\n-                    <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n-                    <div class=\"h-[300px]\">\r\n-                        <canvas id=\"savings-chart\"></canvas>\r\n+                <div class=\"grid grid-cols-2 gap-4\">\r\n+                    <div>\r\n+                        <div class=\"text-sm opacity-80\">Trees Equivalent</div>\r\n+                        <div class=\"text-2xl font-bold\" id=\"trees-value\">0</div>\r\n                     </div>\r\n+                    <div>\r\n+                        <div class=\"text-sm opacity-80\">Energy for Homes</div>\r\n+                        <div class=\"text-2xl font-bold\" id=\"homes-value\">0</div>\r\n+                    </div>\r\n                 </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+}\r\n \r\n-                <!-- System Details - Square -->\r\n-                <div class=\"rounded-xl bg-gradient-to-br from-blue-50 to-indigo-50 p-6 shadow-sm\">\r\n-                    ${this.renderSystemDetails()}\r\n+renderCostAnalysis() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <h3 class=\"text-lg font-semibold mb-4\">Cost Analysis</h3>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"text-4xl font-bold mb-2\" id=\"total-cost\">0</div>\r\n+                <div class=\"text-sm opacity-80\">Total Investment</div>\r\n+                <div class=\"mt-4 text-sm bg-white/20 rounded-lg px-3 py-2 inline-flex items-center\">\r\n+                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n+}\r\n \r\n-    requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n-    });\r\n-  }\r\n-\r\n   renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <div class=\"flex items-center justify-between mb-4\">\r\n"
                },
                {
                    "date": 1731675846078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,11 +90,11 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderQuickStats() {\r\n+  renderQuickStats() {\r\n     return `\r\n         <div class=\"grid grid-cols-2 gap-4\">\r\n             <div class=\"text-center\">\r\n                 <div class=\"text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n@@ -105,11 +105,11 @@\n                 <div class=\"text-sm text-gray-600\">Monthly PKR</div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderEnvironmentalImpact() {\r\n+  renderEnvironmentalImpact() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <h3 class=\"text-lg font-semibold mb-4\">Environmental Impact</h3>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n@@ -132,11 +132,11 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderCostAnalysis() {\r\n+  renderCostAnalysis() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <h3 class=\"text-lg font-semibold mb-4\">Cost Analysis</h3>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n@@ -150,9 +150,9 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n   renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n"
                },
                {
                    "date": 1731675866801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1347 @@\n+import { gsap } from \"gsap\";\r\n+import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n+import Chart from \"chart.js/auto\";\r\n+import { CountUp } from \"countup.js\";\r\n+import ProgressBar from \"progressbar.js\";\r\n+\r\n+// QuoteResultPage.js\r\n+export class QuoteResultPage {\r\n+  constructor() {\r\n+    try {\r\n+      this.billData = getBillData();\r\n+      this.error = getError();\r\n+    } catch (error) {\r\n+      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n+      this.error = \"Failed to load bill data. Please try again.\";\r\n+    }\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n+\r\n+  render() {\r\n+    return `\r\n+        <div class=\"relative max-w-[1136px] mx-auto p-8 min-h-[836px]\">\r\n+            <div class=\"flex gap-6\">\r\n+                <!-- Main Content Area -->\r\n+                <div class=\"flex-1 flex flex-col gap-6\">\r\n+                    <!-- Top Row -->\r\n+                    <div class=\"flex gap-6\">\r\n+                        <!-- System Size & Cost Overview -->\r\n+                        <div class=\"flex flex-col gap-6 w-[325px]\">\r\n+                            <div class=\"bg-white rounded-2xl p-6 h-[183px] flex flex-col justify-between\">\r\n+                                <div class=\"flex items-center justify-between mb-4\">\r\n+                                    <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n+                                    <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                                        <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                                        </svg>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div id=\"system-size-progress\"></div>\r\n+                            </div>\r\n+                            \r\n+                            <!-- Quick Stats Card -->\r\n+                            <div class=\"bg-white rounded-2xl p-6\">\r\n+                                ${this.renderQuickStats()}\r\n+                            </div>\r\n+                        </div>\r\n+                        \r\n+                        <!-- Energy Production Chart -->\r\n+                        <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n+                            <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                            <div class=\"h-[calc(100%-2rem)]\">\r\n+                                <canvas id=\"production-chart\"></canvas>\r\n+                            </div>\r\n+                        </div>\r\n+                    </div>\r\n+\r\n+                    <!-- Bottom Row -->\r\n+                    <div class=\"flex gap-6\">\r\n+                        <!-- Savings Timeline Chart -->\r\n+                        <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n+                            <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                            <div class=\"h-[calc(100%-2rem)]\">\r\n+                                <canvas id=\"savings-chart\"></canvas>\r\n+                            </div>\r\n+                        </div>\r\n+                        \r\n+                        <!-- Environmental Impact -->\r\n+                        <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n+                            ${this.renderEnvironmentalImpact()}\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+\r\n+                <!-- Sidebar -->\r\n+                <div class=\"w-[324px] flex flex-col gap-6\">\r\n+                    <!-- Monthly Production Analysis -->\r\n+                    <div class=\"h-[384px] bg-white rounded-2xl p-6\">\r\n+                        <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n+                        <div class=\"h-[calc(100%-2rem)]\">\r\n+                            <canvas id=\"monthly-production-chart\"></canvas>\r\n+                        </div>\r\n+                    </div>\r\n+                    \r\n+                    <!-- Cost Analysis -->\r\n+                    <div class=\"flex-1 bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n+                        ${this.renderCostAnalysis()}\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderQuickStats() {\r\n+    return `\r\n+        <div class=\"grid grid-cols-2 gap-4\">\r\n+            <div class=\"text-center\">\r\n+                <div class=\"text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n+                <div class=\"text-sm text-gray-600\">Daily kWh</div>\r\n+            </div>\r\n+            <div class=\"text-center\">\r\n+                <div class=\"text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n+                <div class=\"text-sm text-gray-600\">Monthly PKR</div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderEnvironmentalImpact() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <h3 class=\"text-lg font-semibold mb-4\">Environmental Impact</h3>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"mb-6\">\r\n+                    <div class=\"text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n+                    <div class=\"text-3xl font-bold\" id=\"co2-value\">0</div>\r\n+                    <div class=\"w-full bg-white/20 h-2 rounded-full mt-2\">\r\n+                        <div class=\"bg-white h-full rounded-full\" style=\"width: 75%\"></div>\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"grid grid-cols-2 gap-4\">\r\n+                    <div>\r\n+                        <div class=\"text-sm opacity-80\">Trees Equivalent</div>\r\n+                        <div class=\"text-2xl font-bold\" id=\"trees-value\">0</div>\r\n+                    </div>\r\n+                    <div>\r\n+                        <div class=\"text-sm opacity-80\">Energy for Homes</div>\r\n+                        <div class=\"text-2xl font-bold\" id=\"homes-value\">0</div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderCostAnalysis() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <h3 class=\"text-lg font-semibold mb-4\">Cost Analysis</h3>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"text-4xl font-bold mb-2\" id=\"total-cost\">0</div>\r\n+                <div class=\"text-sm opacity-80\">Total Investment</div>\r\n+                <div class=\"mt-4 text-sm bg-white/20 rounded-lg px-3 py-2 inline-flex items-center\">\r\n+                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderSystemSizeCard() {\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n+                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                    </svg>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n+                    <span id=\"system-size-value\">0</span>\r\n+                    <span class=\"text-lg text-gray-500\">kW</span>\r\n+                </div>\r\n+                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n+            </div>\r\n+            <div id=\"system-size-progress\" class=\"mt-4 h-2\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderCostCard() {\r\n+    return `\r\n+        <div class=\"flex items-center justify-between h-full\">\r\n+            <div>\r\n+                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n+                <div class=\"text-3xl font-bold text-gray-900\">\r\n+                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n+                    <span id=\"total-cost-value\">0</span>\r\n+                </div>\r\n+                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n+                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+  initializeComponents() {\r\n+    this.initCharts();\r\n+    this.initCounters();\r\n+    this.initProgressBars();\r\n+    this.startAnimations();\r\n+  }\r\n+\r\n+  initCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initCounters() {\r\n+    const counterData = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n+    ];\r\n+\r\n+    counterData.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n+\r\n+      this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      });\r\n+\r\n+      if (!this.countUps[counter.id].error) {\r\n+        this.countUps[counter.id].start();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  initProgressBars() {\r\n+    const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n+    progressBarElements.forEach((element) => {\r\n+      if (!element) return;\r\n+\r\n+      this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n+        strokeWidth: 4,\r\n+        easing: \"easeInOut\",\r\n+        duration: 1400,\r\n+        color: \"#3b82f6\",\r\n+        trailColor: \"#e5e7eb\",\r\n+        trailWidth: 4,\r\n+        svgStyle: { width: \"100%\", height: \"100%\" },\r\n+      });\r\n+\r\n+      this.progressBars[element.id].animate(0.75);\r\n+    });\r\n+  }\r\n+\r\n+  startAnimations() {\r\n+    gsap.fromTo(\r\n+      \".bg-white\",\r\n+      {\r\n+        opacity: 0,\r\n+        y: 20,\r\n+      },\r\n+      {\r\n+        opacity: 1,\r\n+        y: 0,\r\n+        duration: 0.6,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+\r\n+    // Destroy all progress bars\r\n+    Object.values(this.progressBars).forEach((progressBar) => {\r\n+      if (progressBar) progressBar.destroy();\r\n+    });\r\n+\r\n+    // Reset all counters\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n+      if (countUp) countUp.reset();\r\n+    });\r\n+\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n+\r\n+    // Clear all objects\r\n+    this.charts = {};\r\n+    this.progressBars = {};\r\n+    this.countUps = {};\r\n+  }\r\n+\r\n+  renderDetailsSections() {\r\n+    return `\r\n+        <!-- System Specifications -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n+            <div class=\"grid grid-cols-2 gap-4\">\r\n+                ${this.renderSpecificationDetails()}\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Environmental Impact -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n+            <div class=\"space-y-6\">\r\n+                ${this.renderEnvironmentalImpact()}\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+  attachBaseStyles() {\r\n+    const style = document.createElement(\"style\");\r\n+    style.textContent = `\r\n+        .bento-card {\r\n+            transition: all 0.3s ease;\r\n+            position: relative;\r\n+            overflow: hidden;\r\n+        }\r\n+\r\n+        .bento-card:hover {\r\n+            transform: translateY(-2px);\r\n+            box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);\r\n+        }\r\n+\r\n+        .bento-card::after {\r\n+            content: '';\r\n+            position: absolute;\r\n+            top: 0;\r\n+            left: 0;\r\n+            right: 0;\r\n+            bottom: 0;\r\n+            border-radius: inherit;\r\n+            background: linear-gradient(\r\n+                120deg,\r\n+                transparent 20%,\r\n+                rgba(255, 255, 255, 0.1) 28%,\r\n+                transparent 40%\r\n+            );\r\n+            transform: translateX(-100%);\r\n+            transition: transform 0.7s ease;\r\n+        }\r\n+\r\n+        .bento-card:hover::after {\r\n+            transform: translateX(100%);\r\n+        }\r\n+\r\n+        .stat-value {\r\n+            transition: color 0.3s ease;\r\n+        }\r\n+\r\n+        .bento-card:hover .stat-value {\r\n+            color: #3b82f6;\r\n+        }\r\n+\r\n+        .chart-container {\r\n+            position: relative;\r\n+        }\r\n+\r\n+        .chart-container canvas {\r\n+            transition: transform 0.3s ease;\r\n+        }\r\n+\r\n+        .chart-container:hover canvas {\r\n+            transform: scale(1.02);\r\n+        }\r\n+\r\n+        .environmental-impact-card {\r\n+            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\r\n+        }\r\n+\r\n+        .savings-card {\r\n+            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\r\n+        }\r\n+    `;\r\n+    document.head.appendChild(style);\r\n+  }\r\n+\r\n+  renderSpecificationDetails() {\r\n+    const specs = [\r\n+      {\r\n+        label: \"Number of Panels\",\r\n+        value: this.billData.numberOfPanels,\r\n+        unit: \"panels\",\r\n+        icon: \"solar_power\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Wattage\",\r\n+        value: this.billData.panelWattage,\r\n+        unit: \"W\",\r\n+        icon: \"bolt\",\r\n+      },\r\n+      {\r\n+        label: \"Required Roof Area\",\r\n+        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n+        unit: \"sq ft\",\r\n+        icon: \"home\",\r\n+      },\r\n+      {\r\n+        label: \"Annual Production\",\r\n+        value: Math.round(this.billData.estimatedAnnualProduction),\r\n+        unit: \"kWh\",\r\n+        icon: \"power\",\r\n+      },\r\n+    ];\r\n+\r\n+    return specs\r\n+      .map(\r\n+        (spec) => `\r\n+        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n+            <div class=\"flex-shrink-0\">\r\n+                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n+                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n+                </span>\r\n+            </div>\r\n+            <div class=\"ml-4\">\r\n+                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n+                <p class=\"mt-1 text-sm text-gray-500\">\r\n+                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n+          spec.unit\r\n+        }\r\n+                </p>\r\n+            </div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  \r\n+  renderChartSections() {\r\n+    return `\r\n+        <!-- Energy Production Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"production-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+\r\n+        <!-- Cost Savings Chart -->\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n+            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n+            <div class=\"h-[400px] relative\">\r\n+                <canvas id=\"savings-chart\"></canvas>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderKeyMetrics() {\r\n+    const metrics = [\r\n+      {\r\n+        title: \"Recommended System Size\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        unit: \"kW\",\r\n+        icon: \"⚡\",\r\n+        color: \"blue\",\r\n+        id: \"system-size\",\r\n+      },\r\n+      {\r\n+        title: \"Total Investment\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR\",\r\n+        icon: \"💰\",\r\n+        color: \"green\",\r\n+        id: \"total-cost\",\r\n+      },\r\n+      {\r\n+        title: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        color: \"purple\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return metrics\r\n+      .map(\r\n+        (metric) => `\r\n+        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n+            <div class=\"flex justify-between items-start\">\r\n+                <div>\r\n+                    <p class=\"text-sm font-medium text-gray-500\">${\r\n+                      metric.title\r\n+                    }</p>\r\n+                    <div class=\"mt-1 flex items-baseline\">\r\n+                        ${\r\n+                          metric.prefix\r\n+                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n+                          metric.id\r\n+                        }-value\">0</span>\r\n+                        ${\r\n+                          metric.unit\r\n+                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n+                            : \"\"\r\n+                        }\r\n+                    </div>\r\n+                </div>\r\n+                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n+                    <span class=\"text-xl\">${metric.icon}</span>\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n+        </div>\r\n+    `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  renderStatCards() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-yellow-50\",\r\n+        icon: \"⚡️\",\r\n+        id: \"daily-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Production\",\r\n+        value: this.billData.estimatedMonthlyProduction,\r\n+        unit: \"kWh\",\r\n+        bg: \"bg-blue-50\",\r\n+        icon: \"📊\",\r\n+        id: \"monthly-production-value\",\r\n+      },\r\n+      {\r\n+        label: \"Coverage\",\r\n+        value: this.billData.coveragePercentage,\r\n+        unit: \"%\",\r\n+        bg: \"bg-green-50\",\r\n+        icon: \"🎯\",\r\n+        id: \"coverage-value\",\r\n+      },\r\n+      {\r\n+        label: \"Panel Efficiency\",\r\n+        value: \"21.5\",\r\n+        unit: \"%\",\r\n+        bg: \"bg-purple-50\",\r\n+        icon: \"⚙️\",\r\n+        id: \"efficiency-value\",\r\n+      },\r\n+    ];\r\n+\r\n+    return stats\r\n+      .map(\r\n+        (stat) => `\r\n+            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n+                <div class=\"flex items-center justify-between mb-2\">\r\n+                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n+                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n+                        ${stat.icon}\r\n+                    </span>\r\n+                </div>\r\n+                <p class=\"text-xl font-bold text-gray-900\">\r\n+                    <span id=\"${stat.id}\">0</span>\r\n+                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n+                </p>\r\n+            </div>\r\n+        `\r\n+      )\r\n+      .join(\"\");\r\n+  }\r\n+\r\n+  initializeProgressBars() {\r\n+    // System Size Progress Bar\r\n+    this.progressBars.systemSize = new ProgressBar.Line(\r\n+      \"#system-size-progress\",\r\n+      {\r\n+        color: \"#3B82F6\",\r\n+        trailColor: \"#E5E7EB\",\r\n+        trailWidth: 8,\r\n+        strokeWidth: 8,\r\n+        duration: 2000,\r\n+        easing: \"easeInOut\",\r\n+        from: { color: \"#93C5FD\" },\r\n+        to: { color: \"#3B82F6\" },\r\n+        step: (state, bar) => {\r\n+          bar.path.setAttribute(\"stroke\", state.color);\r\n+        },\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  initializeCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const years = 25; // Standard solar panel warranty period\r\n+    const yearlyLabels = Array.from(\r\n+      { length: years + 1 },\r\n+      (_, i) => `Year ${i}`\r\n+    );\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n+\r\n+    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n+      Math.round(yearlySavings * index)\r\n+    );\r\n+\r\n+    const investmentLine = yearlyLabels.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: yearlyLabels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"rgb(16, 185, 129)\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+            tension: 0,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                return `${\r\n+                  context.dataset.label\r\n+                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: function (value) {\r\n+                return \"PKR \" + value.toLocaleString();\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    // Generate monthly data\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    // Create chart with proper configuration\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"rgb(59, 130, 246)\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"rgb(239, 68, 68)\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+            borderWidth: 2,\r\n+            pointRadius: 4,\r\n+            pointHoverRadius: 6,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+            labels: {\r\n+              usePointStyle: true,\r\n+              padding: 20,\r\n+            },\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            displayColors: true,\r\n+            callbacks: {\r\n+              label: function (context) {\r\n+                const label = context.dataset.label || \"\";\r\n+                const value = context.parsed.y || 0;\r\n+                return `${label}: ${value.toLocaleString()} kWh`;\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          x: {\r\n+            grid: {\r\n+              display: false,\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+            },\r\n+          },\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+            ticks: {\r\n+              font: {\r\n+                size: 12,\r\n+              },\r\n+              callback: function (value) {\r\n+                return value.toLocaleString() + \" kWh\";\r\n+              },\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const seasonalFactors = {\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n+    };\r\n+\r\n+    const monthlyProduction = months.map((month, index) => {\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n+\r\n+      // Base production from system size\r\n+      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n+      return Math.round(baseProduction * factor);\r\n+    });\r\n+\r\n+    const monthlyConsumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+      labels: months,\r\n+      production: monthlyProduction,\r\n+      consumption: monthlyConsumption,\r\n+    };\r\n+  }\r\n+\r\n+  getSeasonalFactor(month) {\r\n+    const seasonalFactors = {\r\n+      Dec: 0.7,\r\n+      Jan: 0.7,\r\n+      Feb: 0.8,\r\n+      Mar: 0.9,\r\n+      Apr: 1.0,\r\n+      May: 1.1,\r\n+      Jun: 1.2,\r\n+      Jul: 1.2,\r\n+      Aug: 1.1,\r\n+      Sep: 1.0,\r\n+      Oct: 0.9,\r\n+      Nov: 0.8,\r\n+    };\r\n+    return seasonalFactors[month];\r\n+  }\r\n+\r\n+  initializeAnimations() {\r\n+    // Initial fade in animation for all cards\r\n+    gsap.from(\".bento-card\", {\r\n+      duration: 0.8,\r\n+      opacity: 0,\r\n+      y: 30,\r\n+      stagger: {\r\n+        amount: 0.8,\r\n+        from: \"random\",\r\n+      },\r\n+      ease: \"power3.out\",\r\n+    });\r\n+\r\n+    // Animate progress bars\r\n+    this.animateProgressBars();\r\n+\r\n+    // Start counters with slight delays\r\n+    this.animateCounters();\r\n+\r\n+    // Add hover animations\r\n+    this.initializeHoverEffects();\r\n+  }\r\n+\r\n+  animateProgressBars() {\r\n+    // CO2 Progress animation\r\n+    gsap.to(\"#co2-progress-bar\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      delay: 0.5,\r\n+      ease: \"power2.out\",\r\n+    });\r\n+\r\n+    // System size progress animation\r\n+    if (this.progressBars[\"system-size-progress\"]) {\r\n+      this.progressBars[\"system-size-progress\"].animate(0.8, {\r\n+        duration: 1500,\r\n+        easing: \"easeInOut\",\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  animateCounters() {\r\n+    Object.values(this.countUps).forEach((counter, index) => {\r\n+      if (counter && !counter.error) {\r\n+        setTimeout(() => {\r\n+          counter.start();\r\n+        }, index * 200); // Staggered start\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  initializeHoverEffects() {\r\n+    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n+      card.addEventListener(\"mouseenter\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1.05,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n+        });\r\n+      });\r\n+\r\n+      card.addEventListener(\"mouseleave\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n+        });\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  initializeCounters() {\r\n+    const counters = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"total-cost-value\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        prefix: \"PKR \",\r\n+        separator: \",\",\r\n+      },\r\n+      {\r\n+        id: \"payback-period-value\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        decimals: 1,\r\n+      },\r\n+    ];\r\n+\r\n+    counters.forEach((counter) => {\r\n+      const element = document.getElementById(counter.id);\r\n+      if (!element) return;\r\n+\r\n+      const options = {\r\n+        startVal: 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: counter.separator || \"\",\r\n+        decimal: \".\",\r\n+        prefix: counter.prefix || \"\",\r\n+        decimals: counter.decimals || 0,\r\n+      };\r\n+\r\n+      const countUp = new CountUp(counter.id, counter.value, options);\r\n+      if (!countUp.error) {\r\n+        countUp.start();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    // Destroy all charts\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    this.charts = {};\r\n+\r\n+    // Kill all GSAP animations\r\n+    gsap.killTweensOf(\"*\");\r\n+\r\n+    // Remove any event listeners if needed\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n+  }\r\n+\r\n+  handleResize = () => {\r\n+    // Debounced resize handler for chart responsiveness\r\n+    clearTimeout(this.resizeTimeout);\r\n+    this.resizeTimeout = setTimeout(() => {\r\n+      Object.values(this.charts).forEach((chart) => {\r\n+        if (chart) chart.resize();\r\n+      });\r\n+    }, 250);\r\n+  };\r\n+\r\n+  renderCostCard() {\r\n+    return `\r\n+        <div class=\"flex items-center justify-between h-full\">\r\n+            <div>\r\n+                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n+                <div class=\"text-3xl font-bold text-gray-900\">\r\n+                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n+                    <span id=\"total-cost-value\" class=\"stat-value\">0</span>\r\n+                </div>\r\n+                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n+                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n+                    </svg>\r\n+                    30% Tax Credit Available\r\n+                </div>\r\n+            </div>\r\n+            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderEnvironmentalImpact() {\r\n+    const co2Offset = this.calculateCO2Offset();\r\n+    const treesEquivalent = Math.round(co2Offset * 40);\r\n+\r\n+    return `\r\n+        <div class=\"h-full flex flex-col\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n+                <span class=\"text-2xl\">🌍</span>\r\n+            </div>\r\n+            \r\n+            <div class=\"flex-1 space-y-4\">\r\n+                <div class=\"relative\">\r\n+                    <div class=\"flex justify-between mb-1\">\r\n+                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n+                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n+                            ${co2Offset.toFixed(1)} tons/year\r\n+                        </span>\r\n+                    </div>\r\n+                    <div class=\"w-full h-2 bg-green-100 rounded-full overflow-hidden\">\r\n+                        <div id=\"co2-progress-bar\" \r\n+                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n+                             style=\"width: 0%\">\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+\r\n+                <div class=\"grid grid-cols-2 gap-3\">\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">🌳</div>\r\n+                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"trees-value\" class=\"stat-value\">0</span> trees\r\n+                        </div>\r\n+                    </div>\r\n+                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n+                        <div class=\"text-2xl mb-1\">⚡</div>\r\n+                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n+                        <div class=\"text-lg font-semibold text-gray-900\">\r\n+                            <span id=\"homes-value\" class=\"stat-value\">0</span> homes\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  renderQuickStats() {\r\n+    const stats = [\r\n+      {\r\n+        label: \"Daily Production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        unit: \"kWh\",\r\n+        icon: \"⚡\",\r\n+        id: \"daily-production\",\r\n+      },\r\n+      {\r\n+        label: \"Monthly Savings\",\r\n+        value: this.billData.estimatedAnnualSavings / 12,\r\n+        unit: \"PKR\",\r\n+        icon: \"💰\",\r\n+        id: \"monthly-savings\",\r\n+      },\r\n+      {\r\n+        label: \"Payback Period\",\r\n+        value: this.billData.estimatedPaybackPeriod,\r\n+        unit: \"years\",\r\n+        icon: \"⏱️\",\r\n+        id: \"payback-period\",\r\n+      },\r\n+    ];\r\n+\r\n+    return `\r\n+        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n+            ${stats\r\n+              .map(\r\n+                (stat) => `\r\n+                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n+                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n+                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n+                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n+                        <span id=\"${stat.id}-value\" class=\"stat-value\">0</span>\r\n+                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n+                    </div>\r\n+                </div>\r\n+            `\r\n+              )\r\n+              .join(\"\")}\r\n+        </div>\r\n+    `;\r\n+  }\r\n+\r\n+  initializeComponents() {\r\n+    this.initCharts();\r\n+    this.initCounters();\r\n+    this.initProgressBars();\r\n+    this.initializeAnimations();\r\n+  }\r\n+\r\n+  initCharts() {\r\n+    this.initProductionChart();\r\n+    this.initSavingsChart();\r\n+  }\r\n+\r\n+  initProductionChart() {\r\n+    const ctx = document.getElementById(\"production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const monthlyData = this.generateMonthlyProductionData();\r\n+\r\n+    this.charts.production = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: monthlyData.labels,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Solar Production\",\r\n+            data: monthlyData.production,\r\n+            borderColor: \"#3b82f6\",\r\n+            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Energy Consumption\",\r\n+            data: monthlyData.consumption,\r\n+            borderColor: \"#ef4444\",\r\n+            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        interaction: {\r\n+          mode: \"index\",\r\n+          intersect: false,\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+            usePointStyle: true,\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: {\r\n+              display: true,\r\n+              color: \"rgba(0, 0, 0, 0.05)\",\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  initSavingsChart() {\r\n+    const ctx = document.getElementById(\"savings-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const years = Array.from({ length: 26 }, (_, i) => `Year ${i}`);\r\n+    const systemCost = this.billData.estimatedSystemCost;\r\n+    const annualSavings = this.billData.estimatedAnnualSavings;\r\n+\r\n+    const cumulativeSavings = years.map((_, i) => i * annualSavings);\r\n+    const investmentLine = years.map(() => systemCost);\r\n+\r\n+    this.charts.savings = new Chart(ctx, {\r\n+      type: \"line\",\r\n+      data: {\r\n+        labels: years,\r\n+        datasets: [\r\n+          {\r\n+            label: \"Cumulative Savings\",\r\n+            data: cumulativeSavings,\r\n+            borderColor: \"#10b981\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n+            fill: true,\r\n+            tension: 0.4,\r\n+          },\r\n+          {\r\n+            label: \"Initial Investment\",\r\n+            data: investmentLine,\r\n+            borderColor: \"#ef4444\",\r\n+            borderDash: [5, 5],\r\n+            fill: false,\r\n+          },\r\n+        ],\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            position: \"top\",\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: \"white\",\r\n+            titleColor: \"#1f2937\",\r\n+            bodyColor: \"#4b5563\",\r\n+            borderColor: \"#e5e7eb\",\r\n+            borderWidth: 1,\r\n+            padding: 12,\r\n+          },\r\n+        },\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: (value) => `PKR ${value.toLocaleString()}`,\r\n+            },\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+  }\r\n+\r\n+  generateMonthlyProductionData() {\r\n+    const months = [\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n+    ];\r\n+    const seasonalFactors = {\r\n+      winter: 0.7,\r\n+      spring: 0.9,\r\n+      summer: 1.2,\r\n+      fall: 0.8,\r\n+    };\r\n+\r\n+    const production = months.map((_, index) => {\r\n+      let factor;\r\n+      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n+      else if (index < 5) factor = seasonalFactors.spring;\r\n+      else if (index < 8) factor = seasonalFactors.summer;\r\n+      else factor = seasonalFactors.fall;\r\n+\r\n+      return Math.round(this.billData.estimatedDailyProduction * 30 * factor);\r\n+    });\r\n+\r\n+    const consumption = months.map(() =>\r\n+      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n+    );\r\n+\r\n+    return {\r\n+      labels: months,\r\n+      production,\r\n+      consumption,\r\n+    };\r\n+  }\r\n+\r\n+  calculateCO2Offset() {\r\n+    return this.billData.estimatedAnnualProduction * 0.0007; // tons CO2 per kWh\r\n+  }\r\n+\r\n+  initializeAnimations() {\r\n+    gsap.from(\".bento-card\", {\r\n+      duration: 0.8,\r\n+      opacity: 0,\r\n+      y: 30,\r\n+      stagger: {\r\n+        amount: 0.8,\r\n+        from: \"random\",\r\n+      },\r\n+      ease: \"power3.out\",\r\n+    });\r\n+\r\n+    gsap.to(\"#co2-progress-bar\", {\r\n+      width: \"75%\",\r\n+      duration: 1.5,\r\n+      delay: 0.5,\r\n+      ease: \"power2.out\",\r\n+    });\r\n+\r\n+    this.initializeHoverEffects();\r\n+  }\r\n+\r\n+  initializeHoverEffects() {\r\n+    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n+      card.addEventListener(\"mouseenter\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1.05,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n+        });\r\n+      });\r\n+\r\n+      card.addEventListener(\"mouseleave\", () => {\r\n+        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+          scale: 1,\r\n+          duration: 0.3,\r\n+          ease: \"power2.out\",\r\n+        });\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  cleanup() {\r\n+    Object.values(this.charts).forEach((chart) => {\r\n+      if (chart) chart.destroy();\r\n+    });\r\n+    gsap.killTweensOf(\"*\");\r\n+    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n+      card.removeEventListener(\"mouseenter\", () => {});\r\n+      card.removeEventListener(\"mouseleave\", () => {});\r\n+    });\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1731676031931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import Chart from \"chart.js/auto\";\r\n import { CountUp } from \"countup.js\";\r\n import ProgressBar from \"progressbar.js\";\r\n \r\n-// QuoteResultPage.js\r\n export class QuoteResultPage {\r\n   constructor() {\r\n     try {\r\n       this.billData = getBillData();\r\n@@ -20,76 +19,111 @@\n   }\r\n \r\n   render() {\r\n     return `\r\n-        <div class=\"relative max-w-[1136px] mx-auto p-8 min-h-[836px]\">\r\n-            <div class=\"flex gap-6\">\r\n-                <!-- Main Content Area -->\r\n-                <div class=\"flex-1 flex flex-col gap-6\">\r\n-                    <!-- Top Row -->\r\n-                    <div class=\"flex gap-6\">\r\n-                        <!-- System Size & Cost Overview -->\r\n-                        <div class=\"flex flex-col gap-6 w-[325px]\">\r\n-                            <div class=\"bg-white rounded-2xl p-6 h-[183px] flex flex-col justify-between\">\r\n-                                <div class=\"flex items-center justify-between mb-4\">\r\n-                                    <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n-                                    <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n-                                        <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n-                                        </svg>\r\n-                                    </div>\r\n+        <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n+            <!-- Header -->\r\n+            <div class=\"mb-8 flex justify-between items-center\">\r\n+                <div>\r\n+                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n+                </div>\r\n+                <button \r\n+                    onclick=\"window.router.push('/bill-review')\"\r\n+                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n+                >\r\n+                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n+                    </svg>\r\n+                    Back\r\n+                </button>\r\n+            </div>\r\n+\r\n+            <!-- Bento Grid Layout -->\r\n+            <div class=\"relative max-w-[1136px] mx-auto min-h-[836px]\">\r\n+                <div class=\"flex gap-6\">\r\n+                    <!-- Main Content Area -->\r\n+                    <div class=\"flex-1 flex flex-col gap-6\">\r\n+                        <!-- Top Row -->\r\n+                        <div class=\"flex gap-6\">\r\n+                            <!-- System Size & Cost Overview -->\r\n+                            <div class=\"flex flex-col gap-6 w-[325px]\">\r\n+                                <div class=\"bg-white rounded-2xl p-6 h-[183px] flex flex-col justify-between\">\r\n+                                    ${this.renderSystemSizeCard()}\r\n                                 </div>\r\n-                                <div id=\"system-size-progress\"></div>\r\n+                                \r\n+                                <!-- Quick Stats Card -->\r\n+                                <div class=\"bg-white rounded-2xl p-6\">\r\n+                                    ${this.renderQuickStats()}\r\n+                                </div>\r\n                             </div>\r\n                             \r\n-                            <!-- Quick Stats Card -->\r\n-                            <div class=\"bg-white rounded-2xl p-6\">\r\n-                                ${this.renderQuickStats()}\r\n+                            <!-- Energy Production Chart -->\r\n+                            <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n+                                <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                                <div class=\"h-[calc(100%-2rem)]\">\r\n+                                    <canvas id=\"production-chart\"></canvas>\r\n+                                </div>\r\n                             </div>\r\n                         </div>\r\n-                        \r\n-                        <!-- Energy Production Chart -->\r\n-                        <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n-                            <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n-                            <div class=\"h-[calc(100%-2rem)]\">\r\n-                                <canvas id=\"production-chart\"></canvas>\r\n+\r\n+                        <!-- Bottom Row -->\r\n+                        <div class=\"flex gap-6\">\r\n+                            <!-- Savings Timeline Chart -->\r\n+                            <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n+                                <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                                <div class=\"h-[calc(100%-2rem)]\">\r\n+                                    <canvas id=\"savings-chart\"></canvas>\r\n+                                </div>\r\n                             </div>\r\n+                            \r\n+                            <!-- Environmental Impact -->\r\n+                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n+                                ${this.renderEnvironmentalImpact()}\r\n+                            </div>\r\n                         </div>\r\n                     </div>\r\n \r\n-                    <!-- Bottom Row -->\r\n-                    <div class=\"flex gap-6\">\r\n-                        <!-- Savings Timeline Chart -->\r\n-                        <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n-                            <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                    <!-- Sidebar -->\r\n+                    <div class=\"w-[324px] flex flex-col gap-6\">\r\n+                        <!-- Monthly Production Analysis -->\r\n+                        <div class=\"h-[384px] bg-white rounded-2xl p-6\">\r\n+                            <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n                             <div class=\"h-[calc(100%-2rem)]\">\r\n-                                <canvas id=\"savings-chart\"></canvas>\r\n+                                <canvas id=\"monthly-production-chart\"></canvas>\r\n                             </div>\r\n                         </div>\r\n                         \r\n-                        <!-- Environmental Impact -->\r\n-                        <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n-                            ${this.renderEnvironmentalImpact()}\r\n+                        <!-- Cost Analysis -->\r\n+                        <div class=\"flex-1 bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n+                            ${this.renderCostAnalysis()}\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+  }\r\n \r\n-                <!-- Sidebar -->\r\n-                <div class=\"w-[324px] flex flex-col gap-6\">\r\n-                    <!-- Monthly Production Analysis -->\r\n-                    <div class=\"h-[384px] bg-white rounded-2xl p-6\">\r\n-                        <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n-                        <div class=\"h-[calc(100%-2rem)]\">\r\n-                            <canvas id=\"monthly-production-chart\"></canvas>\r\n-                        </div>\r\n-                    </div>\r\n-                    \r\n-                    <!-- Cost Analysis -->\r\n-                    <div class=\"flex-1 bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n-                        ${this.renderCostAnalysis()}\r\n-                    </div>\r\n+  renderSystemSizeCard() {\r\n+    return `\r\n+        <div class=\"flex flex-col h-full\">\r\n+            <div class=\"flex items-center justify-between mb-4\">\r\n+                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n+                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n+                    </svg>\r\n                 </div>\r\n             </div>\r\n+            <div class=\"flex-1 flex flex-col justify-center\">\r\n+                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n+                    <span id=\"system-size-value\">0</span>\r\n+                    <span class=\"text-lg text-gray-500\">kW</span>\r\n+                </div>\r\n+                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n+            </div>\r\n+            <div id=\"system-size-progress\" class=\"h-2 mt-4\"></div>\r\n         </div>\r\n     `;\r\n   }\r\n \r\n@@ -152,51 +186,8 @@\n         </div>\r\n     `;\r\n   }\r\n \r\n-  renderSystemSizeCard() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n-                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n-                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n-                    </svg>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n-                    <span id=\"system-size-value\">0</span>\r\n-                    <span class=\"text-lg text-gray-500\">kW</span>\r\n-                </div>\r\n-                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n-            </div>\r\n-            <div id=\"system-size-progress\" class=\"mt-4 h-2\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderCostCard() {\r\n-    return `\r\n-        <div class=\"flex items-center justify-between h-full\">\r\n-            <div>\r\n-                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n-                <div class=\"text-3xl font-bold text-gray-900\">\r\n-                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n-                    <span id=\"total-cost-value\">0</span>\r\n-                </div>\r\n-                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n-                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n-                    </svg>\r\n-                    30% Tax Credit Available\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n   initializeComponents() {\r\n     this.initCharts();\r\n     this.initCounters();\r\n     this.initProgressBars();\r\n@@ -205,945 +196,33 @@\n \r\n   initCharts() {\r\n     this.initProductionChart();\r\n     this.initSavingsChart();\r\n+    this.initMonthlyProductionChart();\r\n   }\r\n \r\n-  initCounters() {\r\n-    const counterData = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counterData.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      });\r\n-\r\n-      if (!this.countUps[counter.id].error) {\r\n-        this.countUps[counter.id].start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  initProgressBars() {\r\n-    const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n-    progressBarElements.forEach((element) => {\r\n-      if (!element) return;\r\n-\r\n-      this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n-        strokeWidth: 4,\r\n-        easing: \"easeInOut\",\r\n-        duration: 1400,\r\n-        color: \"#3b82f6\",\r\n-        trailColor: \"#e5e7eb\",\r\n-        trailWidth: 4,\r\n-        svgStyle: { width: \"100%\", height: \"100%\" },\r\n-      });\r\n-\r\n-      this.progressBars[element.id].animate(0.75);\r\n-    });\r\n-  }\r\n-\r\n-  startAnimations() {\r\n-    gsap.fromTo(\r\n-      \".bg-white\",\r\n-      {\r\n-        opacity: 0,\r\n-        y: 20,\r\n-      },\r\n-      {\r\n-        opacity: 1,\r\n-        y: 0,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n-        ease: \"power2.out\",\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-\r\n-    // Destroy all progress bars\r\n-    Object.values(this.progressBars).forEach((progressBar) => {\r\n-      if (progressBar) progressBar.destroy();\r\n-    });\r\n-\r\n-    // Reset all counters\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp) countUp.reset();\r\n-    });\r\n-\r\n-    // Kill all GSAP animations\r\n-    gsap.killTweensOf(\"*\");\r\n-\r\n-    // Clear all objects\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  renderDetailsSections() {\r\n-    return `\r\n-        <!-- System Specifications -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n-            <div class=\"grid grid-cols-2 gap-4\">\r\n-                ${this.renderSpecificationDetails()}\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Environmental Impact -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n-            <div class=\"space-y-6\">\r\n-                ${this.renderEnvironmentalImpact()}\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  attachBaseStyles() {\r\n-    const style = document.createElement(\"style\");\r\n-    style.textContent = `\r\n-        .bento-card {\r\n-            transition: all 0.3s ease;\r\n-            position: relative;\r\n-            overflow: hidden;\r\n-        }\r\n-\r\n-        .bento-card:hover {\r\n-            transform: translateY(-2px);\r\n-            box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);\r\n-        }\r\n-\r\n-        .bento-card::after {\r\n-            content: '';\r\n-            position: absolute;\r\n-            top: 0;\r\n-            left: 0;\r\n-            right: 0;\r\n-            bottom: 0;\r\n-            border-radius: inherit;\r\n-            background: linear-gradient(\r\n-                120deg,\r\n-                transparent 20%,\r\n-                rgba(255, 255, 255, 0.1) 28%,\r\n-                transparent 40%\r\n-            );\r\n-            transform: translateX(-100%);\r\n-            transition: transform 0.7s ease;\r\n-        }\r\n-\r\n-        .bento-card:hover::after {\r\n-            transform: translateX(100%);\r\n-        }\r\n-\r\n-        .stat-value {\r\n-            transition: color 0.3s ease;\r\n-        }\r\n-\r\n-        .bento-card:hover .stat-value {\r\n-            color: #3b82f6;\r\n-        }\r\n-\r\n-        .chart-container {\r\n-            position: relative;\r\n-        }\r\n-\r\n-        .chart-container canvas {\r\n-            transition: transform 0.3s ease;\r\n-        }\r\n-\r\n-        .chart-container:hover canvas {\r\n-            transform: scale(1.02);\r\n-        }\r\n-\r\n-        .environmental-impact-card {\r\n-            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\r\n-        }\r\n-\r\n-        .savings-card {\r\n-            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\r\n-        }\r\n-    `;\r\n-    document.head.appendChild(style);\r\n-  }\r\n-\r\n-  renderSpecificationDetails() {\r\n-    const specs = [\r\n-      {\r\n-        label: \"Number of Panels\",\r\n-        value: this.billData.numberOfPanels,\r\n-        unit: \"panels\",\r\n-        icon: \"solar_power\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Wattage\",\r\n-        value: this.billData.panelWattage,\r\n-        unit: \"W\",\r\n-        icon: \"bolt\",\r\n-      },\r\n-      {\r\n-        label: \"Required Roof Area\",\r\n-        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n-        unit: \"sq ft\",\r\n-        icon: \"home\",\r\n-      },\r\n-      {\r\n-        label: \"Annual Production\",\r\n-        value: Math.round(this.billData.estimatedAnnualProduction),\r\n-        unit: \"kWh\",\r\n-        icon: \"power\",\r\n-      },\r\n-    ];\r\n-\r\n-    return specs\r\n-      .map(\r\n-        (spec) => `\r\n-        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n-            <div class=\"flex-shrink-0\">\r\n-                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n-                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n-                </span>\r\n-            </div>\r\n-            <div class=\"ml-4\">\r\n-                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n-                <p class=\"mt-1 text-sm text-gray-500\">\r\n-                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n-          spec.unit\r\n-        }\r\n-                </p>\r\n-            </div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  \r\n-  renderChartSections() {\r\n-    return `\r\n-        <!-- Energy Production Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"production-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Cost Savings Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"savings-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderKeyMetrics() {\r\n-    const metrics = [\r\n-      {\r\n-        title: \"Recommended System Size\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        unit: \"kW\",\r\n-        icon: \"⚡\",\r\n-        color: \"blue\",\r\n-        id: \"system-size\",\r\n-      },\r\n-      {\r\n-        title: \"Total Investment\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR\",\r\n-        icon: \"💰\",\r\n-        color: \"green\",\r\n-        id: \"total-cost\",\r\n-      },\r\n-      {\r\n-        title: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        color: \"purple\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return metrics\r\n-      .map(\r\n-        (metric) => `\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n-            <div class=\"flex justify-between items-start\">\r\n-                <div>\r\n-                    <p class=\"text-sm font-medium text-gray-500\">${\r\n-                      metric.title\r\n-                    }</p>\r\n-                    <div class=\"mt-1 flex items-baseline\">\r\n-                        ${\r\n-                          metric.prefix\r\n-                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n-                          metric.id\r\n-                        }-value\">0</span>\r\n-                        ${\r\n-                          metric.unit\r\n-                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n-                    <span class=\"text-xl\">${metric.icon}</span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderStatCards() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-yellow-50\",\r\n-        icon: \"⚡️\",\r\n-        id: \"daily-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Production\",\r\n-        value: this.billData.estimatedMonthlyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-blue-50\",\r\n-        icon: \"📊\",\r\n-        id: \"monthly-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Coverage\",\r\n-        value: this.billData.coveragePercentage,\r\n-        unit: \"%\",\r\n-        bg: \"bg-green-50\",\r\n-        icon: \"🎯\",\r\n-        id: \"coverage-value\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Efficiency\",\r\n-        value: \"21.5\",\r\n-        unit: \"%\",\r\n-        bg: \"bg-purple-50\",\r\n-        icon: \"⚙️\",\r\n-        id: \"efficiency-value\",\r\n-      },\r\n-    ];\r\n-\r\n-    return stats\r\n-      .map(\r\n-        (stat) => `\r\n-            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n-                <div class=\"flex items-center justify-between mb-2\">\r\n-                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n-                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n-                        ${stat.icon}\r\n-                    </span>\r\n-                </div>\r\n-                <p class=\"text-xl font-bold text-gray-900\">\r\n-                    <span id=\"${stat.id}\">0</span>\r\n-                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n-                </p>\r\n-            </div>\r\n-        `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  initializeProgressBars() {\r\n-    // System Size Progress Bar\r\n-    this.progressBars.systemSize = new ProgressBar.Line(\r\n-      \"#system-size-progress\",\r\n-      {\r\n-        color: \"#3B82F6\",\r\n-        trailColor: \"#E5E7EB\",\r\n-        trailWidth: 8,\r\n-        strokeWidth: 8,\r\n-        duration: 2000,\r\n-        easing: \"easeInOut\",\r\n-        from: { color: \"#93C5FD\" },\r\n-        to: { color: \"#3B82F6\" },\r\n-        step: (state, bar) => {\r\n-          bar.path.setAttribute(\"stroke\", state.color);\r\n-        },\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  initializeCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initSavingsChart() {\r\n-    const ctx = document.getElementById(\"savings-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const years = 25; // Standard solar panel warranty period\r\n-    const yearlyLabels = Array.from(\r\n-      { length: years + 1 },\r\n-      (_, i) => `Year ${i}`\r\n-    );\r\n-    const systemCost = this.billData.estimatedSystemCost;\r\n-    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n-\r\n-    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n-      Math.round(yearlySavings * index)\r\n-    );\r\n-\r\n-    const investmentLine = yearlyLabels.map(() => systemCost);\r\n-\r\n-    this.charts.savings = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: yearlyLabels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Cumulative Savings\",\r\n-            data: cumulativeSavings,\r\n-            borderColor: \"rgb(16, 185, 129)\",\r\n-            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Initial Investment\",\r\n-            data: investmentLine,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            borderDash: [5, 5],\r\n-            fill: false,\r\n-            tension: 0,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                return `${\r\n-                  context.dataset.label\r\n-                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            ticks: {\r\n-              callback: function (value) {\r\n-                return \"PKR \" + value.toLocaleString();\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n   initProductionChart() {\r\n     const ctx = document.getElementById(\"production-chart\");\r\n     if (!ctx) return;\r\n \r\n-    // Generate monthly data\r\n     const monthlyData = this.generateMonthlyProductionData();\r\n \r\n-    // Create chart with proper configuration\r\n     this.charts.production = new Chart(ctx, {\r\n       type: \"line\",\r\n       data: {\r\n         labels: monthlyData.labels,\r\n         datasets: [\r\n           {\r\n             label: \"Solar Production\",\r\n             data: monthlyData.production,\r\n-            borderColor: \"rgb(59, 130, 246)\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n+            borderColor: \"#10b981\",\r\n+            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n             fill: true,\r\n             tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n           },\r\n           {\r\n             label: \"Energy Consumption\",\r\n             data: monthlyData.consumption,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-            labels: {\r\n-              usePointStyle: true,\r\n-              padding: 20,\r\n-            },\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            displayColors: true,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                const label = context.dataset.label || \"\";\r\n-                const value = context.parsed.y || 0;\r\n-                return `${label}: ${value.toLocaleString()} kWh`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: {\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-              callback: function (value) {\r\n-                return value.toLocaleString() + \" kWh\";\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  generateMonthlyProductionData() {\r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const seasonalFactors = {\r\n-      winter: 0.7,\r\n-      spring: 0.9,\r\n-      summer: 1.2,\r\n-      fall: 0.8,\r\n-    };\r\n-\r\n-    const monthlyProduction = months.map((month, index) => {\r\n-      let factor;\r\n-      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-      else if (index < 5) factor = seasonalFactors.spring;\r\n-      else if (index < 8) factor = seasonalFactors.summer;\r\n-      else factor = seasonalFactors.fall;\r\n-\r\n-      // Base production from system size\r\n-      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n-      return Math.round(baseProduction * factor);\r\n-    });\r\n-\r\n-    const monthlyConsumption = months.map(() =>\r\n-      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-      labels: months,\r\n-      production: monthlyProduction,\r\n-      consumption: monthlyConsumption,\r\n-    };\r\n-  }\r\n-\r\n-  getSeasonalFactor(month) {\r\n-    const seasonalFactors = {\r\n-      Dec: 0.7,\r\n-      Jan: 0.7,\r\n-      Feb: 0.8,\r\n-      Mar: 0.9,\r\n-      Apr: 1.0,\r\n-      May: 1.1,\r\n-      Jun: 1.2,\r\n-      Jul: 1.2,\r\n-      Aug: 1.1,\r\n-      Sep: 1.0,\r\n-      Oct: 0.9,\r\n-      Nov: 0.8,\r\n-    };\r\n-    return seasonalFactors[month];\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    // Initial fade in animation for all cards\r\n-    gsap.from(\".bento-card\", {\r\n-      duration: 0.8,\r\n-      opacity: 0,\r\n-      y: 30,\r\n-      stagger: {\r\n-        amount: 0.8,\r\n-        from: \"random\",\r\n-      },\r\n-      ease: \"power3.out\",\r\n-    });\r\n-\r\n-    // Animate progress bars\r\n-    this.animateProgressBars();\r\n-\r\n-    // Start counters with slight delays\r\n-    this.animateCounters();\r\n-\r\n-    // Add hover animations\r\n-    this.initializeHoverEffects();\r\n-  }\r\n-\r\n-  animateProgressBars() {\r\n-    // CO2 Progress animation\r\n-    gsap.to(\"#co2-progress-bar\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      delay: 0.5,\r\n-      ease: \"power2.out\",\r\n-    });\r\n-\r\n-    // System size progress animation\r\n-    if (this.progressBars[\"system-size-progress\"]) {\r\n-      this.progressBars[\"system-size-progress\"].animate(0.8, {\r\n-        duration: 1500,\r\n-        easing: \"easeInOut\",\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  animateCounters() {\r\n-    Object.values(this.countUps).forEach((counter, index) => {\r\n-      if (counter && !counter.error) {\r\n-        setTimeout(() => {\r\n-          counter.start();\r\n-        }, index * 200); // Staggered start\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  initializeHoverEffects() {\r\n-    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n-      card.addEventListener(\"mouseenter\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1.05,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-\r\n-      card.addEventListener(\"mouseleave\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  initializeCounters() {\r\n-    const counters = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counters.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      const options = {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      };\r\n-\r\n-      const countUp = new CountUp(counter.id, counter.value, options);\r\n-      if (!countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-    this.charts = {};\r\n-\r\n-    // Kill all GSAP animations\r\n-    gsap.killTweensOf(\"*\");\r\n-\r\n-    // Remove any event listeners if needed\r\n-    window.removeEventListener(\"resize\", this.handleResize);\r\n-  }\r\n-\r\n-  handleResize = () => {\r\n-    // Debounced resize handler for chart responsiveness\r\n-    clearTimeout(this.resizeTimeout);\r\n-    this.resizeTimeout = setTimeout(() => {\r\n-      Object.values(this.charts).forEach((chart) => {\r\n-        if (chart) chart.resize();\r\n-      });\r\n-    }, 250);\r\n-  };\r\n-\r\n-  renderCostCard() {\r\n-    return `\r\n-        <div class=\"flex items-center justify-between h-full\">\r\n-            <div>\r\n-                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n-                <div class=\"text-3xl font-bold text-gray-900\">\r\n-                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n-                    <span id=\"total-cost-value\" class=\"stat-value\">0</span>\r\n-                </div>\r\n-                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n-                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n-                    </svg>\r\n-                    30% Tax Credit Available\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderEnvironmentalImpact() {\r\n-    const co2Offset = this.calculateCO2Offset();\r\n-    const treesEquivalent = Math.round(co2Offset * 40);\r\n-\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n-                <span class=\"text-2xl\">🌍</span>\r\n-            </div>\r\n-            \r\n-            <div class=\"flex-1 space-y-4\">\r\n-                <div class=\"relative\">\r\n-                    <div class=\"flex justify-between mb-1\">\r\n-                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n-                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n-                            ${co2Offset.toFixed(1)} tons/year\r\n-                        </span>\r\n-                    </div>\r\n-                    <div class=\"w-full h-2 bg-green-100 rounded-full overflow-hidden\">\r\n-                        <div id=\"co2-progress-bar\" \r\n-                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n-                             style=\"width: 0%\">\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <div class=\"grid grid-cols-2 gap-3\">\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">🌳</div>\r\n-                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"trees-value\" class=\"stat-value\">0</span> trees\r\n-                        </div>\r\n-                    </div>\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">⚡</div>\r\n-                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"homes-value\" class=\"stat-value\">0</span> homes\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderQuickStats() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        icon: \"⚡\",\r\n-        id: \"daily-production\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Savings\",\r\n-        value: this.billData.estimatedAnnualSavings / 12,\r\n-        unit: \"PKR\",\r\n-        icon: \"💰\",\r\n-        id: \"monthly-savings\",\r\n-      },\r\n-      {\r\n-        label: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return `\r\n-        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n-            ${stats\r\n-              .map(\r\n-                (stat) => `\r\n-                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n-                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n-                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n-                        <span id=\"${stat.id}-value\" class=\"stat-value\">0</span>\r\n-                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n-                    </div>\r\n-                </div>\r\n-            `\r\n-              )\r\n-              .join(\"\")}\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  initializeComponents() {\r\n-    this.initCharts();\r\n-    this.initCounters();\r\n-    this.initProgressBars();\r\n-    this.initializeAnimations();\r\n-  }\r\n-\r\n-  initCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n-\r\n-    this.charts.production = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: monthlyData.labels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"#3b82f6\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n             borderColor: \"#ef4444\",\r\n             backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n             fill: true,\r\n             tension: 0.4,\r\n@@ -1152,33 +231,16 @@\n       },\r\n       options: {\r\n         responsive: true,\r\n         maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n         plugins: {\r\n           legend: {\r\n             position: \"top\",\r\n           },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            usePointStyle: true,\r\n-          },\r\n         },\r\n         scales: {\r\n           y: {\r\n             beginAtZero: true,\r\n-            grid: {\r\n-              display: true,\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n           },\r\n         },\r\n       },\r\n     });\r\n@@ -1223,16 +285,8 @@\n         plugins: {\r\n           legend: {\r\n             position: \"top\",\r\n           },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-          },\r\n         },\r\n         scales: {\r\n           y: {\r\n             beginAtZero: true,\r\n@@ -1244,23 +298,50 @@\n       },\r\n     });\r\n   }\r\n \r\n+  initMonthlyProductionChart() {\r\n+    const ctx = document.getElementById(\"monthly-production-chart\");\r\n+    if (!ctx) return;\r\n+\r\n+    const data = this.generateMonthlyProductionData();\r\n+\r\n+    this.charts.monthlyProduction = new Chart(ctx, {\r\n+      type: \"bar\",\r\n+      data: {\r\n+        labels: data.labels,\r\n+        datasets: [{\r\n+          label: 'Monthly Production',\r\n+          data: data.production,\r\n+          backgroundColor: '#10b981',\r\n+        }]\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        plugins: {\r\n+          legend: {\r\n+            display: false,\r\n+          }\r\n+        },\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            ticks: {\r\n+              callback: (value) => `${value} kWh`,\r\n+            },\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n   generateMonthlyProductionData() {\r\n     const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n+      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n+      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n     ];\r\n+\r\n     const seasonalFactors = {\r\n       winter: 0.7,\r\n       spring: 0.9,\r\n       summer: 1.2,\r\n@@ -1287,293 +368,35 @@\n       consumption,\r\n     };\r\n   }\r\n \r\n-  calculateCO2Offset() {\r\n-    return this.billData.estimatedAnnualProduction * 0.0007; // tons CO2 per kWh\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    gsap.from(\".bento-card\", {\r\n-      duration: 0.8,\r\n-      opacity: 0,\r\n-      y: 30,\r\n-      stagger: {\r\n-        amount: 0.8,\r\n-        from: \"random\",\r\n-      },\r\n-      ease: \"power3.out\",\r\n-    });\r\n-\r\n-    gsap.to(\"#co2-progress-bar\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      delay: 0.5,\r\n-      ease: \"power2.out\",\r\n-    });\r\n-\r\n-    this.initializeHoverEffects();\r\n-  }\r\n-\r\n-  initializeHoverEffects() {\r\n-    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n-      card.addEventListener(\"mouseenter\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1.05,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-\r\n-      card.addEventListener(\"mouseleave\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-    gsap.killTweensOf(\"*\");\r\n-    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n-      card.removeEventListener(\"mouseenter\", () => {});\r\n-      card.removeEventListener(\"mouseleave\", () => {});\r\n-    });\r\n-  }\r\n-}\r\n-import { gsap } from \"gsap\";\r\n-import { getBillData, getError } from \"../store/solarSizingState.js\";\r\n-import Chart from \"chart.js/auto\";\r\n-import { CountUp } from \"countup.js\";\r\n-import ProgressBar from \"progressbar.js\";\r\n-\r\n-// QuoteResultPage.js\r\n-export class QuoteResultPage {\r\n-  constructor() {\r\n-    try {\r\n-      this.billData = getBillData();\r\n-      this.error = getError();\r\n-    } catch (error) {\r\n-      console.error(\"Error in QuoteResultPage constructor:\", error);\r\n-      this.error = \"Failed to load bill data. Please try again.\";\r\n-    }\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  render() {\r\n-    return `\r\n-        <div class=\"relative max-w-[1136px] mx-auto p-8 min-h-[836px]\">\r\n-            <div class=\"flex gap-6\">\r\n-                <!-- Main Content Area -->\r\n-                <div class=\"flex-1 flex flex-col gap-6\">\r\n-                    <!-- Top Row -->\r\n-                    <div class=\"flex gap-6\">\r\n-                        <!-- System Size & Cost Overview -->\r\n-                        <div class=\"flex flex-col gap-6 w-[325px]\">\r\n-                            <div class=\"bg-white rounded-2xl p-6 h-[183px] flex flex-col justify-between\">\r\n-                                <div class=\"flex items-center justify-between mb-4\">\r\n-                                    <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n-                                    <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n-                                        <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n-                                        </svg>\r\n-                                    </div>\r\n-                                </div>\r\n-                                <div id=\"system-size-progress\"></div>\r\n-                            </div>\r\n-                            \r\n-                            <!-- Quick Stats Card -->\r\n-                            <div class=\"bg-white rounded-2xl p-6\">\r\n-                                ${this.renderQuickStats()}\r\n-                            </div>\r\n-                        </div>\r\n-                        \r\n-                        <!-- Energy Production Chart -->\r\n-                        <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n-                            <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n-                            <div class=\"h-[calc(100%-2rem)]\">\r\n-                                <canvas id=\"production-chart\"></canvas>\r\n-                            </div>\r\n-                        </div>\r\n-                    </div>\r\n-\r\n-                    <!-- Bottom Row -->\r\n-                    <div class=\"flex gap-6\">\r\n-                        <!-- Savings Timeline Chart -->\r\n-                        <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n-                            <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n-                            <div class=\"h-[calc(100%-2rem)]\">\r\n-                                <canvas id=\"savings-chart\"></canvas>\r\n-                            </div>\r\n-                        </div>\r\n-                        \r\n-                        <!-- Environmental Impact -->\r\n-                        <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n-                            ${this.renderEnvironmentalImpact()}\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <!-- Sidebar -->\r\n-                <div class=\"w-[324px] flex flex-col gap-6\">\r\n-                    <!-- Monthly Production Analysis -->\r\n-                    <div class=\"h-[384px] bg-white rounded-2xl p-6\">\r\n-                        <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n-                        <div class=\"h-[calc(100%-2rem)]\">\r\n-                            <canvas id=\"monthly-production-chart\"></canvas>\r\n-                        </div>\r\n-                    </div>\r\n-                    \r\n-                    <!-- Cost Analysis -->\r\n-                    <div class=\"flex-1 bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n-                        ${this.renderCostAnalysis()}\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderQuickStats() {\r\n-    return `\r\n-        <div class=\"grid grid-cols-2 gap-4\">\r\n-            <div class=\"text-center\">\r\n-                <div class=\"text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n-                <div class=\"text-sm text-gray-600\">Daily kWh</div>\r\n-            </div>\r\n-            <div class=\"text-center\">\r\n-                <div class=\"text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n-                <div class=\"text-sm text-gray-600\">Monthly PKR</div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderEnvironmentalImpact() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <h3 class=\"text-lg font-semibold mb-4\">Environmental Impact</h3>\r\n-            <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"mb-6\">\r\n-                    <div class=\"text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n-                    <div class=\"text-3xl font-bold\" id=\"co2-value\">0</div>\r\n-                    <div class=\"w-full bg-white/20 h-2 rounded-full mt-2\">\r\n-                        <div class=\"bg-white h-full rounded-full\" style=\"width: 75%\"></div>\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"grid grid-cols-2 gap-4\">\r\n-                    <div>\r\n-                        <div class=\"text-sm opacity-80\">Trees Equivalent</div>\r\n-                        <div class=\"text-2xl font-bold\" id=\"trees-value\">0</div>\r\n-                    </div>\r\n-                    <div>\r\n-                        <div class=\"text-sm opacity-80\">Energy for Homes</div>\r\n-                        <div class=\"text-2xl font-bold\" id=\"homes-value\">0</div>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderCostAnalysis() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <h3 class=\"text-lg font-semibold mb-4\">Cost Analysis</h3>\r\n-            <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"text-4xl font-bold mb-2\" id=\"total-cost\">0</div>\r\n-                <div class=\"text-sm opacity-80\">Total Investment</div>\r\n-                <div class=\"mt-4 text-sm bg-white/20 rounded-lg px-3 py-2 inline-flex items-center\">\r\n-                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n-                    </svg>\r\n-                    30% Tax Credit Available\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderSystemSizeCard() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n-                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n-                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n-                    </svg>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n-                    <span id=\"system-size-value\">0</span>\r\n-                    <span class=\"text-lg text-gray-500\">kW</span>\r\n-                </div>\r\n-                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n-            </div>\r\n-            <div id=\"system-size-progress\" class=\"mt-4 h-2\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderCostCard() {\r\n-    return `\r\n-        <div class=\"flex items-center justify-between h-full\">\r\n-            <div>\r\n-                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n-                <div class=\"text-3xl font-bold text-gray-900\">\r\n-                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n-                    <span id=\"total-cost-value\">0</span>\r\n-                </div>\r\n-                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n-                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n-                    </svg>\r\n-                    30% Tax Credit Available\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  initializeComponents() {\r\n-    this.initCharts();\r\n-    this.initCounters();\r\n-    this.initProgressBars();\r\n-    this.startAnimations();\r\n-  }\r\n-\r\n-  initCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n   initCounters() {\r\n     const counterData = [\r\n       {\r\n         id: \"system-size-value\",\r\n         value: this.billData.recommendedSystemSize,\r\n         decimals: 2,\r\n       },\r\n       {\r\n-        id: \"total-cost-value\",\r\n+        id: \"total-cost\",\r\n         value: this.billData.estimatedSystemCost,\r\n         prefix: \"PKR \",\r\n         separator: \",\",\r\n       },\r\n       {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n+        id: \"co2-value\",\r\n+        value: this.calculateCO2Offset(),\r\n         decimals: 1,\r\n+        suffix: \" tons/year\",\r\n       },\r\n+      {\r\n+        id: \"trees-value\",\r\n+        value: Math.round(this.calculateCO2Offset() * 40),\r\n+      },\r\n+      {\r\n+        id: \"homes-value\",\r\n+        value: Math.round(this.billData.estimatedAnnualProduction / 12000),\r\n+      },\r\n     ];\r\n \r\n     counterData.forEach((counter) => {\r\n       const element = document.getElementById(counter.id);\r\n@@ -1586,8 +409,9 @@\n         useGrouping: true,\r\n         separator: counter.separator || \"\",\r\n         decimal: \".\",\r\n         prefix: counter.prefix || \"\",\r\n+        suffix: counter.suffix || \"\",\r\n         decimals: counter.decimals || 0,\r\n       });\r\n \r\n       if (!this.countUps[counter.id].error) {\r\n@@ -1596,1212 +420,110 @@\n     });\r\n   }\r\n \r\n   initProgressBars() {\r\n-    const progressBarElements = document.querySelectorAll('[id$=\"-progress\"]');\r\n-    progressBarElements.forEach((element) => {\r\n-      if (!element) return;\r\n-\r\n-      this.progressBars[element.id] = new ProgressBar.Line(element, {\r\n+    // System Size Progress Bar\r\n+    const systemSizeProgress = document.getElementById(\"system-size-progress\");\r\n+    if (systemSizeProgress) {\r\n+      this.progressBars.systemSize = new ProgressBar.Line(systemSizeProgress, {\r\n         strokeWidth: 4,\r\n-        easing: \"easeInOut\",\r\n+        easing: 'easeInOut',\r\n         duration: 1400,\r\n-        color: \"#3b82f6\",\r\n-        trailColor: \"#e5e7eb\",\r\n+        color: '#3b82f6',\r\n+        trailColor: '#e5e7eb',\r\n         trailWidth: 4,\r\n-        svgStyle: { width: \"100%\", height: \"100%\" },\r\n+        svgStyle: {width: '100%', height: '100%'}\r\n       });\r\n \r\n-      this.progressBars[element.id].animate(0.75);\r\n-    });\r\n+      this.progressBars.systemSize.animate(0.8);\r\n+    }\r\n   }\r\n \r\n   startAnimations() {\r\n-    gsap.fromTo(\r\n-      \".bg-white\",\r\n-      {\r\n-        opacity: 0,\r\n-        y: 20,\r\n-      },\r\n-      {\r\n-        opacity: 1,\r\n-        y: 0,\r\n-        duration: 0.6,\r\n-        stagger: 0.1,\r\n-        ease: \"power2.out\",\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-\r\n-    // Destroy all progress bars\r\n-    Object.values(this.progressBars).forEach((progressBar) => {\r\n-      if (progressBar) progressBar.destroy();\r\n-    });\r\n-\r\n-    // Reset all counters\r\n-    Object.values(this.countUps).forEach((countUp) => {\r\n-      if (countUp) countUp.reset();\r\n-    });\r\n-\r\n-    // Kill all GSAP animations\r\n-    gsap.killTweensOf(\"*\");\r\n-\r\n-    // Clear all objects\r\n-    this.charts = {};\r\n-    this.progressBars = {};\r\n-    this.countUps = {};\r\n-  }\r\n-\r\n-  renderDetailsSections() {\r\n-    return `\r\n-        <!-- System Specifications -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">System Specifications</h3>\r\n-            <div class=\"grid grid-cols-2 gap-4\">\r\n-                ${this.renderSpecificationDetails()}\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Environmental Impact -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Environmental Impact</h3>\r\n-            <div class=\"space-y-6\">\r\n-                ${this.renderEnvironmentalImpact()}\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  attachBaseStyles() {\r\n-    const style = document.createElement(\"style\");\r\n-    style.textContent = `\r\n-        .bento-card {\r\n-            transition: all 0.3s ease;\r\n-            position: relative;\r\n-            overflow: hidden;\r\n-        }\r\n-\r\n-        .bento-card:hover {\r\n-            transform: translateY(-2px);\r\n-            box-shadow: 0 12px 24px -8px rgba(0, 0, 0, 0.15);\r\n-        }\r\n-\r\n-        .bento-card::after {\r\n-            content: '';\r\n-            position: absolute;\r\n-            top: 0;\r\n-            left: 0;\r\n-            right: 0;\r\n-            bottom: 0;\r\n-            border-radius: inherit;\r\n-            background: linear-gradient(\r\n-                120deg,\r\n-                transparent 20%,\r\n-                rgba(255, 255, 255, 0.1) 28%,\r\n-                transparent 40%\r\n-            );\r\n-            transform: translateX(-100%);\r\n-            transition: transform 0.7s ease;\r\n-        }\r\n-\r\n-        .bento-card:hover::after {\r\n-            transform: translateX(100%);\r\n-        }\r\n-\r\n-        .stat-value {\r\n-            transition: color 0.3s ease;\r\n-        }\r\n-\r\n-        .bento-card:hover .stat-value {\r\n-            color: #3b82f6;\r\n-        }\r\n-\r\n-        .chart-container {\r\n-            position: relative;\r\n-        }\r\n-\r\n-        .chart-container canvas {\r\n-            transition: transform 0.3s ease;\r\n-        }\r\n-\r\n-        .chart-container:hover canvas {\r\n-            transform: scale(1.02);\r\n-        }\r\n-\r\n-        .environmental-impact-card {\r\n-            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);\r\n-        }\r\n-\r\n-        .savings-card {\r\n-            background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);\r\n-        }\r\n-    `;\r\n-    document.head.appendChild(style);\r\n-  }\r\n-\r\n-  renderSpecificationDetails() {\r\n-    const specs = [\r\n-      {\r\n-        label: \"Number of Panels\",\r\n-        value: this.billData.numberOfPanels,\r\n-        unit: \"panels\",\r\n-        icon: \"solar_power\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Wattage\",\r\n-        value: this.billData.panelWattage,\r\n-        unit: \"W\",\r\n-        icon: \"bolt\",\r\n-      },\r\n-      {\r\n-        label: \"Required Roof Area\",\r\n-        value: Math.ceil(this.billData.numberOfPanels * 17.5),\r\n-        unit: \"sq ft\",\r\n-        icon: \"home\",\r\n-      },\r\n-      {\r\n-        label: \"Annual Production\",\r\n-        value: Math.round(this.billData.estimatedAnnualProduction),\r\n-        unit: \"kWh\",\r\n-        icon: \"power\",\r\n-      },\r\n-    ];\r\n-\r\n-    return specs\r\n-      .map(\r\n-        (spec) => `\r\n-        <div class=\"relative flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors\">\r\n-            <div class=\"flex-shrink-0\">\r\n-                <span class=\"inline-flex items-center justify-center h-10 w-10 rounded-lg bg-blue-100 text-blue-600\">\r\n-                    <span class=\"material-icons text-xl\">${spec.icon}</span>\r\n-                </span>\r\n-            </div>\r\n-            <div class=\"ml-4\">\r\n-                <p class=\"text-sm font-medium text-gray-900\">${spec.label}</p>\r\n-                <p class=\"mt-1 text-sm text-gray-500\">\r\n-                    <span class=\"font-semibold\">${spec.value.toLocaleString()}</span> ${\r\n-          spec.unit\r\n-        }\r\n-                </p>\r\n-            </div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderEnvironmentalImpact() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n-                <span class=\"text-2xl\">🌍</span>\r\n-            </div>\r\n-            \r\n-            <div class=\"flex-1 space-y-4\">\r\n-                <div class=\"relative\">\r\n-                    \r\n-                    <div class=\"w-full h-2 bg-green-100 rounded-full\">\r\n-                        <div id=\"co2-progress-bar\" \r\n-                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n-                             style=\"width: 0%\">\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <div class=\"grid grid-cols-2 gap-3\">\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">🌳</div>\r\n-                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"trees-value\">0</span> trees\r\n-                        </div>\r\n-                    </div>\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">⚡</div>\r\n-                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"homes-value\">0</span> homes\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderQuickStats() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        icon: \"⚡\",\r\n-        id: \"daily-production\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Savings\",\r\n-        value: this.billData.estimatedAnnualSavings / 12,\r\n-        unit: \"PKR\",\r\n-        icon: \"💰\",\r\n-        id: \"monthly-savings\",\r\n-      },\r\n-      {\r\n-        label: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return `\r\n-        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n-            ${stats\r\n-              .map(\r\n-                (stat) => `\r\n-                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n-                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n-                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n-                        <span id=\"${stat.id}-value\">0</span>\r\n-                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n-                    </div>\r\n-                </div>\r\n-            `\r\n-              )\r\n-              .join(\"\")}\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderSystemDetails() {\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">System Details</h3>\r\n-            <div class=\"grid grid-cols-2 gap-3 flex-1\">\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Panels</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">\r\n-                        <span id=\"panels-value\">0</span>\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Roof Area</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">\r\n-                        <span id=\"area-value\">0</span> sq ft\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Warranty</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">25 years</div>\r\n-                </div>\r\n-                <div class=\"bg-white/50 rounded-lg p-3\">\r\n-                    <div class=\"text-sm text-gray-600\">Efficiency</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900\">21.5%</div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-  renderChartSections() {\r\n-    return `\r\n-        <!-- Energy Production Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Energy Production Forecast</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"production-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-\r\n-        <!-- Cost Savings Chart -->\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n-            <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cost Savings Analysis</h3>\r\n-            <div class=\"h-[400px] relative\">\r\n-                <canvas id=\"savings-chart\"></canvas>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderKeyMetrics() {\r\n-    const metrics = [\r\n-      {\r\n-        title: \"Recommended System Size\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        unit: \"kW\",\r\n-        icon: \"⚡\",\r\n-        color: \"blue\",\r\n-        id: \"system-size\",\r\n-      },\r\n-      {\r\n-        title: \"Total Investment\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR\",\r\n-        icon: \"💰\",\r\n-        color: \"green\",\r\n-        id: \"total-cost\",\r\n-      },\r\n-      {\r\n-        title: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        color: \"purple\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return metrics\r\n-      .map(\r\n-        (metric) => `\r\n-        <div class=\"bg-white rounded-lg shadow-sm p-6 relative overflow-hidden\">\r\n-            <div class=\"flex justify-between items-start\">\r\n-                <div>\r\n-                    <p class=\"text-sm font-medium text-gray-500\">${\r\n-                      metric.title\r\n-                    }</p>\r\n-                    <div class=\"mt-1 flex items-baseline\">\r\n-                        ${\r\n-                          metric.prefix\r\n-                            ? `<span class=\"text-sm text-gray-600 mr-1\">${metric.prefix}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                        <span class=\"text-2xl font-semibold text-gray-900\" id=\"${\r\n-                          metric.id\r\n-                        }-value\">0</span>\r\n-                        ${\r\n-                          metric.unit\r\n-                            ? `<span class=\"ml-1 text-sm text-gray-600\">${metric.unit}</span>`\r\n-                            : \"\"\r\n-                        }\r\n-                    </div>\r\n-                </div>\r\n-                <div class=\"p-2 bg-${metric.color}-100 rounded-lg\">\r\n-                    <span class=\"text-xl\">${metric.icon}</span>\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"mt-4\" id=\"${metric.id}-progress\"></div>\r\n-        </div>\r\n-    `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  renderStatCards() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-yellow-50\",\r\n-        icon: \"⚡️\",\r\n-        id: \"daily-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Production\",\r\n-        value: this.billData.estimatedMonthlyProduction,\r\n-        unit: \"kWh\",\r\n-        bg: \"bg-blue-50\",\r\n-        icon: \"📊\",\r\n-        id: \"monthly-production-value\",\r\n-      },\r\n-      {\r\n-        label: \"Coverage\",\r\n-        value: this.billData.coveragePercentage,\r\n-        unit: \"%\",\r\n-        bg: \"bg-green-50\",\r\n-        icon: \"🎯\",\r\n-        id: \"coverage-value\",\r\n-      },\r\n-      {\r\n-        label: \"Panel Efficiency\",\r\n-        value: \"21.5\",\r\n-        unit: \"%\",\r\n-        bg: \"bg-purple-50\",\r\n-        icon: \"⚙️\",\r\n-        id: \"efficiency-value\",\r\n-      },\r\n-    ];\r\n-\r\n-    return stats\r\n-      .map(\r\n-        (stat) => `\r\n-            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n-                <div class=\"flex items-center justify-between mb-2\">\r\n-                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n-                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n-                        ${stat.icon}\r\n-                    </span>\r\n-                </div>\r\n-                <p class=\"text-xl font-bold text-gray-900\">\r\n-                    <span id=\"${stat.id}\">0</span>\r\n-                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n-                </p>\r\n-            </div>\r\n-        `\r\n-      )\r\n-      .join(\"\");\r\n-  }\r\n-\r\n-  initializeProgressBars() {\r\n-    // System Size Progress Bar\r\n-    this.progressBars.systemSize = new ProgressBar.Line(\r\n-      \"#system-size-progress\",\r\n-      {\r\n-        color: \"#3B82F6\",\r\n-        trailColor: \"#E5E7EB\",\r\n-        trailWidth: 8,\r\n-        strokeWidth: 8,\r\n-        duration: 2000,\r\n-        easing: \"easeInOut\",\r\n-        from: { color: \"#93C5FD\" },\r\n-        to: { color: \"#3B82F6\" },\r\n-        step: (state, bar) => {\r\n-          bar.path.setAttribute(\"stroke\", state.color);\r\n-        },\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n-  initializeCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initSavingsChart() {\r\n-    const ctx = document.getElementById(\"savings-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const years = 25; // Standard solar panel warranty period\r\n-    const yearlyLabels = Array.from(\r\n-      { length: years + 1 },\r\n-      (_, i) => `Year ${i}`\r\n-    );\r\n-    const systemCost = this.billData.estimatedSystemCost;\r\n-    const yearlySavings = this.billData.estimatedAnnualSavings;\r\n-\r\n-    const cumulativeSavings = yearlyLabels.map((_, index) =>\r\n-      Math.round(yearlySavings * index)\r\n-    );\r\n-\r\n-    const investmentLine = yearlyLabels.map(() => systemCost);\r\n-\r\n-    this.charts.savings = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: yearlyLabels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Cumulative Savings\",\r\n-            data: cumulativeSavings,\r\n-            borderColor: \"rgb(16, 185, 129)\",\r\n-            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Initial Investment\",\r\n-            data: investmentLine,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            borderDash: [5, 5],\r\n-            fill: false,\r\n-            tension: 0,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                return `${\r\n-                  context.dataset.label\r\n-                }: PKR ${context.parsed.y.toLocaleString()}`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            ticks: {\r\n-              callback: function (value) {\r\n-                return \"PKR \" + value.toLocaleString();\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    // Generate monthly data\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n-\r\n-    // Create chart with proper configuration\r\n-    this.charts.production = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: monthlyData.labels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"rgb(59, 130, 246)\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-          {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n-            borderColor: \"rgb(239, 68, 68)\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-            borderWidth: 2,\r\n-            pointRadius: 4,\r\n-            pointHoverRadius: 6,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-            labels: {\r\n-              usePointStyle: true,\r\n-              padding: 20,\r\n-            },\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            displayColors: true,\r\n-            callbacks: {\r\n-              label: function (context) {\r\n-                const label = context.dataset.label || \"\";\r\n-                const value = context.parsed.y || 0;\r\n-                return `${label}: ${value.toLocaleString()} kWh`;\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          x: {\r\n-            grid: {\r\n-              display: false,\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-            },\r\n-          },\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: {\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n-            ticks: {\r\n-              font: {\r\n-                size: 12,\r\n-              },\r\n-              callback: function (value) {\r\n-                return value.toLocaleString() + \" kWh\";\r\n-              },\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  generateMonthlyProductionData() {\r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const seasonalFactors = {\r\n-      winter: 0.7,\r\n-      spring: 0.9,\r\n-      summer: 1.2,\r\n-      fall: 0.8,\r\n-    };\r\n-\r\n-    const monthlyProduction = months.map((month, index) => {\r\n-      let factor;\r\n-      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-      else if (index < 5) factor = seasonalFactors.spring;\r\n-      else if (index < 8) factor = seasonalFactors.summer;\r\n-      else factor = seasonalFactors.fall;\r\n-\r\n-      // Base production from system size\r\n-      const baseProduction = this.billData.recommendedSystemSize * 30 * 4; // kW * days * peak hours\r\n-      return Math.round(baseProduction * factor);\r\n-    });\r\n-\r\n-    const monthlyConsumption = months.map(() =>\r\n-      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-      labels: months,\r\n-      production: monthlyProduction,\r\n-      consumption: monthlyConsumption,\r\n-    };\r\n-  }\r\n-\r\n-  getSeasonalFactor(month) {\r\n-    const seasonalFactors = {\r\n-      Dec: 0.7,\r\n-      Jan: 0.7,\r\n-      Feb: 0.8,\r\n-      Mar: 0.9,\r\n-      Apr: 1.0,\r\n-      May: 1.1,\r\n-      Jun: 1.2,\r\n-      Jul: 1.2,\r\n-      Aug: 1.1,\r\n-      Sep: 1.0,\r\n-      Oct: 0.9,\r\n-      Nov: 0.8,\r\n-    };\r\n-    return seasonalFactors[month];\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    // Initial fade in animation for all cards\r\n-    gsap.from(\".bento-card\", {\r\n+    // Animate cards entrance\r\n+    gsap.from(\".rounded-2xl\", {\r\n       duration: 0.8,\r\n       opacity: 0,\r\n-      y: 30,\r\n+      y: 20,\r\n       stagger: {\r\n-        amount: 0.8,\r\n-        from: \"random\",\r\n+        amount: 0.4,\r\n+        from: \"random\"\r\n       },\r\n-      ease: \"power3.out\",\r\n+      ease: \"power3.out\"\r\n     });\r\n \r\n     // Animate progress bars\r\n-    this.animateProgressBars();\r\n-\r\n-    // Start counters with slight delays\r\n-    this.animateCounters();\r\n-\r\n-    // Add hover animations\r\n-    this.initializeHoverEffects();\r\n-  }\r\n-\r\n-  animateProgressBars() {\r\n-    // CO2 Progress animation\r\n-    gsap.to(\"#co2-progress-bar\", {\r\n+    gsap.to(\".bg-white.h-full.rounded-full\", {\r\n       width: \"75%\",\r\n       duration: 1.5,\r\n       delay: 0.5,\r\n-      ease: \"power2.out\",\r\n+      ease: \"power2.out\"\r\n     });\r\n \r\n-    // System size progress animation\r\n-    if (this.progressBars[\"system-size-progress\"]) {\r\n-      this.progressBars[\"system-size-progress\"].animate(0.8, {\r\n-        duration: 1500,\r\n-        easing: \"easeInOut\",\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  animateCounters() {\r\n-    Object.values(this.countUps).forEach((counter, index) => {\r\n-      if (counter && !counter.error) {\r\n-        setTimeout(() => {\r\n-          counter.start();\r\n-        }, index * 200); // Staggered start\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  initializeHoverEffects() {\r\n-    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n-      card.addEventListener(\"mouseenter\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1.05,\r\n+    // Add hover animations for cards\r\n+    document.querySelectorAll('.rounded-2xl').forEach(card => {\r\n+      card.addEventListener('mouseenter', () => {\r\n+        gsap.to(card, {\r\n+          scale: 1.01,\r\n           duration: 0.3,\r\n-          ease: \"power2.out\",\r\n+          ease: \"power2.out\"\r\n         });\r\n       });\r\n \r\n-      card.addEventListener(\"mouseleave\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n+      card.addEventListener('mouseleave', () => {\r\n+        gsap.to(card, {\r\n           scale: 1,\r\n           duration: 0.3,\r\n-          ease: \"power2.out\",\r\n+          ease: \"power2.out\"\r\n         });\r\n       });\r\n     });\r\n   }\r\n \r\n-  initializeCounters() {\r\n-    const counters = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost-value\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"payback-period-value\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        decimals: 1,\r\n-      },\r\n-    ];\r\n-\r\n-    counters.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      const options = {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      };\r\n-\r\n-      const countUp = new CountUp(counter.id, counter.value, options);\r\n-      if (!countUp.error) {\r\n-        countUp.start();\r\n-      }\r\n-    });\r\n+  calculateCO2Offset() {\r\n+    // Calculate CO2 offset based on annual production\r\n+    // Average of 0.7 kg CO2 per kWh\r\n+    return this.billData.estimatedAnnualProduction * 0.0007; // Convert to tons\r\n   }\r\n \r\n   cleanup() {\r\n     // Destroy all charts\r\n-    Object.values(this.charts).forEach((chart) => {\r\n+    Object.values(this.charts).forEach(chart => {\r\n       if (chart) chart.destroy();\r\n     });\r\n     this.charts = {};\r\n \r\n+    // Destroy all progress bars\r\n+    Object.values(this.progressBars).forEach(progressBar => {\r\n+      if (progressBar) progressBar.destroy();\r\n+    });\r\n+    this.progressBars = {};\r\n+\r\n+    // Reset all counters\r\n+    Object.values(this.countUps).forEach(countUp => {\r\n+      if (countUp) countUp.reset();\r\n+    });\r\n+    this.countUps = {};\r\n+\r\n     // Kill all GSAP animations\r\n     gsap.killTweensOf(\"*\");\r\n \r\n-    // Remove any event listeners if needed\r\n-    window.removeEventListener(\"resize\", this.handleResize);\r\n+    // Remove event listeners\r\n+    document.querySelectorAll('.rounded-2xl').forEach(card => {\r\n+      card.removeEventListener('mouseenter', () => {});\r\n+      card.removeEventListener('mouseleave', () => {});\r\n+    });\r\n   }\r\n \r\n   handleResize = () => {\r\n     // Debounced resize handler for chart responsiveness\r\n     clearTimeout(this.resizeTimeout);\r\n     this.resizeTimeout = setTimeout(() => {\r\n-      Object.values(this.charts).forEach((chart) => {\r\n+      Object.values(this.charts).forEach(chart => {\r\n         if (chart) chart.resize();\r\n       });\r\n     }, 250);\r\n   };\r\n+}\r\n \r\n-  renderCostCard() {\r\n-    return `\r\n-        <div class=\"flex items-center justify-between h-full\">\r\n-            <div>\r\n-                <h3 class=\"text-lg font-semibold mb-2\">Total Investment</h3>\r\n-                <div class=\"text-3xl font-bold text-gray-900\">\r\n-                    <span class=\"text-sm text-gray-500\">PKR</span>\r\n-                    <span id=\"total-cost-value\" class=\"stat-value\">0</span>\r\n-                </div>\r\n-                <div class=\"mt-2 inline-flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full\">\r\n-                    <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n-                    </svg>\r\n-                    30% Tax Credit Available\r\n-                </div>\r\n-            </div>\r\n-            <div class=\"w-24 h-24\" id=\"cost-progress\"></div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderEnvironmentalImpact() {\r\n-    const co2Offset = this.calculateCO2Offset();\r\n-    const treesEquivalent = Math.round(co2Offset * 40);\r\n-\r\n-    return `\r\n-        <div class=\"h-full flex flex-col\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold text-gray-900\">Environmental Impact</h3>\r\n-                <span class=\"text-2xl\">🌍</span>\r\n-            </div>\r\n-            \r\n-            <div class=\"flex-1 space-y-4\">\r\n-                <div class=\"relative\">\r\n-                    <div class=\"flex justify-between mb-1\">\r\n-                        <span class=\"text-sm font-medium text-gray-700\">CO₂ Offset</span>\r\n-                        <span class=\"text-sm font-medium text-gray-700\" id=\"co2-value\">\r\n-                            ${co2Offset.toFixed(1)} tons/year\r\n-                        </span>\r\n-                    </div>\r\n-                    <div class=\"w-full h-2 bg-green-100 rounded-full overflow-hidden\">\r\n-                        <div id=\"co2-progress-bar\" \r\n-                             class=\"h-2 bg-green-500 rounded-full transition-all duration-1000\"\r\n-                             style=\"width: 0%\">\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-\r\n-                <div class=\"grid grid-cols-2 gap-3\">\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">🌳</div>\r\n-                        <div class=\"text-sm text-gray-600\">Equal to</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"trees-value\" class=\"stat-value\">0</span> trees\r\n-                        </div>\r\n-                    </div>\r\n-                    <div class=\"bg-white/50 rounded-lg p-3 backdrop-blur-sm\">\r\n-                        <div class=\"text-2xl mb-1\">⚡</div>\r\n-                        <div class=\"text-sm text-gray-600\">Energy for</div>\r\n-                        <div class=\"text-lg font-semibold text-gray-900\">\r\n-                            <span id=\"homes-value\" class=\"stat-value\">0</span> homes\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  renderQuickStats() {\r\n-    const stats = [\r\n-      {\r\n-        label: \"Daily Production\",\r\n-        value: this.billData.estimatedDailyProduction,\r\n-        unit: \"kWh\",\r\n-        icon: \"⚡\",\r\n-        id: \"daily-production\",\r\n-      },\r\n-      {\r\n-        label: \"Monthly Savings\",\r\n-        value: this.billData.estimatedAnnualSavings / 12,\r\n-        unit: \"PKR\",\r\n-        icon: \"💰\",\r\n-        id: \"monthly-savings\",\r\n-      },\r\n-      {\r\n-        label: \"Payback Period\",\r\n-        value: this.billData.estimatedPaybackPeriod,\r\n-        unit: \"years\",\r\n-        icon: \"⏱️\",\r\n-        id: \"payback-period\",\r\n-      },\r\n-    ];\r\n-\r\n-    return `\r\n-        <div class=\"grid grid-cols-3 gap-4 h-full\">\r\n-            ${stats\r\n-              .map(\r\n-                (stat) => `\r\n-                <div class=\"flex flex-col justify-center bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\r\n-                    <div class=\"text-2xl mb-2\">${stat.icon}</div>\r\n-                    <div class=\"text-sm text-gray-600\">${stat.label}</div>\r\n-                    <div class=\"text-lg font-semibold text-gray-900 mt-1\">\r\n-                        <span id=\"${stat.id}-value\" class=\"stat-value\">0</span>\r\n-                        <span class=\"text-sm text-gray-500\">${stat.unit}</span>\r\n-                    </div>\r\n-                </div>\r\n-            `\r\n-              )\r\n-              .join(\"\")}\r\n-        </div>\r\n-    `;\r\n-  }\r\n-\r\n-  initializeComponents() {\r\n-    this.initCharts();\r\n-    this.initCounters();\r\n-    this.initProgressBars();\r\n-    this.initializeAnimations();\r\n-  }\r\n-\r\n-  initCharts() {\r\n-    this.initProductionChart();\r\n-    this.initSavingsChart();\r\n-  }\r\n-\r\n-  initProductionChart() {\r\n-    const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const monthlyData = this.generateMonthlyProductionData();\r\n-\r\n-    this.charts.production = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: monthlyData.labels,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Solar Production\",\r\n-            data: monthlyData.production,\r\n-            borderColor: \"#3b82f6\",\r\n-            backgroundColor: \"rgba(59, 130, 246, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Energy Consumption\",\r\n-            data: monthlyData.consumption,\r\n-            borderColor: \"#ef4444\",\r\n-            backgroundColor: \"rgba(239, 68, 68, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        interaction: {\r\n-          mode: \"index\",\r\n-          intersect: false,\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-            usePointStyle: true,\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: {\r\n-              display: true,\r\n-              color: \"rgba(0, 0, 0, 0.05)\",\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  initSavingsChart() {\r\n-    const ctx = document.getElementById(\"savings-chart\");\r\n-    if (!ctx) return;\r\n-\r\n-    const years = Array.from({ length: 26 }, (_, i) => `Year ${i}`);\r\n-    const systemCost = this.billData.estimatedSystemCost;\r\n-    const annualSavings = this.billData.estimatedAnnualSavings;\r\n-\r\n-    const cumulativeSavings = years.map((_, i) => i * annualSavings);\r\n-    const investmentLine = years.map(() => systemCost);\r\n-\r\n-    this.charts.savings = new Chart(ctx, {\r\n-      type: \"line\",\r\n-      data: {\r\n-        labels: years,\r\n-        datasets: [\r\n-          {\r\n-            label: \"Cumulative Savings\",\r\n-            data: cumulativeSavings,\r\n-            borderColor: \"#10b981\",\r\n-            backgroundColor: \"rgba(16, 185, 129, 0.1)\",\r\n-            fill: true,\r\n-            tension: 0.4,\r\n-          },\r\n-          {\r\n-            label: \"Initial Investment\",\r\n-            data: investmentLine,\r\n-            borderColor: \"#ef4444\",\r\n-            borderDash: [5, 5],\r\n-            fill: false,\r\n-          },\r\n-        ],\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        plugins: {\r\n-          legend: {\r\n-            position: \"top\",\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: \"white\",\r\n-            titleColor: \"#1f2937\",\r\n-            bodyColor: \"#4b5563\",\r\n-            borderColor: \"#e5e7eb\",\r\n-            borderWidth: 1,\r\n-            padding: 12,\r\n-          },\r\n-        },\r\n-        scales: {\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            ticks: {\r\n-              callback: (value) => `PKR ${value.toLocaleString()}`,\r\n-            },\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-  }\r\n-\r\n-  generateMonthlyProductionData() {\r\n-    const months = [\r\n-      \"Jan\",\r\n-      \"Feb\",\r\n-      \"Mar\",\r\n-      \"Apr\",\r\n-      \"May\",\r\n-      \"Jun\",\r\n-      \"Jul\",\r\n-      \"Aug\",\r\n-      \"Sep\",\r\n-      \"Oct\",\r\n-      \"Nov\",\r\n-      \"Dec\",\r\n-    ];\r\n-    const seasonalFactors = {\r\n-      winter: 0.7,\r\n-      spring: 0.9,\r\n-      summer: 1.2,\r\n-      fall: 0.8,\r\n-    };\r\n-\r\n-    const production = months.map((_, index) => {\r\n-      let factor;\r\n-      if (index < 2 || index === 11) factor = seasonalFactors.winter;\r\n-      else if (index < 5) factor = seasonalFactors.spring;\r\n-      else if (index < 8) factor = seasonalFactors.summer;\r\n-      else factor = seasonalFactors.fall;\r\n-\r\n-      return Math.round(this.billData.estimatedDailyProduction * 30 * factor);\r\n-    });\r\n-\r\n-    const consumption = months.map(() =>\r\n-      Math.round(this.billData.unitsConsumed * (0.9 + Math.random() * 0.2))\r\n-    );\r\n-\r\n-    return {\r\n-      labels: months,\r\n-      production,\r\n-      consumption,\r\n-    };\r\n-  }\r\n-\r\n-  calculateCO2Offset() {\r\n-    return this.billData.estimatedAnnualProduction * 0.0007; // tons CO2 per kWh\r\n-  }\r\n-\r\n-  initializeAnimations() {\r\n-    gsap.from(\".bento-card\", {\r\n-      duration: 0.8,\r\n-      opacity: 0,\r\n-      y: 30,\r\n-      stagger: {\r\n-        amount: 0.8,\r\n-        from: \"random\",\r\n-      },\r\n-      ease: \"power3.out\",\r\n-    });\r\n-\r\n-    gsap.to(\"#co2-progress-bar\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      delay: 0.5,\r\n-      ease: \"power2.out\",\r\n-    });\r\n-\r\n-    this.initializeHoverEffects();\r\n-  }\r\n-\r\n-  initializeHoverEffects() {\r\n-    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n-      card.addEventListener(\"mouseenter\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1.05,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-\r\n-      card.addEventListener(\"mouseleave\", () => {\r\n-        gsap.to(card.querySelectorAll(\".stat-value\"), {\r\n-          scale: 1,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  cleanup() {\r\n-    Object.values(this.charts).forEach((chart) => {\r\n-      if (chart) chart.destroy();\r\n-    });\r\n-    gsap.killTweensOf(\"*\");\r\n-    document.querySelectorAll(\".bento-card\").forEach((card) => {\r\n-      card.removeEventListener(\"mouseenter\", () => {});\r\n-      card.removeEventListener(\"mouseleave\", () => {});\r\n-    });\r\n-  }\r\n-}\r\n+// Export the class\r\n+export default QuoteResultPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731676139496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,17 @@\n     this.countUps = {};\r\n   }\r\n \r\n   render() {\r\n-    return `\r\n+    const app = document.getElementById(\"app\");\r\n+    if (!app) {\r\n+        console.error(\"App container not found\");\r\n+        return;\r\n+    }\r\n+\r\n+    app.innerHTML = `\r\n         <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n+\r\n             <!-- Header -->\r\n             <div class=\"mb-8 flex justify-between items-center\">\r\n                 <div>\r\n                     <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n@@ -308,38 +315,50 @@\n     this.charts.monthlyProduction = new Chart(ctx, {\r\n       type: \"bar\",\r\n       data: {\r\n         labels: data.labels,\r\n-        datasets: [{\r\n-          label: 'Monthly Production',\r\n-          data: data.production,\r\n-          backgroundColor: '#10b981',\r\n-        }]\r\n+        datasets: [\r\n+          {\r\n+            label: \"Monthly Production\",\r\n+            data: data.production,\r\n+            backgroundColor: \"#10b981\",\r\n+          },\r\n+        ],\r\n       },\r\n       options: {\r\n         responsive: true,\r\n         maintainAspectRatio: false,\r\n         plugins: {\r\n           legend: {\r\n             display: false,\r\n-          }\r\n+          },\r\n         },\r\n         scales: {\r\n           y: {\r\n             beginAtZero: true,\r\n             ticks: {\r\n               callback: (value) => `${value} kWh`,\r\n             },\r\n-          }\r\n-        }\r\n-      }\r\n+          },\r\n+        },\r\n+      },\r\n     });\r\n   }\r\n \r\n   generateMonthlyProductionData() {\r\n     const months = [\r\n-      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n-      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n+      \"Jan\",\r\n+      \"Feb\",\r\n+      \"Mar\",\r\n+      \"Apr\",\r\n+      \"May\",\r\n+      \"Jun\",\r\n+      \"Jul\",\r\n+      \"Aug\",\r\n+      \"Sep\",\r\n+      \"Oct\",\r\n+      \"Nov\",\r\n+      \"Dec\",\r\n     ];\r\n \r\n     const seasonalFactors = {\r\n       winter: 0.7,\r\n@@ -425,14 +444,14 @@\n     const systemSizeProgress = document.getElementById(\"system-size-progress\");\r\n     if (systemSizeProgress) {\r\n       this.progressBars.systemSize = new ProgressBar.Line(systemSizeProgress, {\r\n         strokeWidth: 4,\r\n-        easing: 'easeInOut',\r\n+        easing: \"easeInOut\",\r\n         duration: 1400,\r\n-        color: '#3b82f6',\r\n-        trailColor: '#e5e7eb',\r\n+        color: \"#3b82f6\",\r\n+        trailColor: \"#e5e7eb\",\r\n         trailWidth: 4,\r\n-        svgStyle: {width: '100%', height: '100%'}\r\n+        svgStyle: { width: \"100%\", height: \"100%\" },\r\n       });\r\n \r\n       this.progressBars.systemSize.animate(0.8);\r\n     }\r\n@@ -445,36 +464,36 @@\n       opacity: 0,\r\n       y: 20,\r\n       stagger: {\r\n         amount: 0.4,\r\n-        from: \"random\"\r\n+        from: \"random\",\r\n       },\r\n-      ease: \"power3.out\"\r\n+      ease: \"power3.out\",\r\n     });\r\n \r\n     // Animate progress bars\r\n     gsap.to(\".bg-white.h-full.rounded-full\", {\r\n       width: \"75%\",\r\n       duration: 1.5,\r\n       delay: 0.5,\r\n-      ease: \"power2.out\"\r\n+      ease: \"power2.out\",\r\n     });\r\n \r\n     // Add hover animations for cards\r\n-    document.querySelectorAll('.rounded-2xl').forEach(card => {\r\n-      card.addEventListener('mouseenter', () => {\r\n+    document.querySelectorAll(\".rounded-2xl\").forEach((card) => {\r\n+      card.addEventListener(\"mouseenter\", () => {\r\n         gsap.to(card, {\r\n           scale: 1.01,\r\n           duration: 0.3,\r\n-          ease: \"power2.out\"\r\n+          ease: \"power2.out\",\r\n         });\r\n       });\r\n \r\n-      card.addEventListener('mouseleave', () => {\r\n+      card.addEventListener(\"mouseleave\", () => {\r\n         gsap.to(card, {\r\n           scale: 1,\r\n           duration: 0.3,\r\n-          ease: \"power2.out\"\r\n+          ease: \"power2.out\",\r\n         });\r\n       });\r\n     });\r\n   }\r\n@@ -486,44 +505,44 @@\n   }\r\n \r\n   cleanup() {\r\n     // Destroy all charts\r\n-    Object.values(this.charts).forEach(chart => {\r\n+    Object.values(this.charts).forEach((chart) => {\r\n       if (chart) chart.destroy();\r\n     });\r\n     this.charts = {};\r\n \r\n     // Destroy all progress bars\r\n-    Object.values(this.progressBars).forEach(progressBar => {\r\n+    Object.values(this.progressBars).forEach((progressBar) => {\r\n       if (progressBar) progressBar.destroy();\r\n     });\r\n     this.progressBars = {};\r\n \r\n     // Reset all counters\r\n-    Object.values(this.countUps).forEach(countUp => {\r\n+    Object.values(this.countUps).forEach((countUp) => {\r\n       if (countUp) countUp.reset();\r\n     });\r\n     this.countUps = {};\r\n \r\n     // Kill all GSAP animations\r\n     gsap.killTweensOf(\"*\");\r\n \r\n     // Remove event listeners\r\n-    document.querySelectorAll('.rounded-2xl').forEach(card => {\r\n-      card.removeEventListener('mouseenter', () => {});\r\n-      card.removeEventListener('mouseleave', () => {});\r\n+    document.querySelectorAll(\".rounded-2xl\").forEach((card) => {\r\n+      card.removeEventListener(\"mouseenter\", () => {});\r\n+      card.removeEventListener(\"mouseleave\", () => {});\r\n     });\r\n   }\r\n \r\n   handleResize = () => {\r\n     // Debounced resize handler for chart responsiveness\r\n     clearTimeout(this.resizeTimeout);\r\n     this.resizeTimeout = setTimeout(() => {\r\n-      Object.values(this.charts).forEach(chart => {\r\n+      Object.values(this.charts).forEach((chart) => {\r\n         if (chart) chart.resize();\r\n\\ No newline at end of file\n       });\r\n     }, 250);\r\n   };\r\n }\r\n \r\n // Export the class\r\n-export default QuoteResultPage;\n+export default QuoteResultPage;\r\n"
                },
                {
                    "date": 1731676158100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     if (!app) {\r\n-        console.error(\"App container not found\");\r\n-        return;\r\n+      console.error(\"App container not found\");\r\n+      return;\r\n     }\r\n \r\n     app.innerHTML = `\r\n         <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n@@ -108,8 +108,11 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n+    requestAnimationFrame(() => {\r\n+      this.initializeComponents();\r\n+    });\r\n   }\r\n \r\n   renderSystemSizeCard() {\r\n     return `\r\n@@ -544,5 +547,5 @@\n   };\r\n }\r\n \r\n // Export the class\r\n-export default QuoteResultPage;\n\\ No newline at end of file\n+export default QuoteResultPage;\r\n"
                },
                {
                    "date": 1731676195917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,10 +211,12 @@\n   }\r\n \r\n   initProductionChart() {\r\n     const ctx = document.getElementById(\"production-chart\");\r\n-    if (!ctx) return;\r\n-\r\n+    if (!ctx) {\r\n+      console.error(\"Production chart canvas not found\");\r\n+      return;\r\n+    }\r\n     const monthlyData = this.generateMonthlyProductionData();\r\n \r\n     this.charts.production = new Chart(ctx, {\r\n       type: \"line\",\r\n"
                },
                {
                    "date": 1731676362551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,18 +19,12 @@\n   }\r\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n-    if (!app) {\r\n-      console.error(\"App container not found\");\r\n-      return;\r\n-    }\r\n-\r\n     app.innerHTML = `\r\n-        <div class=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n-\r\n+        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-4 md:p-8\">\r\n             <!-- Header -->\r\n-            <div class=\"mb-8 flex justify-between items-center\">\r\n+            <div class=\"mb-6 flex justify-between items-center\">\r\n                 <div>\r\n                     <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n                     <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n                 </div>\r\n@@ -44,23 +38,23 @@\n                     Back\r\n                 </button>\r\n             </div>\r\n \r\n-            <!-- Bento Grid Layout -->\r\n-            <div class=\"relative max-w-[1136px] mx-auto min-h-[836px]\">\r\n-                <div class=\"flex gap-6\">\r\n+            <!-- Bento Grid Layout - Add height constraints -->\r\n+            <div class=\"relative max-w-[1136px] mx-auto h-[calc(100vh-120px)] overflow-hidden\">\r\n+                <div class=\"h-full flex gap-6\">\r\n                     <!-- Main Content Area -->\r\n-                    <div class=\"flex-1 flex flex-col gap-6\">\r\n+                    <div class=\"flex-1 flex flex-col gap-6 overflow-hidden\">\r\n                         <!-- Top Row -->\r\n-                        <div class=\"flex gap-6\">\r\n+                        <div class=\"flex gap-6 h-[45%]\">\r\n                             <!-- System Size & Cost Overview -->\r\n                             <div class=\"flex flex-col gap-6 w-[325px]\">\r\n-                                <div class=\"bg-white rounded-2xl p-6 h-[183px] flex flex-col justify-between\">\r\n+                                <div class=\"bg-white rounded-2xl p-6 flex-1 flex flex-col justify-between\">\r\n                                     ${this.renderSystemSizeCard()}\r\n                                 </div>\r\n                                 \r\n                                 <!-- Quick Stats Card -->\r\n-                                <div class=\"bg-white rounded-2xl p-6\">\r\n+                                <div class=\"bg-white rounded-2xl p-6 flex-1\">\r\n                                     ${this.renderQuickStats()}\r\n                                 </div>\r\n                             </div>\r\n                             \r\n@@ -73,9 +67,9 @@\n                             </div>\r\n                         </div>\r\n \r\n                         <!-- Bottom Row -->\r\n-                        <div class=\"flex gap-6\">\r\n+                        <div class=\"flex gap-6 h-[55%]\">\r\n                             <!-- Savings Timeline Chart -->\r\n                             <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n                                 <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n@@ -92,28 +86,30 @@\n \r\n                     <!-- Sidebar -->\r\n                     <div class=\"w-[324px] flex flex-col gap-6\">\r\n                         <!-- Monthly Production Analysis -->\r\n-                        <div class=\"h-[384px] bg-white rounded-2xl p-6\">\r\n+                        <div class=\"h-[55%] bg-white rounded-2xl p-6\">\r\n                             <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n                             <div class=\"h-[calc(100%-2rem)]\">\r\n                                 <canvas id=\"monthly-production-chart\"></canvas>\r\n                             </div>\r\n                         </div>\r\n                         \r\n                         <!-- Cost Analysis -->\r\n-                        <div class=\"flex-1 bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n+                        <div class=\"h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n                             ${this.renderCostAnalysis()}\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n+\r\n+    // Initialize components after DOM is ready\r\n     requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n+        this.initializeComponents();\r\n     });\r\n-  }\r\n+}\r\n \r\n   renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"flex flex-col h-full\">\r\n"
                },
                {
                    "date": 1731676552058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,88 +15,91 @@\n     }\r\n     this.charts = {};\r\n     this.progressBars = {};\r\n     this.countUps = {};\r\n+\r\n+    // Add resize handler\r\n+    window.addEventListener(\"resize\", this.handleResize);\r\n   }\r\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n-        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-4 md:p-8\">\r\n+        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-2 sm:p-4 md:p-8\">\r\n             <!-- Header -->\r\n-            <div class=\"mb-6 flex justify-between items-center\">\r\n+            <div class=\"mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n                 <div>\r\n-                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n+                    <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n                 </div>\r\n                 <button \r\n                     onclick=\"window.router.push('/bill-review')\"\r\n-                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n+                    class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n                 >\r\n                     <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                         <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n                     </svg>\r\n                     Back\r\n                 </button>\r\n             </div>\r\n \r\n-            <!-- Bento Grid Layout - Add height constraints -->\r\n+            <!-- Bento Grid Layout -->\r\n             <div class=\"relative max-w-[1136px] mx-auto h-[calc(100vh-120px)] overflow-hidden\">\r\n-                <div class=\"h-full flex gap-6\">\r\n+                <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n                     <!-- Main Content Area -->\r\n-                    <div class=\"flex-1 flex flex-col gap-6 overflow-hidden\">\r\n+                    <div class=\"flex-1 flex flex-col gap-4 sm:gap-6 overflow-hidden\">\r\n                         <!-- Top Row -->\r\n-                        <div class=\"flex gap-6 h-[45%]\">\r\n+                        <div class=\"flex flex-col sm:flex-row gap-4 sm:gap-6 h-auto sm:h-[45%]\">\r\n                             <!-- System Size & Cost Overview -->\r\n-                            <div class=\"flex flex-col gap-6 w-[325px]\">\r\n-                                <div class=\"bg-white rounded-2xl p-6 flex-1 flex flex-col justify-between\">\r\n+                            <div class=\"flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6 w-full sm:w-[325px]\">\r\n+                                <div class=\"bg-white rounded-2xl p-4 sm:p-6 flex-1\">\r\n                                     ${this.renderSystemSizeCard()}\r\n                                 </div>\r\n                                 \r\n                                 <!-- Quick Stats Card -->\r\n-                                <div class=\"bg-white rounded-2xl p-6 flex-1\">\r\n+                                <div class=\"bg-white rounded-2xl p-4 sm:p-6 flex-1\">\r\n                                     ${this.renderQuickStats()}\r\n                                 </div>\r\n                             </div>\r\n                             \r\n                             <!-- Energy Production Chart -->\r\n-                            <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n-                                <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                            <div class=\"flex-1 bg-white rounded-2xl p-4 sm:p-6 min-h-[300px] sm:min-h-0\">\r\n+                                <h3 class=\"text-base sm:text-lg font-semibold mb-4\">Energy Production</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n                                     <canvas id=\"production-chart\"></canvas>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n \r\n                         <!-- Bottom Row -->\r\n-                        <div class=\"flex gap-6 h-[55%]\">\r\n+                        <div class=\"flex flex-col sm:flex-row gap-4 sm:gap-6 h-auto sm:h-[55%]\">\r\n                             <!-- Savings Timeline Chart -->\r\n-                            <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n-                                <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                            <div class=\"flex-[3] bg-white rounded-2xl p-4 sm:p-6 min-h-[300px] sm:min-h-0\">\r\n+                                <h3 class=\"text-base sm:text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n                                     <canvas id=\"savings-chart\"></canvas>\r\n                                 </div>\r\n                             </div>\r\n                             \r\n                             <!-- Environmental Impact -->\r\n-                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n+                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-4 sm:p-6 text-white\">\r\n                                 ${this.renderEnvironmentalImpact()}\r\n                             </div>\r\n                         </div>\r\n                     </div>\r\n \r\n                     <!-- Sidebar -->\r\n-                    <div class=\"w-[324px] flex flex-col gap-6\">\r\n+                    <div class=\"w-full lg:w-[324px] flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6\">\r\n                         <!-- Monthly Production Analysis -->\r\n-                        <div class=\"h-[55%] bg-white rounded-2xl p-6\">\r\n-                            <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n+                        <div class=\"h-[300px] sm:h-auto lg:h-[55%] flex-1 lg:flex-none bg-white rounded-2xl p-4 sm:p-6\">\r\n+                            <h3 class=\"text-base sm:text-lg font-semibold mb-4\">Monthly Production</h3>\r\n                             <div class=\"h-[calc(100%-2rem)]\">\r\n                                 <canvas id=\"monthly-production-chart\"></canvas>\r\n                             </div>\r\n                         </div>\r\n                         \r\n                         <!-- Cost Analysis -->\r\n-                        <div class=\"h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n+                        <div class=\"h-[300px] sm:h-auto lg:h-[45%] flex-1 lg:flex-none bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-4 sm:p-6 text-white\">\r\n                             ${this.renderCostAnalysis()}\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n@@ -105,11 +108,11 @@\n     `;\r\n \r\n     // Initialize components after DOM is ready\r\n     requestAnimationFrame(() => {\r\n-        this.initializeComponents();\r\n+      this.initializeComponents();\r\n     });\r\n-}\r\n+  }\r\n \r\n   renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"flex flex-col h-full\">\r\n@@ -531,8 +534,9 @@\n     document.querySelectorAll(\".rounded-2xl\").forEach((card) => {\r\n       card.removeEventListener(\"mouseenter\", () => {});\r\n       card.removeEventListener(\"mouseleave\", () => {});\r\n     });\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n   }\r\n \r\n   handleResize = () => {\r\n     // Debounced resize handler for chart responsiveness\r\n"
                },
                {
                    "date": 1731676584154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,15 +244,31 @@\n         responsive: true,\r\n         maintainAspectRatio: false,\r\n         plugins: {\r\n           legend: {\r\n-            position: \"top\",\r\n+            position: window.innerWidth < 640 ? \"bottom\" : \"top\",\r\n+            labels: {\r\n+              boxWidth: window.innerWidth < 640 ? 8 : 12,\r\n+              padding: window.innerWidth < 640 ? 8 : 10,\r\n+            },\r\n           },\r\n         },\r\n         scales: {\r\n           y: {\r\n             beginAtZero: true,\r\n+            ticks: {\r\n+              font: {\r\n+                size: window.innerWidth < 640 ? 10 : 12,\r\n+              },\r\n+            },\r\n           },\r\n+          x: {\r\n+            ticks: {\r\n+              font: {\r\n+                size: window.innerWidth < 640 ? 10 : 12,\r\n+              },\r\n+            },\r\n+          },\r\n         },\r\n       },\r\n     });\r\n   }\r\n"
                },
                {
                    "date": 1731676791333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,91 +15,88 @@\n     }\r\n     this.charts = {};\r\n     this.progressBars = {};\r\n     this.countUps = {};\r\n-\r\n-    // Add resize handler\r\n-    window.addEventListener(\"resize\", this.handleResize);\r\n   }\r\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n-        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-2 sm:p-4 md:p-8\">\r\n+        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-4 md:p-8\">\r\n             <!-- Header -->\r\n-            <div class=\"mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n+            <div class=\"mb-6 flex justify-between items-center\">\r\n                 <div>\r\n-                    <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                    <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n+                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n                 </div>\r\n                 <button \r\n                     onclick=\"window.router.push('/bill-review')\"\r\n-                    class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n+                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n                 >\r\n                     <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                         <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n                     </svg>\r\n                     Back\r\n                 </button>\r\n             </div>\r\n \r\n-            <!-- Bento Grid Layout -->\r\n+            <!-- Bento Grid Layout - Add height constraints -->\r\n             <div class=\"relative max-w-[1136px] mx-auto h-[calc(100vh-120px)] overflow-hidden\">\r\n-                <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n+                <div class=\"h-full flex gap-6\">\r\n                     <!-- Main Content Area -->\r\n-                    <div class=\"flex-1 flex flex-col gap-4 sm:gap-6 overflow-hidden\">\r\n+                    <div class=\"flex-1 flex flex-col gap-6 overflow-hidden\">\r\n                         <!-- Top Row -->\r\n-                        <div class=\"flex flex-col sm:flex-row gap-4 sm:gap-6 h-auto sm:h-[45%]\">\r\n+                        <div class=\"flex gap-6 h-[45%]\">\r\n                             <!-- System Size & Cost Overview -->\r\n-                            <div class=\"flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6 w-full sm:w-[325px]\">\r\n-                                <div class=\"bg-white rounded-2xl p-4 sm:p-6 flex-1\">\r\n+                            <div class=\"flex flex-col gap-6 w-[325px]\">\r\n+                                <div class=\"bg-white rounded-2xl p-6 flex-1 flex flex-col justify-between\">\r\n                                     ${this.renderSystemSizeCard()}\r\n                                 </div>\r\n                                 \r\n                                 <!-- Quick Stats Card -->\r\n-                                <div class=\"bg-white rounded-2xl p-4 sm:p-6 flex-1\">\r\n+                                <div class=\"bg-white rounded-2xl p-6 flex-1\">\r\n                                     ${this.renderQuickStats()}\r\n                                 </div>\r\n                             </div>\r\n                             \r\n                             <!-- Energy Production Chart -->\r\n-                            <div class=\"flex-1 bg-white rounded-2xl p-4 sm:p-6 min-h-[300px] sm:min-h-0\">\r\n-                                <h3 class=\"text-base sm:text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                            <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n+                                <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n                                     <canvas id=\"production-chart\"></canvas>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n \r\n                         <!-- Bottom Row -->\r\n-                        <div class=\"flex flex-col sm:flex-row gap-4 sm:gap-6 h-auto sm:h-[55%]\">\r\n+                        <div class=\"flex gap-6 h-[55%]\">\r\n                             <!-- Savings Timeline Chart -->\r\n-                            <div class=\"flex-[3] bg-white rounded-2xl p-4 sm:p-6 min-h-[300px] sm:min-h-0\">\r\n-                                <h3 class=\"text-base sm:text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                            <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n+                                <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n                                     <canvas id=\"savings-chart\"></canvas>\r\n                                 </div>\r\n                             </div>\r\n                             \r\n                             <!-- Environmental Impact -->\r\n-                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-4 sm:p-6 text-white\">\r\n+                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n                                 ${this.renderEnvironmentalImpact()}\r\n                             </div>\r\n                         </div>\r\n                     </div>\r\n \r\n                     <!-- Sidebar -->\r\n-                    <div class=\"w-full lg:w-[324px] flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6\">\r\n+                    <div class=\"w-[324px] flex flex-col gap-6\">\r\n                         <!-- Monthly Production Analysis -->\r\n-                        <div class=\"h-[300px] sm:h-auto lg:h-[55%] flex-1 lg:flex-none bg-white rounded-2xl p-4 sm:p-6\">\r\n-                            <h3 class=\"text-base sm:text-lg font-semibold mb-4\">Monthly Production</h3>\r\n+                        <div class=\"h-[55%] bg-white rounded-2xl p-6\">\r\n+                            <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n                             <div class=\"h-[calc(100%-2rem)]\">\r\n                                 <canvas id=\"monthly-production-chart\"></canvas>\r\n                             </div>\r\n                         </div>\r\n                         \r\n                         <!-- Cost Analysis -->\r\n-                        <div class=\"h-[300px] sm:h-auto lg:h-[45%] flex-1 lg:flex-none bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-4 sm:p-6 text-white\">\r\n+                        <div class=\"h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n                             ${this.renderCostAnalysis()}\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n@@ -244,31 +241,15 @@\n         responsive: true,\r\n         maintainAspectRatio: false,\r\n         plugins: {\r\n           legend: {\r\n-            position: window.innerWidth < 640 ? \"bottom\" : \"top\",\r\n-            labels: {\r\n-              boxWidth: window.innerWidth < 640 ? 8 : 12,\r\n-              padding: window.innerWidth < 640 ? 8 : 10,\r\n-            },\r\n+            position: \"top\",\r\n           },\r\n         },\r\n         scales: {\r\n           y: {\r\n             beginAtZero: true,\r\n-            ticks: {\r\n-              font: {\r\n-                size: window.innerWidth < 640 ? 10 : 12,\r\n-              },\r\n-            },\r\n           },\r\n-          x: {\r\n-            ticks: {\r\n-              font: {\r\n-                size: window.innerWidth < 640 ? 10 : 12,\r\n-              },\r\n-            },\r\n-          },\r\n         },\r\n       },\r\n     });\r\n   }\r\n@@ -550,9 +531,8 @@\n     document.querySelectorAll(\".rounded-2xl\").forEach((card) => {\r\n       card.removeEventListener(\"mouseenter\", () => {});\r\n       card.removeEventListener(\"mouseleave\", () => {});\r\n     });\r\n-    window.removeEventListener(\"resize\", this.handleResize);\r\n   }\r\n \r\n   handleResize = () => {\r\n     // Debounced resize handler for chart responsiveness\r\n"
                },
                {
                    "date": 1731676851991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,179 +20,175 @@\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n-        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-4 md:p-8\">\r\n+        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-2 sm:p-4 md:p-8\">\r\n             <!-- Header -->\r\n-            <div class=\"mb-6 flex justify-between items-center\">\r\n+            <div class=\"mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n                 <div>\r\n-                    <h1 class=\"text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                    <p class=\"text-gray-500\">Based on your consumption analysis</p>\r\n+                    <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n                 </div>\r\n                 <button \r\n                     onclick=\"window.router.push('/bill-review')\"\r\n-                    class=\"inline-flex items-center px-4 py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors\"\r\n+                    class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-sm sm:text-base\"\r\n                 >\r\n                     <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                         <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n                     </svg>\r\n                     Back\r\n                 </button>\r\n             </div>\r\n \r\n-            <!-- Bento Grid Layout - Add height constraints -->\r\n-            <div class=\"relative max-w-[1136px] mx-auto h-[calc(100vh-120px)] overflow-hidden\">\r\n-                <div class=\"h-full flex gap-6\">\r\n+            <!-- Bento Grid Layout -->\r\n+            <div class=\"relative max-w-[1136px] mx-auto h-[calc(100vh-100px)] overflow-hidden\">\r\n+                <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n                     <!-- Main Content Area -->\r\n-                    <div class=\"flex-1 flex flex-col gap-6 overflow-hidden\">\r\n+                    <div class=\"flex-1 flex flex-col gap-4 sm:gap-6 overflow-hidden\">\r\n                         <!-- Top Row -->\r\n-                        <div class=\"flex gap-6 h-[45%]\">\r\n+                        <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[45%]\">\r\n                             <!-- System Size & Cost Overview -->\r\n-                            <div class=\"flex flex-col gap-6 w-[325px]\">\r\n-                                <div class=\"bg-white rounded-2xl p-6 flex-1 flex flex-col justify-between\">\r\n+                            <div class=\"flex flex-row md:flex-col gap-4 sm:gap-6 w-full md:w-[325px]\">\r\n+                                <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 flex flex-col justify-between\">\r\n                                     ${this.renderSystemSizeCard()}\r\n                                 </div>\r\n                                 \r\n                                 <!-- Quick Stats Card -->\r\n-                                <div class=\"bg-white rounded-2xl p-6 flex-1\">\r\n+                                <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6\">\r\n                                     ${this.renderQuickStats()}\r\n                                 </div>\r\n                             </div>\r\n                             \r\n                             <!-- Energy Production Chart -->\r\n-                            <div class=\"flex-1 bg-white rounded-2xl p-6\">\r\n-                                <h3 class=\"text-lg font-semibold mb-4\">Energy Production</h3>\r\n+                            <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n+                                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Energy Production</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n                                     <canvas id=\"production-chart\"></canvas>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n \r\n                         <!-- Bottom Row -->\r\n-                        <div class=\"flex gap-6 h-[55%]\">\r\n+                        <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[55%]\">\r\n                             <!-- Savings Timeline Chart -->\r\n-                            <div class=\"flex-[3] bg-white rounded-2xl p-6\">\r\n-                                <h3 class=\"text-lg font-semibold mb-4\">Savings Timeline</h3>\r\n+                            <div class=\"flex-[3] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n+                                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Savings Timeline</h3>\r\n                                 <div class=\"h-[calc(100%-2rem)]\">\r\n                                     <canvas id=\"savings-chart\"></canvas>\r\n                                 </div>\r\n                             </div>\r\n                             \r\n                             <!-- Environmental Impact -->\r\n-                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-2xl p-6 text-white\">\r\n+                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n                                 ${this.renderEnvironmentalImpact()}\r\n                             </div>\r\n                         </div>\r\n                     </div>\r\n \r\n                     <!-- Sidebar -->\r\n-                    <div class=\"w-[324px] flex flex-col gap-6\">\r\n+                    <div class=\"w-full lg:w-[324px] flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6\">\r\n                         <!-- Monthly Production Analysis -->\r\n-                        <div class=\"h-[55%] bg-white rounded-2xl p-6\">\r\n-                            <h3 class=\"text-lg font-semibold mb-4\">Monthly Production</h3>\r\n+                        <div class=\"flex-1 lg:h-[55%] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] lg:min-h-0\">\r\n+                            <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Monthly Production</h3>\r\n                             <div class=\"h-[calc(100%-2rem)]\">\r\n                                 <canvas id=\"monthly-production-chart\"></canvas>\r\n                             </div>\r\n                         </div>\r\n                         \r\n                         <!-- Cost Analysis -->\r\n-                        <div class=\"h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-2xl p-6 text-white\">\r\n+                        <div class=\"flex-1 lg:h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n                             ${this.renderCostAnalysis()}\r\n                         </div>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n+}\r\n \r\n-    // Initialize components after DOM is ready\r\n-    requestAnimationFrame(() => {\r\n-      this.initializeComponents();\r\n-    });\r\n-  }\r\n-\r\n-  renderSystemSizeCard() {\r\n+// Update the card renderers to be responsive as well\r\n+renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"flex flex-col h-full\">\r\n-            <div class=\"flex items-center justify-between mb-4\">\r\n-                <h3 class=\"text-lg font-semibold\">System Size</h3>\r\n-                <div class=\"w-10 h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n-                    <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+            <div class=\"flex items-center justify-between mb-2 sm:mb-4\">\r\n+                <h3 class=\"text-base sm:text-lg font-semibold\">System Size</h3>\r\n+                <div class=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-blue-50 flex items-center justify-center\">\r\n+                    <svg class=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                         <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                     </svg>\r\n                 </div>\r\n             </div>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"text-3xl font-bold text-gray-900 mb-2\">\r\n+                <div class=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-1 sm:mb-2\">\r\n                     <span id=\"system-size-value\">0</span>\r\n-                    <span class=\"text-lg text-gray-500\">kW</span>\r\n+                    <span class=\"text-base sm:text-lg text-gray-500\">kW</span>\r\n                 </div>\r\n-                <div class=\"text-sm text-gray-500\">Recommended capacity</div>\r\n+                <div class=\"text-xs sm:text-sm text-gray-500\">Recommended capacity</div>\r\n             </div>\r\n-            <div id=\"system-size-progress\" class=\"h-2 mt-4\"></div>\r\n+            <div id=\"system-size-progress\" class=\"h-2 mt-2 sm:mt-4\"></div>\r\n         </div>\r\n     `;\r\n-  }\r\n+}\r\n \r\n-  renderQuickStats() {\r\n+renderQuickStats() {\r\n     return `\r\n-        <div class=\"grid grid-cols-2 gap-4\">\r\n+        <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n             <div class=\"text-center\">\r\n-                <div class=\"text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n-                <div class=\"text-sm text-gray-600\">Daily kWh</div>\r\n+                <div class=\"text-xl sm:text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n+                <div class=\"text-xs sm:text-sm text-gray-600\">Daily kWh</div>\r\n             </div>\r\n             <div class=\"text-center\">\r\n-                <div class=\"text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n-                <div class=\"text-sm text-gray-600\">Monthly PKR</div>\r\n+                <div class=\"text-xl sm:text-3xl font-bold text-blue-600\" id=\"monthly-savings\">0</div>\r\n+                <div class=\"text-xs sm:text-sm text-gray-600\">Monthly PKR</div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-  }\r\n+}\r\n \r\n-  renderEnvironmentalImpact() {\r\n+renderEnvironmentalImpact() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n-            <h3 class=\"text-lg font-semibold mb-4\">Environmental Impact</h3>\r\n+            <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Environmental Impact</h3>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"mb-6\">\r\n-                    <div class=\"text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n-                    <div class=\"text-3xl font-bold\" id=\"co2-value\">0</div>\r\n-                    <div class=\"w-full bg-white/20 h-2 rounded-full mt-2\">\r\n+                <div class=\"mb-4 sm:mb-6\">\r\n+                    <div class=\"text-xs sm:text-sm opacity-80 mb-1\">CO₂ Offset</div>\r\n+                    <div class=\"text-xl sm:text-3xl font-bold\" id=\"co2-value\">0</div>\r\n+                    <div class=\"w-full bg-white/20 h-1.5 sm:h-2 rounded-full mt-2\">\r\n                         <div class=\"bg-white h-full rounded-full\" style=\"width: 75%\"></div>\r\n                     </div>\r\n                 </div>\r\n-                <div class=\"grid grid-cols-2 gap-4\">\r\n+                <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n                     <div>\r\n-                        <div class=\"text-sm opacity-80\">Trees Equivalent</div>\r\n-                        <div class=\"text-2xl font-bold\" id=\"trees-value\">0</div>\r\n+                        <div class=\"text-xs sm:text-sm opacity-80\">Trees Equivalent</div>\r\n+                        <div class=\"text-lg sm:text-2xl font-bold\" id=\"trees-value\">0</div>\r\n                     </div>\r\n                     <div>\r\n-                        <div class=\"text-sm opacity-80\">Energy for Homes</div>\r\n-                        <div class=\"text-2xl font-bold\" id=\"homes-value\">0</div>\r\n+                        <div class=\"text-xs sm:text-sm opacity-80\">Energy for Homes</div>\r\n+                        <div class=\"text-lg sm:text-2xl font-bold\" id=\"homes-value\">0</div>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-  }\r\n+}\r\n \r\n-  renderCostAnalysis() {\r\n+renderCostAnalysis() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n-            <h3 class=\"text-lg font-semibold mb-4\">Cost Analysis</h3>\r\n+            <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Cost Analysis</h3>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n-                <div class=\"text-4xl font-bold mb-2\" id=\"total-cost\">0</div>\r\n-                <div class=\"text-sm opacity-80\">Total Investment</div>\r\n-                <div class=\"mt-4 text-sm bg-white/20 rounded-lg px-3 py-2 inline-flex items-center\">\r\n-                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                <div class=\"text-2xl sm:text-4xl font-bold mb-1 sm:mb-2\" id=\"total-cost\">0</div>\r\n+                <div class=\"text-xs sm:text-sm opacity-80\">Total Investment</div>\r\n+                <div class=\"mt-3 sm:mt-4 text-xs sm:text-sm bg-white/20 rounded-lg px-2 sm:px-3 py-1.5 sm:py-2 inline-flex items-center\">\r\n+                    <svg class=\"w-3 h-3 sm:w-4 sm:h-4 mr-1.5 sm:mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                         <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n                     </svg>\r\n                     30% Tax Credit Available\r\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-  }\r\n+}\r\n \r\n   initializeComponents() {\r\n     this.initCharts();\r\n     this.initCounters();\r\n"
                },
                {
                    "date": 1731676893533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,12 +102,12 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-// Update the card renderers to be responsive as well\r\n-renderSystemSizeCard() {\r\n+  // Update the card renderers to be responsive as well\r\n+  renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"flex flex-col h-full\">\r\n             <div class=\"flex items-center justify-between mb-2 sm:mb-4\">\r\n                 <h3 class=\"text-base sm:text-lg font-semibold\">System Size</h3>\r\n@@ -126,11 +126,11 @@\n             </div>\r\n             <div id=\"system-size-progress\" class=\"h-2 mt-2 sm:mt-4\"></div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderQuickStats() {\r\n+  renderQuickStats() {\r\n     return `\r\n         <div class=\"grid grid-cols-2 gap-3 sm:gap-4\">\r\n             <div class=\"text-center\">\r\n                 <div class=\"text-xl sm:text-3xl font-bold text-emerald-600\" id=\"daily-production\">0</div>\r\n@@ -141,11 +141,11 @@\n                 <div class=\"text-xs sm:text-sm text-gray-600\">Monthly PKR</div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderEnvironmentalImpact() {\r\n+  renderEnvironmentalImpact() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Environmental Impact</h3>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n@@ -168,11 +168,11 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n-renderCostAnalysis() {\r\n+  renderCostAnalysis() {\r\n     return `\r\n         <div class=\"h-full flex flex-col\">\r\n             <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Cost Analysis</h3>\r\n             <div class=\"flex-1 flex flex-col justify-center\">\r\n@@ -186,17 +186,19 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-}\r\n+  }\r\n \r\n   initializeComponents() {\r\n+    // Add resize listener\r\n+    window.addEventListener(\"resize\", this.handleResize);\r\n+\r\n     this.initCharts();\r\n     this.initCounters();\r\n     this.initProgressBars();\r\n     this.startAnimations();\r\n   }\r\n-\r\n   initCharts() {\r\n     this.initProductionChart();\r\n     this.initSavingsChart();\r\n     this.initMonthlyProductionChart();\r\n@@ -527,16 +529,18 @@\n     document.querySelectorAll(\".rounded-2xl\").forEach((card) => {\r\n       card.removeEventListener(\"mouseenter\", () => {});\r\n       card.removeEventListener(\"mouseleave\", () => {});\r\n     });\r\n+    window.removeEventListener(\"resize\", this.handleResize);\r\n   }\r\n \r\n   handleResize = () => {\r\n-    // Debounced resize handler for chart responsiveness\r\n     clearTimeout(this.resizeTimeout);\r\n     this.resizeTimeout = setTimeout(() => {\r\n       Object.values(this.charts).forEach((chart) => {\r\n-        if (chart) chart.resize();\r\n+        if (chart) {\r\n+          chart.resize();\r\n+        }\r\n       });\r\n     }, 250);\r\n   };\r\n }\r\n"
                },
                {
                    "date": 1731677150504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n export class QuoteResultPage {\r\n   constructor() {\r\n     try {\r\n       this.billData = getBillData();\r\n+      console.log(\"Bill Data loaded:\", this.billData); // Add this log\r\n       this.error = getError();\r\n     } catch (error) {\r\n       console.error(\"Error in QuoteResultPage constructor:\", error);\r\n       this.error = \"Failed to load bill data. Please try again.\";\r\n@@ -189,16 +190,88 @@\n     `;\r\n   }\r\n \r\n   initializeComponents() {\r\n-    // Add resize listener\r\n-    window.addEventListener(\"resize\", this.handleResize);\r\n+    if (!this.billData) {\r\n+      console.error(\"No bill data available\");\r\n+      // Optionally redirect back to input page\r\n+      window.router.push(\"/\");\r\n+      return;\r\n+    }\r\n \r\n-    this.initCharts();\r\n-    this.initCounters();\r\n-    this.initProgressBars();\r\n-    this.startAnimations();\r\n+    console.log(\"Initializing components with data:\", this.billData);\r\n+    requestAnimationFrame(() => {\r\n+      try {\r\n+        this.initCharts();\r\n+        this.initCounters();\r\n+        this.initProgressBars();\r\n+        this.startAnimations();\r\n+      } catch (error) {\r\n+        console.error(\"Error initializing components:\", error);\r\n+      }\r\n+    });\r\n   }\r\n+\r\n+  initCounters() {\r\n+    if (!this.billData) return;\r\n+\r\n+    const counterConfigs = [\r\n+      {\r\n+        id: \"system-size-value\",\r\n+        value: this.billData.recommendedSystemSize,\r\n+        decimals: 2,\r\n+      },\r\n+      {\r\n+        id: \"daily-production\",\r\n+        value: this.billData.estimatedDailyProduction,\r\n+        decimals: 1,\r\n+      },\r\n+      {\r\n+        id: \"monthly-savings\",\r\n+        value: this.billData.estimatedAnnualSavings / 12,\r\n+        formatter: (value) => `PKR ${Math.round(value).toLocaleString()}`,\r\n+      },\r\n+      {\r\n+        id: \"total-cost\",\r\n+        value: this.billData.estimatedSystemCost,\r\n+        formatter: (value) => `PKR ${Math.round(value).toLocaleString()}`,\r\n+      },\r\n+      {\r\n+        id: \"co2-value\",\r\n+        value: this.calculateCO2Offset(),\r\n+        decimals: 1,\r\n+        suffix: \" tons/year\",\r\n+      },\r\n+    ];\r\n+\r\n+    counterConfigs.forEach((config) => {\r\n+      const element = document.getElementById(config.id);\r\n+      if (!element) {\r\n+        console.warn(`Element not found for counter: ${config.id}`);\r\n+        return;\r\n+      }\r\n+\r\n+      this.countUps[config.id] = new CountUp(config.id, config.value, {\r\n+        decimal: \".\",\r\n+        decimals: config.decimals || 0,\r\n+        duration: 2,\r\n+        useEasing: true,\r\n+        useGrouping: true,\r\n+        separator: \",\",\r\n+        ...config,\r\n+      });\r\n+\r\n+      if (!this.countUps[config.id].error) {\r\n+        this.countUps[config.id].start();\r\n+      } else {\r\n+        console.error(\r\n+          `Error setting up counter for ${config.id}:`,\r\n+          this.countUps[config.id].error\r\n+        );\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n   initCharts() {\r\n     this.initProductionChart();\r\n     this.initSavingsChart();\r\n     this.initMonthlyProductionChart();\r\n@@ -386,59 +459,8 @@\n       consumption,\r\n     };\r\n   }\r\n \r\n-  initCounters() {\r\n-    const counterData = [\r\n-      {\r\n-        id: \"system-size-value\",\r\n-        value: this.billData.recommendedSystemSize,\r\n-        decimals: 2,\r\n-      },\r\n-      {\r\n-        id: \"total-cost\",\r\n-        value: this.billData.estimatedSystemCost,\r\n-        prefix: \"PKR \",\r\n-        separator: \",\",\r\n-      },\r\n-      {\r\n-        id: \"co2-value\",\r\n-        value: this.calculateCO2Offset(),\r\n-        decimals: 1,\r\n-        suffix: \" tons/year\",\r\n-      },\r\n-      {\r\n-        id: \"trees-value\",\r\n-        value: Math.round(this.calculateCO2Offset() * 40),\r\n-      },\r\n-      {\r\n-        id: \"homes-value\",\r\n-        value: Math.round(this.billData.estimatedAnnualProduction / 12000),\r\n-      },\r\n-    ];\r\n-\r\n-    counterData.forEach((counter) => {\r\n-      const element = document.getElementById(counter.id);\r\n-      if (!element) return;\r\n-\r\n-      this.countUps[counter.id] = new CountUp(counter.id, counter.value, {\r\n-        startVal: 0,\r\n-        duration: 2,\r\n-        useEasing: true,\r\n-        useGrouping: true,\r\n-        separator: counter.separator || \"\",\r\n-        decimal: \".\",\r\n-        prefix: counter.prefix || \"\",\r\n-        suffix: counter.suffix || \"\",\r\n-        decimals: counter.decimals || 0,\r\n-      });\r\n-\r\n-      if (!this.countUps[counter.id].error) {\r\n-        this.countUps[counter.id].start();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n   initProgressBars() {\r\n     // System Size Progress Bar\r\n     const systemSizeProgress = document.getElementById(\"system-size-progress\");\r\n     if (systemSizeProgress) {\r\n"
                },
                {
                    "date": 1731677305156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,10 +103,16 @@\n                 </div>\r\n             </div>\r\n         </div>\r\n     `;\r\n-  }\r\n \r\n+    // Add this line after setting innerHTML\r\n+    this.initializeComponents();\r\n+\r\n+    // Also add resize listener\r\n+    window.addEventListener(\"resize\", this.handleResize);\r\n+}\r\n+\r\n   // Update the card renderers to be responsive as well\r\n   renderSystemSizeCard() {\r\n     return `\r\n         <div class=\"flex flex-col h-full\">\r\n"
                },
                {
                    "date": 1731677627869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,31 +21,31 @@\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n-        <div class=\"min-h-screen max-h-screen overflow-hidden bg-gray-50 p-2 sm:p-4 md:p-8\">\r\n-            <!-- Header -->\r\n-            <div class=\"mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n-                <div>\r\n-                    <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                    <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n-                </div>\r\n-                <button \r\n-                    onclick=\"window.router.push('/bill-review')\"\r\n-                    class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-sm sm:text-base\"\r\n-                >\r\n-                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n-                    </svg>\r\n-                    Back\r\n-                </button>\r\n+    <div class=\"h-screen bg-gray-50 p-2 sm:p-4 md:p-8 flex flex-col\">\r\n+        <!-- Header -->\r\n+        <div class=\"flex-shrink-0 mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n+            <div>\r\n+                <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n             </div>\r\n+            <button \r\n+                onclick=\"window.router.push('/bill-review')\"\r\n+                class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-sm sm:text-base\"\r\n+            >\r\n+                <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n+                </svg>\r\n+                Back\r\n+            </button>\r\n+        </div>\r\n \r\n-            <!-- Bento Grid Layout -->\r\n-            <div class=\"relative max-w-[1136px] mx-auto h-[calc(100vh-100px)] overflow-hidden\">\r\n-                <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n-                    <!-- Main Content Area -->\r\n-                    <div class=\"flex-1 flex flex-col gap-4 sm:gap-6 overflow-hidden\">\r\n+        <!-- Bento Grid Layout -->\r\n+        <div class=\"relative flex-1 max-w-[1136px] mx-auto overflow-hidden\">\r\n+            <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n+                <!-- Main Content Area -->\r\n+                <div class=\"flex-1 flex flex-col gap-4 sm:gap-6 min-h-0\">\r\n                         <!-- Top Row -->\r\n                         <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[45%]\">\r\n                             <!-- System Size & Cost Overview -->\r\n                             <div class=\"flex flex-row md:flex-col gap-4 sm:gap-6 w-full md:w-[325px]\">\r\n@@ -109,9 +109,9 @@\n     this.initializeComponents();\r\n \r\n     // Also add resize listener\r\n     window.addEventListener(\"resize\", this.handleResize);\r\n-}\r\n+  }\r\n \r\n   // Update the card renderers to be responsive as well\r\n   renderSystemSizeCard() {\r\n     return `\r\n"
                },
                {
                    "date": 1731677818624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,90 +21,97 @@\n \r\n   render() {\r\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n-    <div class=\"h-screen bg-gray-50 p-2 sm:p-4 md:p-8 flex flex-col\">\r\n-        <!-- Header -->\r\n-        <div class=\"flex-shrink-0 mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n-            <div>\r\n-                <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n-                <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n+    <div class=\"h-screen w-full overflow-hidden bg-gray-50\">\r\n+        <div class=\"h-full w-full flex flex-col p-2 sm:p-4 md:p-8\">\r\n+            <!-- Header - Fixed height -->\r\n+            <div class=\"flex-none mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n+                <div>\r\n+                    <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n+                    <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n+                </div>\r\n+                <button \r\n+                    onclick=\"window.router.push('/bill-review')\"\r\n+                    class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-sm sm:text-base\"\r\n+                >\r\n+                    <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n+                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n+                    </svg>\r\n+                    Back\r\n+                </button>\r\n             </div>\r\n-            <button \r\n-                onclick=\"window.router.push('/bill-review')\"\r\n-                class=\"inline-flex items-center px-3 py-1.5 sm:px-4 sm:py-2 rounded-lg bg-white border border-gray-200 shadow-sm hover:bg-gray-50 transition-colors text-sm sm:text-base\"\r\n-            >\r\n-                <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n-                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\r\n-                </svg>\r\n-                Back\r\n-            </button>\r\n-        </div>\r\n \r\n-        <!-- Bento Grid Layout -->\r\n-        <div class=\"relative flex-1 max-w-[1136px] mx-auto overflow-hidden\">\r\n-            <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n-                <!-- Main Content Area -->\r\n-                <div class=\"flex-1 flex flex-col gap-4 sm:gap-6 min-h-0\">\r\n-                        <!-- Top Row -->\r\n-                        <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[45%]\">\r\n-                            <!-- System Size & Cost Overview -->\r\n-                            <div class=\"flex flex-row md:flex-col gap-4 sm:gap-6 w-full md:w-[325px]\">\r\n-                                <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 flex flex-col justify-between\">\r\n-                                    ${this.renderSystemSizeCard()}\r\n+            <!-- Main Content Area - Scrollable -->\r\n+            <div class=\"flex-1 min-h-0 relative\">\r\n+                <div class=\"absolute inset-0 overflow-auto\">\r\n+                    <div class=\"max-w-[1136px] mx-auto h-full\">\r\n+                        <!-- Bento Grid Layout -->\r\n+                        <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n+                            <!-- Main Content Area -->\r\n+                            <div class=\"flex-1 flex flex-col gap-4 sm:gap-6\">\r\n+                                <!-- Top Row -->\r\n+                                <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[45%]\">\r\n+                                    <!-- System Size & Cost Overview -->\r\n+                                    <div class=\"flex flex-row md:flex-col gap-4 sm:gap-6 w-full md:w-[325px]\">\r\n+                                        <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 flex flex-col justify-between\">\r\n+                                            ${this.renderSystemSizeCard()}\r\n+                                        </div>\r\n+                                        \r\n+                                        <!-- Quick Stats Card -->\r\n+                                        <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6\">\r\n+                                            ${this.renderQuickStats()}\r\n+                                        </div>\r\n+                                    </div>\r\n+                                    \r\n+                                    <!-- Energy Production Chart -->\r\n+                                    <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n+                                        <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Energy Production</h3>\r\n+                                        <div class=\"h-[calc(100%-2rem)]\">\r\n+                                            <canvas id=\"production-chart\"></canvas>\r\n+                                        </div>\r\n+                                    </div>\r\n                                 </div>\r\n-                                \r\n-                                <!-- Quick Stats Card -->\r\n-                                <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6\">\r\n-                                    ${this.renderQuickStats()}\r\n+\r\n+                                <!-- Bottom Row -->\r\n+                                <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[55%]\">\r\n+                                    <!-- Savings Timeline Chart -->\r\n+                                    <div class=\"flex-[3] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n+                                        <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Savings Timeline</h3>\r\n+                                        <div class=\"h-[calc(100%-2rem)]\">\r\n+                                            <canvas id=\"savings-chart\"></canvas>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                    \r\n+                                    <!-- Environmental Impact -->\r\n+                                    <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n+                                        ${this.renderEnvironmentalImpact()}\r\n+                                    </div>\r\n                                 </div>\r\n                             </div>\r\n-                            \r\n-                            <!-- Energy Production Chart -->\r\n-                            <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n-                                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Energy Production</h3>\r\n-                                <div class=\"h-[calc(100%-2rem)]\">\r\n-                                    <canvas id=\"production-chart\"></canvas>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n \r\n-                        <!-- Bottom Row -->\r\n-                        <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[55%]\">\r\n-                            <!-- Savings Timeline Chart -->\r\n-                            <div class=\"flex-[3] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n-                                <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Savings Timeline</h3>\r\n-                                <div class=\"h-[calc(100%-2rem)]\">\r\n-                                    <canvas id=\"savings-chart\"></canvas>\r\n+                            <!-- Sidebar -->\r\n+                            <div class=\"w-full lg:w-[324px] flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6\">\r\n+                                <!-- Monthly Production Analysis -->\r\n+                                <div class=\"flex-1 lg:h-[55%] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] lg:min-h-0\">\r\n+                                    <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Monthly Production</h3>\r\n+                                    <div class=\"h-[calc(100%-2rem)]\">\r\n+                                        <canvas id=\"monthly-production-chart\"></canvas>\r\n+                                    </div>\r\n                                 </div>\r\n+                                \r\n+                                <!-- Cost Analysis -->\r\n+                                <div class=\"flex-1 lg:h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n+                                    ${this.renderCostAnalysis()}\r\n+                                </div>\r\n                             </div>\r\n-                            \r\n-                            <!-- Environmental Impact -->\r\n-                            <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n-                                ${this.renderEnvironmentalImpact()}\r\n-                            </div>\r\n                         </div>\r\n                     </div>\r\n-\r\n-                    <!-- Sidebar -->\r\n-                    <div class=\"w-full lg:w-[324px] flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6\">\r\n-                        <!-- Monthly Production Analysis -->\r\n-                        <div class=\"flex-1 lg:h-[55%] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] lg:min-h-0\">\r\n-                            <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Monthly Production</h3>\r\n-                            <div class=\"h-[calc(100%-2rem)]\">\r\n-                                <canvas id=\"monthly-production-chart\"></canvas>\r\n-                            </div>\r\n-                        </div>\r\n-                        \r\n-                        <!-- Cost Analysis -->\r\n-                        <div class=\"flex-1 lg:h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n-                            ${this.renderCostAnalysis()}\r\n-                        </div>\r\n-                    </div>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n-    `;\r\n+    </div>\r\n+`;\r\n \r\n     // Add this line after setting innerHTML\r\n     this.initializeComponents();\r\n \r\n"
                },
                {
                    "date": 1731677861627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,35 @@\n     this.initializeComponents();\r\n \r\n     // Also add resize listener\r\n     window.addEventListener(\"resize\", this.handleResize);\r\n+\r\n+    const style = document.createElement(\"style\");\r\n+    style.textContent = `\r\n+    /* Custom Scrollbar Styles */\r\n+    .overflow-auto {\r\n+        scrollbar-width: thin;\r\n+        scrollbar-color: rgba(156, 163, 175, 0.3) transparent;\r\n+    }\r\n+    \r\n+    .overflow-auto::-webkit-scrollbar {\r\n+        width: 6px;\r\n+    }\r\n+    \r\n+    .overflow-auto::-webkit-scrollbar-track {\r\n+        background: transparent;\r\n+    }\r\n+    \r\n+    .overflow-auto::-webkit-scrollbar-thumb {\r\n+        background-color: rgba(156, 163, 175, 0.3);\r\n+        border-radius: 3px;\r\n+    }\r\n+    \r\n+    .overflow-auto::-webkit-scrollbar-thumb:hover {\r\n+        background-color: rgba(156, 163, 175, 0.5);\r\n+    }\r\n+`;\r\n+    document.head.appendChild(style);\r\n   }\r\n \r\n   // Update the card renderers to be responsive as well\r\n   renderSystemSizeCard() {\r\n"
                },
                {
                    "date": 1731678025268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     const app = document.getElementById(\"app\");\r\n     app.innerHTML = `\r\n     <div class=\"h-screen w-full overflow-hidden bg-gray-50\">\r\n         <div class=\"h-full w-full flex flex-col p-2 sm:p-4 md:p-8\">\r\n-            <!-- Header - Fixed height -->\r\n+            <!-- Header -->\r\n             <div class=\"flex-none mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 sm:gap-0\">\r\n                 <div>\r\n                     <h1 class=\"text-xl sm:text-2xl font-bold text-gray-900\">Solar System Quote</h1>\r\n                     <p class=\"text-sm sm:text-base text-gray-500\">Based on your consumption analysis</p>\r\n@@ -40,68 +40,59 @@\n                     Back\r\n                 </button>\r\n             </div>\r\n \r\n-            <!-- Main Content Area - Scrollable -->\r\n+            <!-- Main Content Area -->\r\n             <div class=\"flex-1 min-h-0 relative\">\r\n                 <div class=\"absolute inset-0 overflow-auto\">\r\n-                    <div class=\"max-w-[1136px] mx-auto h-full\">\r\n-                        <!-- Bento Grid Layout -->\r\n-                        <div class=\"h-full flex flex-col lg:flex-row gap-4 sm:gap-6\">\r\n-                            <!-- Main Content Area -->\r\n-                            <div class=\"flex-1 flex flex-col gap-4 sm:gap-6\">\r\n+                    <div class=\"h-full max-w-[1136px] mx-auto pb-6\">\r\n+                        <div class=\"grid grid-cols-1 lg:grid-cols-[1fr,324px] gap-4 sm:gap-6\">\r\n+                            <!-- Left Column -->\r\n+                            <div class=\"space-y-4 sm:space-y-6\">\r\n                                 <!-- Top Row -->\r\n-                                <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[45%]\">\r\n-                                    <!-- System Size & Cost Overview -->\r\n-                                    <div class=\"flex flex-row md:flex-col gap-4 sm:gap-6 w-full md:w-[325px]\">\r\n-                                        <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 flex flex-col justify-between\">\r\n+                                <div class=\"grid grid-cols-1 md:grid-cols-[325px,1fr] gap-4 sm:gap-6\">\r\n+                                    <!-- System Size & Stats Cards -->\r\n+                                    <div class=\"grid grid-cols-2 md:grid-cols-1 gap-4 sm:gap-6\">\r\n+                                        <div class=\"bg-white rounded-xl shadow-sm p-4 sm:p-6\">\r\n                                             ${this.renderSystemSizeCard()}\r\n                                         </div>\r\n-                                        \r\n-                                        <!-- Quick Stats Card -->\r\n-                                        <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6\">\r\n+                                        <div class=\"bg-white rounded-xl shadow-sm p-4 sm:p-6\">\r\n                                             ${this.renderQuickStats()}\r\n                                         </div>\r\n                                     </div>\r\n                                     \r\n-                                    <!-- Energy Production Chart -->\r\n-                                    <div class=\"flex-1 bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n+                                    <!-- Production Chart -->\r\n+                                    <div class=\"bg-white rounded-xl shadow-sm p-4 sm:p-6\">\r\n                                         <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Energy Production</h3>\r\n-                                        <div class=\"h-[calc(100%-2rem)]\">\r\n+                                        <div class=\"h-[250px] md:h-[300px]\">\r\n                                             <canvas id=\"production-chart\"></canvas>\r\n                                         </div>\r\n                                     </div>\r\n                                 </div>\r\n \r\n                                 <!-- Bottom Row -->\r\n-                                <div class=\"flex flex-col md:flex-row gap-4 sm:gap-6 h-auto md:h-[55%]\">\r\n-                                    <!-- Savings Timeline Chart -->\r\n-                                    <div class=\"flex-[3] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] md:min-h-0\">\r\n+                                <div class=\"grid grid-cols-1 md:grid-cols-[2fr,1fr] gap-4 sm:gap-6\">\r\n+                                    <div class=\"bg-white rounded-xl shadow-sm p-4 sm:p-6\">\r\n                                         <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Savings Timeline</h3>\r\n-                                        <div class=\"h-[calc(100%-2rem)]\">\r\n+                                        <div class=\"h-[250px] md:h-[300px]\">\r\n                                             <canvas id=\"savings-chart\"></canvas>\r\n                                         </div>\r\n                                     </div>\r\n-                                    \r\n-                                    <!-- Environmental Impact -->\r\n-                                    <div class=\"flex-1 bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n+                                    <div class=\"bg-gradient-to-br from-emerald-700 to-emerald-500 rounded-xl shadow-sm p-4 sm:p-6 text-white\">\r\n                                         ${this.renderEnvironmentalImpact()}\r\n                                     </div>\r\n                                 </div>\r\n                             </div>\r\n \r\n-                            <!-- Sidebar -->\r\n-                            <div class=\"w-full lg:w-[324px] flex flex-col sm:flex-row lg:flex-col gap-4 sm:gap-6\">\r\n-                                <!-- Monthly Production Analysis -->\r\n-                                <div class=\"flex-1 lg:h-[55%] bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 min-h-[300px] lg:min-h-0\">\r\n+                            <!-- Right Column -->\r\n+                            <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-4 sm:gap-6\">\r\n+                                <div class=\"bg-white rounded-xl shadow-sm p-4 sm:p-6\">\r\n                                     <h3 class=\"text-base sm:text-lg font-semibold mb-2 sm:mb-4\">Monthly Production</h3>\r\n-                                    <div class=\"h-[calc(100%-2rem)]\">\r\n+                                    <div class=\"h-[250px]\">\r\n                                         <canvas id=\"monthly-production-chart\"></canvas>\r\n                                     </div>\r\n                                 </div>\r\n-                                \r\n-                                <!-- Cost Analysis -->\r\n-                                <div class=\"flex-1 lg:h-[45%] bg-gradient-to-br from-blue-700 to-blue-500 rounded-xl sm:rounded-2xl p-4 sm:p-6 text-white\">\r\n+                                <div class=\"bg-gradient-to-br from-blue-700 to-blue-500 rounded-xl shadow-sm p-4 sm:p-6 text-white\">\r\n                                     ${this.renderCostAnalysis()}\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n@@ -518,48 +509,33 @@\n     }\r\n   }\r\n \r\n   startAnimations() {\r\n-    // Animate cards entrance\r\n-    gsap.from(\".rounded-2xl\", {\r\n-      duration: 0.8,\r\n-      opacity: 0,\r\n-      y: 20,\r\n-      stagger: {\r\n-        amount: 0.4,\r\n-        from: \"random\",\r\n+    // Animate cards entrance with proper class targeting\r\n+    const cards = document.querySelectorAll(\".bg-white, .bg-gradient-to-br\");\r\n+\r\n+    gsap.fromTo(\r\n+      cards,\r\n+      {\r\n+        opacity: 0,\r\n+        y: 20,\r\n       },\r\n-      ease: \"power3.out\",\r\n-    });\r\n-\r\n-    // Animate progress bars\r\n-    gsap.to(\".bg-white.h-full.rounded-full\", {\r\n-      width: \"75%\",\r\n-      duration: 1.5,\r\n-      delay: 0.5,\r\n-      ease: \"power2.out\",\r\n-    });\r\n-\r\n-    // Add hover animations for cards\r\n-    document.querySelectorAll(\".rounded-2xl\").forEach((card) => {\r\n-      card.addEventListener(\"mouseenter\", () => {\r\n-        gsap.to(card, {\r\n-          scale: 1.01,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-\r\n-      card.addEventListener(\"mouseleave\", () => {\r\n-        gsap.to(card, {\r\n-          scale: 1,\r\n-          duration: 0.3,\r\n-          ease: \"power2.out\",\r\n-        });\r\n-      });\r\n-    });\r\n+      {\r\n+        opacity: 1,\r\n+        y: 0,\r\n+        duration: 0.5,\r\n+        stagger: 0.1,\r\n+        ease: \"power2.out\",\r\n+        onComplete: () => {\r\n+          // Start other animations after cards are visible\r\n+          this.startCountUps();\r\n+          if (this.progressBar) {\r\n+            this.progressBar.animate(0.75);\r\n+          }\r\n+        },\r\n+      }\r\n+    );\r\n   }\r\n-\r\n   calculateCO2Offset() {\r\n     // Calculate CO2 offset based on annual production\r\n     // Average of 0.7 kg CO2 per kWh\r\n     return this.billData.estimatedAnnualProduction * 0.0007; // Convert to tons\r\n"
                }
            ],
            "date": 1731667075389,
            "name": "Commit-0",
            "content": "import { gsap } from \"gsap\";\r\nimport { getBillData, getError } from \"../store/solarSizingState.js\";\r\nimport Chart from \"chart.js/auto\";\r\nimport { CountUp } from \"countup.js\";\r\nimport ProgressBar from \"progressbar.js\";\r\n\r\nexport class QuoteResultPage {\r\n    constructor() {\r\n        try {\r\n            this.billData = getBillData();\r\n            this.error = getError();\r\n        } catch (error) {\r\n            console.error(\"Error in QuoteResultPage constructor:\", error);\r\n            this.error = \"Failed to load bill data. Please try again.\";\r\n        }\r\n        this.charts = {};\r\n        this.progressBars = {};\r\n        this.countUps = {};\r\n    }\r\n\r\n    render() {\r\n        const app = document.getElementById(\"app\");\r\n        app.innerHTML = `\r\n            <div class=\"min-h-screen bg-slate-50 p-8\">\r\n                <!-- Header -->\r\n                <div class=\"max-w-7xl mx-auto mb-8\">\r\n                    <h1 class=\"text-3xl font-bold text-gray-900\">Your Solar System Quote</h1>\r\n                    <p class=\"text-gray-600 mt-2\">Based on your energy consumption analysis</p>\r\n                </div>\r\n\r\n                <!-- Main Grid -->\r\n                <div class=\"max-w-7xl mx-auto grid grid-cols-12 gap-6\">\r\n                    <!-- System Size Card - Span 4 columns -->\r\n                    <div class=\"col-span-4 bg-white rounded-2xl p-6 shadow-sm\">\r\n                        <div class=\"flex items-start justify-between\">\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">Recommended System Size</p>\r\n                                <h2 class=\"text-4xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"system-size-value\">0</span>\r\n                                    <span class=\"text-xl font-normal text-gray-500\">kW</span>\r\n                                </h2>\r\n                            </div>\r\n                            <div class=\"bg-blue-50 p-3 rounded-xl\">\r\n                                <svg class=\"w-6 h-6 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mt-4\">\r\n                            <div id=\"system-size-progress\" class=\"h-2 bg-gray-100 rounded-full\"></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Cost Card - Span 4 columns -->\r\n                    <div class=\"col-span-4 bg-white rounded-2xl p-6 shadow-sm\">\r\n                        <div class=\"flex items-start justify-between\">\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">Total Investment</p>\r\n                                <h2 class=\"text-4xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"cost-value\">0</span>\r\n                                </h2>\r\n                            </div>\r\n                            <div class=\"bg-green-50 p-3 rounded-xl\">\r\n                                <svg class=\"w-6 h-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mt-4 flex items-center justify-between text-sm\">\r\n                            <span class=\"text-gray-600\">Federal Tax Credit</span>\r\n                            <span class=\"text-green-600 font-medium\">-30%</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Payback Period Card - Span 4 columns -->\r\n                    <div class=\"col-span-4 bg-white rounded-2xl p-6 shadow-sm\">\r\n                        <div class=\"flex items-start justify-between\">\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">Payback Period</p>\r\n                                <h2 class=\"text-4xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"payback-value\">0</span>\r\n                                    <span class=\"text-xl font-normal text-gray-500\">years</span>\r\n                                </h2>\r\n                            </div>\r\n                            <div class=\"bg-purple-50 p-3 rounded-xl\">\r\n                                <svg class=\"w-6 h-6 text-purple-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mt-4 flex items-center justify-between text-sm\">\r\n                            <span class=\"text-gray-600\">Annual Savings</span>\r\n                            <span id=\"annual-savings-value\" class=\"text-purple-600 font-medium\">\r\n                                0\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <!-- Production Chart - Span 8 columns -->\r\n                    <div class=\"col-span-8 bg-white rounded-2xl p-6 shadow-sm\">\r\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Energy Production</h3>\r\n                        <canvas id=\"energy-production-chart\" height=\"300\"></canvas>\r\n                    </div>\r\n\r\n                    <!-- Statistics Grid - Span 4 columns -->\r\n                    <div class=\"col-span-4 grid grid-cols-2 gap-4\">\r\n                        ${this.renderStatCards()}\r\n                    </div>\r\n\r\n                    <!-- CO2 Impact - Span 6 columns -->\r\n                    <div class=\"col-span-6 bg-white rounded-2xl p-6 shadow-sm\">\r\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Environmental Impact</h3>\r\n                        <div class=\"grid grid-cols-2 gap-8\">\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">CO2 Offset</p>\r\n                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"co2-offset-value\">0</span>\r\n                                    <span class=\"text-lg font-normal text-gray-500\">tons/year</span>\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">Equivalent to Trees Planted</p>\r\n                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"trees-value\">0</span>\r\n                                    <span class=\"text-lg font-normal text-gray-500\">trees</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- System Details - Span 6 columns -->\r\n                    <div class=\"col-span-6 bg-white rounded-2xl p-6 shadow-sm\">\r\n                        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">System Details</h3>\r\n                        <div class=\"grid grid-cols-2 gap-8\">\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">Number of Panels</p>\r\n                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"panels-value\">0</span>\r\n                                    <span class=\"text-lg font-normal text-gray-500\">units</span>\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p class=\"text-gray-600 text-sm\">Required Roof Area</p>\r\n                                <p class=\"text-3xl font-bold text-gray-900 mt-1\">\r\n                                    <span id=\"roof-area-value\">0</span>\r\n                                    <span class=\"text-lg font-normal text-gray-500\">sq ft</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this.initializeComponents();\r\n    }\r\n\r\n    renderStatCards() {\r\n        const stats = [\r\n            {\r\n                label: \"Daily Production\",\r\n                value: this.billData.estimatedDailyProduction,\r\n                unit: \"kWh\",\r\n                bg: \"bg-yellow-50\",\r\n                icon: \"⚡️\",\r\n                id: \"daily-production-value\"\r\n            },\r\n            {\r\n                label: \"Monthly Production\",\r\n                value: this.billData.estimatedMonthlyProduction,\r\n                unit: \"kWh\",\r\n                bg: \"bg-blue-50\",\r\n                icon: \"📊\",\r\n                id: \"monthly-production-value\"\r\n            },\r\n            {\r\n                label: \"Coverage\",\r\n                value: this.billData.coveragePercentage,\r\n                unit: \"%\",\r\n                bg: \"bg-green-50\",\r\n                icon: \"🎯\",\r\n                id: \"coverage-value\"\r\n            },\r\n            {\r\n                label: \"Panel Efficiency\",\r\n                value: \"21.5\",\r\n                unit: \"%\",\r\n                bg: \"bg-purple-50\",\r\n                icon: \"⚙️\",\r\n                id: \"efficiency-value\"\r\n            }\r\n        ];\r\n\r\n        return stats.map(stat => `\r\n            <div class=\"bg-white rounded-xl p-4 shadow-sm\">\r\n                <div class=\"flex items-center justify-between mb-2\">\r\n                    <span class=\"text-gray-600 text-xs\">${stat.label}</span>\r\n                    <span class=\"${stat.bg} w-8 h-8 flex items-center justify-center rounded-lg text-sm\">\r\n                        ${stat.icon}\r\n                    </span>\r\n                </div>\r\n                <p class=\"text-xl font-bold text-gray-900\">\r\n                    <span id=\"${stat.id}\">0</span>\r\n                    <span class=\"text-sm font-normal text-gray-500\">${stat.unit}</span>\r\n                </p>\r\n            </div>\r\n        `).join('');\r\n    }\r\n    initializeComponents() {\r\n      this.initializeCountUps();\r\n      this.initializeProgressBars();\r\n      this.initializeCharts();\r\n      this.startAnimations();\r\n  }\r\n\r\n  initializeCountUps() {\r\n      const countUpOptions = {\r\n          duration: 2.5,\r\n          useEasing: true,\r\n          useGrouping: true,\r\n      };\r\n\r\n      // System Size\r\n      this.countUps.systemSize = new CountUp('system-size-value', 0, this.billData.recommendedSystemSize, 2, countUpOptions);\r\n\r\n      // Cost\r\n      this.countUps.cost = new CountUp('cost-value', 0, this.billData.estimatedSystemCost, 0, {\r\n          ...countUpOptions,\r\n          prefix: 'PKR ',\r\n          formattingFn: (value) => {\r\n              return new Intl.NumberFormat('en-PK', {\r\n                  style: 'currency',\r\n                  currency: 'PKR',\r\n                  maximumFractionDigits: 0\r\n              }).format(value);\r\n          }\r\n      });\r\n\r\n      // Payback Period\r\n      this.countUps.payback = new CountUp('payback-value', 0, this.billData.estimatedPaybackPeriod, 1, countUpOptions);\r\n\r\n      // Annual Savings\r\n      this.countUps.annualSavings = new CountUp('annual-savings-value', 0, this.billData.estimatedAnnualSavings, 0, {\r\n          ...countUpOptions,\r\n          prefix: 'PKR ',\r\n          formattingFn: (value) => {\r\n              return new Intl.NumberFormat('en-PK', {\r\n                  style: 'currency',\r\n                  currency: 'PKR',\r\n                  maximumFractionDigits: 0\r\n              }).format(value);\r\n          }\r\n      });\r\n\r\n      // Production Stats\r\n      this.countUps.dailyProduction = new CountUp('daily-production-value', 0, this.billData.estimatedDailyProduction, 1, countUpOptions);\r\n      this.countUps.monthlyProduction = new CountUp('monthly-production-value', 0, this.billData.estimatedMonthlyProduction, 0, countUpOptions);\r\n      this.countUps.coverage = new CountUp('coverage-value', 0, this.billData.coveragePercentage, 1, countUpOptions);\r\n      this.countUps.efficiency = new CountUp('efficiency-value', 0, 21.5, 1, countUpOptions);\r\n\r\n      // Environmental Impact\r\n      const co2Offset = this.billData.estimatedAnnualProduction * 0.0007;\r\n      this.countUps.co2Offset = new CountUp('co2-offset-value', 0, co2Offset, 1, countUpOptions);\r\n      this.countUps.trees = new CountUp('trees-value', 0, Math.round(co2Offset * 40), 0, countUpOptions);\r\n\r\n      // System Details\r\n      this.countUps.panels = new CountUp('panels-value', 0, this.billData.numberOfPanels, 0, countUpOptions);\r\n      this.countUps.roofArea = new CountUp('roof-area-value', 0, this.billData.numberOfPanels * 17.5, 0, countUpOptions);\r\n  }\r\n\r\n  initializeProgressBars() {\r\n      // System Size Progress Bar\r\n      this.progressBars.systemSize = new ProgressBar.Line('#system-size-progress', {\r\n          color: '#3B82F6',\r\n          trailColor: '#E5E7EB',\r\n          trailWidth: 8,\r\n          strokeWidth: 8,\r\n          duration: 2000,\r\n          easing: 'easeInOut',\r\n          from: { color: '#93C5FD' },\r\n          to: { color: '#3B82F6' },\r\n          step: (state, bar) => {\r\n              bar.path.setAttribute('stroke', state.color);\r\n          }\r\n      });\r\n  }\r\n\r\n  initializeCharts() {\r\n      const ctx = document.getElementById('energy-production-chart');\r\n      if (!ctx) return;\r\n\r\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n      const baseProduction = this.billData.estimatedMonthlyProduction;\r\n\r\n      const productionData = months.map(month => {\r\n          const seasonalFactor = this.getSeasonalFactor(month);\r\n          return baseProduction * seasonalFactor;\r\n      });\r\n\r\n      this.charts.production = new Chart(ctx, {\r\n          type: 'line',\r\n          data: {\r\n              labels: months,\r\n              datasets: [{\r\n                  label: 'Estimated Production (kWh)',\r\n                  data: productionData,\r\n                  borderColor: '#3B82F6',\r\n                  backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n                  tension: 0.4,\r\n                  fill: true,\r\n                  pointRadius: 4,\r\n                  pointHoverRadius: 6\r\n              }]\r\n          },\r\n          options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                  legend: {\r\n                      display: false\r\n                  },\r\n                  tooltip: {\r\n                      backgroundColor: 'white',\r\n                      titleColor: '#1F2937',\r\n                      bodyColor: '#4B5563',\r\n                      borderColor: '#E5E7EB',\r\n                      borderWidth: 1,\r\n                      padding: 12,\r\n                      displayColors: false,\r\n                      callbacks: {\r\n                          label: (context) => `${context.parsed.y.toLocaleString()} kWh`\r\n                      }\r\n                  }\r\n              },\r\n              scales: {\r\n                  x: {\r\n                      grid: {\r\n                          display: false\r\n                      }\r\n                  },\r\n                  y: {\r\n                      beginAtZero: true,\r\n                      grid: {\r\n                          color: 'rgba(0, 0, 0, 0.05)'\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      });\r\n  }\r\n\r\n  getSeasonalFactor(month) {\r\n      const seasonalFactors = {\r\n          'Dec': 0.7, 'Jan': 0.7, 'Feb': 0.8,\r\n          'Mar': 0.9, 'Apr': 1.0, 'May': 1.1,\r\n          'Jun': 1.2, 'Jul': 1.2, 'Aug': 1.1,\r\n          'Sep': 1.0, 'Oct': 0.9, 'Nov': 0.8\r\n      };\r\n      return seasonalFactors[month];\r\n  }\r\n\r\n  startAnimations() {\r\n      // Start all CountUp animations\r\n      Object.values(this.countUps).forEach(countUp => {\r\n          if (countUp && !countUp.error) {\r\n              countUp.start();\r\n          }\r\n      });\r\n\r\n      // Animate progress bars\r\n      if (this.progressBars.systemSize) {\r\n          this.progressBars.systemSize.animate(0.75); // Example progress value\r\n      }\r\n\r\n      // Add entrance animations with GSAP\r\n      const cards = document.querySelectorAll('.rounded-2xl');\r\n      gsap.fromTo(cards, \r\n          { \r\n              y: 20,\r\n              opacity: 0\r\n          },\r\n          {\r\n              y: 0,\r\n              opacity: 1,\r\n              duration: 0.6,\r\n              stagger: 0.1,\r\n              ease: \"power2.out\"\r\n          }\r\n      );\r\n  }\r\n\r\n  cleanup() {\r\n      // Cleanup charts\r\n      Object.values(this.charts).forEach(chart => {\r\n          if (chart) chart.destroy();\r\n      });\r\n      this.charts = {};\r\n\r\n      // Cleanup progress bars\r\n      Object.values(this.progressBars).forEach(progressBar => {\r\n          if (progressBar) progressBar.destroy();\r\n      });\r\n      this.progressBars = {};\r\n\r\n      // Reset CountUps\r\n      Object.values(this.countUps).forEach(countUp => {\r\n          if (countUp) countUp.reset();\r\n      });\r\n      this.countUps = {};\r\n  }\r\n}"
        }
    ]
}