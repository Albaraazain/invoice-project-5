{
    "sourceFile": "js/store/vueState.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1729002431259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1729002431259,
            "name": "Commit-0",
            "content": "import { ref, reactive } from 'vue'\r\n\r\nconst state = reactive({\r\n    billData: null,\r\n    isLoading: false,\r\n    error: null\r\n})\r\n\r\nexport function useVueState() {\r\n    function initializeSolarSizingState() {\r\n        const savedData = localStorage.getItem('billData')\r\n        if (savedData) {\r\n            state.billData = JSON.parse(savedData)\r\n        }\r\n    }\r\n\r\n    function getBillData() {\r\n        return state.billData\r\n    }\r\n\r\n    function saveBillData(billData) {\r\n        state.billData = billData\r\n        localStorage.setItem('billData', JSON.stringify(billData))\r\n    }\r\n\r\n    function getIsLoading() {\r\n        return state.isLoading\r\n    }\r\n\r\n    function getError() {\r\n        return state.error\r\n    }\r\n\r\n    async function fetchBillData(referenceNumber) {\r\n        state.isLoading = true\r\n        state.error = null\r\n\r\n        try {\r\n            // Simulate API call with a delay\r\n            await new Promise(resolve => setTimeout(resolve, 1000))\r\n\r\n            // Generate mock data (similar to the Vue version)\r\n            const unitsConsumed = Math.floor(Math.random() * 500) + 300\r\n            const ratePerUnit = (Math.random() * 5 + 15).toFixed(2)\r\n            const amount = (unitsConsumed * ratePerUnit).toFixed(2)\r\n            const taxRate = 10\r\n            const taxAmount = (amount * (taxRate / 100)).toFixed(2)\r\n            const totalAmount = (parseFloat(amount) + parseFloat(taxAmount)).toFixed(2)\r\n\r\n            // Solar system calculation (simplified)\r\n            const systemSize = (unitsConsumed / 30 / 4).toFixed(2)\r\n            const numberOfPanels = Math.ceil(systemSize * 1000 / 400)\r\n            const estimatedDailyProduction = (systemSize * 4).toFixed(2)\r\n            const estimatedMonthlyProduction = (estimatedDailyProduction * 30).toFixed(2)\r\n            const estimatedAnnualProduction = (estimatedDailyProduction * 365).toFixed(2)\r\n            const coveragePercentage = ((estimatedMonthlyProduction / unitsConsumed) * 100).toFixed(2)\r\n\r\n            state.billData = {\r\n                referenceNumber,\r\n                customerName: 'John Doe',\r\n                address: '123 Solar Street, Sunny City, Pakistan',\r\n                phoneNumber: '+92 300 1234567',\r\n                issueDate: new Date().toLocaleDateString(),\r\n                dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toLocaleDateString(),\r\n                unitsConsumed,\r\n                ratePerUnit,\r\n                amount,\r\n                taxRate,\r\n                taxAmount,\r\n                totalAmount,\r\n                averageMonthlyConsumption: unitsConsumed,\r\n                backgroundColor: `#${Math.floor(Math.random()*16777215).toString(16)}`,\r\n                recommendedSystemSize: parseFloat(systemSize),\r\n                numberOfPanels,\r\n                panelWattage: 400,\r\n                estimatedDailyProduction: parseFloat(estimatedDailyProduction),\r\n                estimatedMonthlyProduction: parseFloat(estimatedMonthlyProduction),\r\n                estimatedAnnualProduction: parseFloat(estimatedAnnualProduction),\r\n                coveragePercentage: parseFloat(coveragePercentage),\r\n                estimatedSystemCost: Math.round(systemSize * 100000),\r\n                estimatedAnnualSavings: Math.round(estimatedAnnualProduction * ratePerUnit),\r\n                estimatedPaybackPeriod: (systemSize * 100000 / (estimatedAnnualProduction * ratePerUnit)).toFixed(1)\r\n            }\r\n            saveBillData(state.billData)\r\n        } catch (err) {\r\n            state.error = 'Failed to fetch bill data. Please try again.'\r\n            console.error('Error fetching bill data:', err)\r\n        } finally {\r\n            state.isLoading = false\r\n        }\r\n    }\r\n\r\n    return {\r\n        initializeSolarSizingState,\r\n        getBillData,\r\n        saveBillData,\r\n        getIsLoading,\r\n        getError,\r\n        fetchBillData\r\n    }\r\n}"
        }
    ]
}